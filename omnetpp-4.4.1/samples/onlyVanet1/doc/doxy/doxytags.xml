<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AddressingInterface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>AddressingInterface_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">AddressingInterface</class>
  </compound>
  <compound kind="file">
    <name>AirFrame11p_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/messages/</path>
    <filename>AirFrame11p__m_8h</filename>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <class kind="class">AirFrame11p</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>AirFrame11p__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AirFrame11p__m_8h.html</anchorfile>
      <anchor>ad83af586f31c7445fbdf5fb40dcb7e09</anchor>
      <arglist>(cCommBuffer *b, AirFrame11p &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AirFrame11p__m_8h.html</anchorfile>
      <anchor>adc2eade05254bb9a90ee73fbb8993808</anchor>
      <arglist>(cCommBuffer *b, AirFrame11p &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AirFrame_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/messages/</path>
    <filename>AirFrame__m_8h</filename>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
    <class kind="class">Veins::AirFrame</class>
    <namespace>Veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>AirFrame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a3b3f2a57b7ea45d25c3621ae72dcacb7</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a2bbc3cd13c02338fcad7ebdf40d8e3df</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnalogueModel.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>AnalogueModel_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">AnalogueModel</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>AnnotationDummy.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/world/annotations/</path>
    <filename>AnnotationDummy_8cc</filename>
    <includes id="AnnotationDummy_8h" name="AnnotationDummy.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationDummy.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AnnotationDummy_8cc.html</anchorfile>
      <anchor>a283c46f51f18045ade96818209f2d2c2</anchor>
      <arglist>(AnnotationDummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationDummy.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/world/annotations/</path>
    <filename>AnnotationDummy_8h</filename>
    <class kind="class">Veins::AnnotationDummy</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>AnnotationManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/world/annotations/</path>
    <filename>AnnotationManager_8cc</filename>
    <includes id="AnnotationManager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <includes id="TraCIScenarioManager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AnnotationManager_8cc.html</anchorfile>
      <anchor>a075fb1a6f33ec60ba9be734670f79c05</anchor>
      <arglist>(Veins::AnnotationManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/world/annotations/</path>
    <filename>AnnotationManager_8h</filename>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">Veins::AnnotationManager</class>
    <class kind="class">Veins::AnnotationManager::Annotation</class>
    <class kind="class">Veins::AnnotationManager::Point</class>
    <class kind="class">Veins::AnnotationManager::Line</class>
    <class kind="class">Veins::AnnotationManager::Polygon</class>
    <class kind="class">Veins::AnnotationManager::Group</class>
    <class kind="class">Veins::AnnotationManagerAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>aodvTraCI.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>aodvTraCI_8cc</filename>
    <includes id="aodvTraCI_8h" name="aodvTraCI.h" local="yes" imported="no">applications/traci/aodvTraCI.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>aodvTraCI_8cc.html</anchorfile>
      <anchor>a922688cc9a30eaedad32957a45d51ca7</anchor>
      <arglist>(aodvTraCI)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aodvTraCI.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>aodvTraCI_8h</filename>
    <includes id="aodvTraCIMobility_8h" name="aodvTraCIMobility.h" local="yes" imported="no">mobility/single/aodvTraCIMobility.h</includes>
    <class kind="class">aodvTraCI</class>
  </compound>
  <compound kind="file">
    <name>aodvTraCIConstants.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>aodvTraCIConstants_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>aodvTraCI_VERSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8e95053a418f09c965d5ae2b978366f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8e73707083e5a68828275698eadeab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>affa501f61facb91d6c42b6ed4b184dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_STOP</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a46dc7ae84992bfe62cc00731959a67f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_RESUME</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad94c1b5ed2f3487c7245445a27fb5912</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adf76abeac554994696e6af2df832caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a628edc613cc0dc75723a440d4f59cf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adeeddcd0f58304495e3e30c5285be51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLOSE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0908ae0ea53f32f9e7bbb814b4ebc9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a77a3a68c3e4b2d0f90374fa62b6d6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa5f062ce635f44c083d53d8df2e7fc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8a127fe9592a7f233ed5bfdea70dff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a05246bdec45af16aac5056a45bbfbffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1c08dbf9ecec171fd5a8abdcf4bc1732</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4a59e3000bf1dd5f9c66d541021461d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a83722ee715c13e3c54e67c8685c53677</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4ca1d39ce2764e5576da3c5bb8c31eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1bfe2cee9c84b8e204c443c164a16eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a38464f30e521653b27d884cb0f8e952b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac408b68214392c4024825c8122c2ec67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a25b3cd5b082eee76400c9e81f0b4ab93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abf2a54d0263928c7c67b1399205f62d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a995228e235671467f43c6f230f5a310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae7720408c339a65bb1d7920776e7f4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9d9eaf59816e52a9b1382cd2f0e445fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aab7627756e25685ef8398633ca620bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>afc74049e4ac8c8a65d6b25c0c363cadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad2fa5b748b1580f354b631507e6e9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0dd8b3825acb93e57835a9c6a59a0f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a23a5713b2efa147f104b003c10d07ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab9a720c867f40272e532baba3fe1d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a45d28d5e51861aadcb6628654e5eb216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a89bdee3b9abb917a60549fd59fbb0030</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4b0ea4b02e65aedf9e65adf86933cc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a46b32b8e87e293aced2c6242363abafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>af88f093b11ea60a099215445b748b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae82c59889f44f40b0df6f1c41e00cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a16b6670eaa5a5845527c1ea9c4ef6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adf59516cf5e0e33c6456e79e41c066cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>afef1c73324fcdc35456aac81a7148543</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a3a44889166592e82aecf99a5c9b9107d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac20682f65f1f56d1406969e4840386ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a7e3288033a093977343bc000cfa0dbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8327578e1d375be0cda35067c23d0542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8efb67d70d2b7c6b86d9d99a40806e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4daee312282fa61ce2b2c9e19dc71fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6ea1568c34b29442244baf42f2bdc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a17305b49c61a77532505151ce2d399b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aaa289d08e25ed1871788a796ea91119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae081962daaad7c840b403c78a17a5417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae6a517ede4227e23146523b5390e07a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a611f3b8bd0715603a95b357dfbf8d078</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab5485e8ea7e4ac013adc23328137a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad0ac305c18e80d93f39441a8db700d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a3fa3a62d0be585a1254411199257e5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9ae14a25ff457995de0d6578d034f44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8c230b85db253650ca48a0f52daf4dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4b9ab406e73542e88dfcf44d3d736a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0fd8a024f568bf8b48ea3f64654de5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>af919cb89a8a561aff0896e66b5b5319a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a430ba00f89274e46a4c30b2cb99df0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a76e46577d69ef80748268f4ac965addd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>af4c74ade0bf736fb05e375efc4c27324</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4f792965065f4fa7c1515fcf9998b7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a725c1c8d88140ccd66d2c78a72ab7c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a12e00b53d862c78782a35163d658ad24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab75171b37a51f872525267e699d527cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a30482aa996155d083ce2ca8415ed70f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad135c2bd596c0d8e6a7b1f2c3e9aff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1cfd9140dd98070257cf737420411c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a739adbf1b8ffc6ed775431573f2fdb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a404ce6a209165786b246406df4aead28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a726077fc812b6f19601ee2cd8181e889</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9a5b7a862e0e503918cdc066f3458e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abebcb9821a2d54a8cdcb094e4ca58b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5c814e302a1e1c3fd43fa2f7e285a014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a47351c017e8d6b1696debc71cfc1a52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a417533e3ca34f46cd8b1c43c9e9af26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a19fb63fc78fed848a258aa23b138ff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5f6f40f44660f99fe2f4a10f64464be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1b11dc53cd2d9cc703d64531b75446eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4a3b3f72cbb0e56c0497ec5cd41e9230</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a35d453923055d4c62f6f786b5785511c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5795554151e18de86f5abf94cbec4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae615615a34e54cf69171803bfcdf91f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa893eb800437ce3ecf5fe24ca693a953</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac50a1184def0490f99882a2b24102500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a28a6f61ca698fbf35fa06f94366e5ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abd59649fa90019dd8b4171469b43e340</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a61ace178f023e87e8fab4a2cff1d70c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8008229a0fe2d03c3e4dd58e80e46ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aae8689698f0f9440895902bd79a4acc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a59701651aaf3a84c12530259646846de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a157bc725d90b04ca8844224cc02c4cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac3fa214c68b4f9c6d72b87857d528b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa6ecd09a7f6cc9872956f06a84ab3caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad345b2290b629c7df963593c191f9a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>afc254ddb55bf9b49350f7b47ba6f9537</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0a10dec2c5213528772d967138b25984</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6f83cac4993ab850b3bf4ee317e185c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab8aa0b8c58b89bd0dcb5449e92c82b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a54a1de506a4c7ca2344bb204cd19af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab86891c2e946e90b4360ecad860825a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4e9c9edafbf4e14d85142723bbcda7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa04d99fb7799fc05097ce8b55f6794e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_2D</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9fc3eb37a8ae494084b863c411cf8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6a1ab0cb7f3aea6a181bc47f7939f284</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_3D</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a2e4e2d4459c881109b0b40d723d5ba8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a82812c142e13bbb144d26ac69b291cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad6279a78dbab9ba005c6c1ff819fb2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a63081ba85a6af222803d714237576999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a3d7c110d8026c92c2fee435f7cd12193</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BYTE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad62574650f26d2392ab55729769948b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a929147425bf7969fe1d0e33716d02bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_FLOAT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a105c7addfad52601f4d079673eae7982</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac87fa650bc0dcd101b39e15ecdb57477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_TLPHASELIST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aba8744658fadd99da72fd9117b464ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5561b6050ea28ec6d322e28848460c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5af12da4378875209e0b79bbe6b70e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COLOR</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4a2941e13cc0bd28c847984e7f573850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_OK</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a541fc8755958a227fe412e2df7fa31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a31333391a4e82822d2c43e3928b6262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_ERR</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a43465ba21de31f9ae2573e7ac5f24919</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abd665a03a6204505716245362eeca1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5722d9b8df900cf44a69151b6f4b1e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_RED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae475cd0b9d5ae96a145230c0ac287154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_YELLOW</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a65d19b964abffa9b90c39cf21fcc0fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_GREEN</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a89c162b91c4124ebfe80f5bfa37621f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_BLINKING</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adf4fad950649759339ab18b4978a57bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_NOSIGNAL</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>acf44e21bfd6f2edbb22d04efda707da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a88b616d763ed7052b2341f6d08040135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0876dbae8eb3fb92b20b2568d71eaf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a7e483da406ff89a7b9fbe9dcb4ecfa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0cfd27f8f6dad63eb821dea08fc25c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a93901a271a595e7d3eb9ab540aa8d9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ace5ff9b0a74f5328e9dbcf71d79d25a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a7b8fcc7038295f3a18a5200af1b46633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_LIST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a28687ff0fca27086bca2dfb0c0aa8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_COUNT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a10ef5e45606c2977dd1eaf386f5d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a121b9861ef8ff7a65dbf05955903bd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>af7cffef1a0ad07af0cb2bc1f647f7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5cc4b739aa511a8bcdb3ea23e5f488fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1bffbc3260dd641611f50a5b675c6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a7c60786af53b7e18ae6114577656e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a028a459ac58e7412d86407a6a647f544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac7bc8c0d2db79321580ed8391829e23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>afb37eb3a0763757e55635de36a0952bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abde51e92597a7d674fe9a90c1d6c6054</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9989b962ced0c0a5d568c5812effe104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a74683d948c8a7dfc72157023021232f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8f84a9cfe1563281fc6c91b72f14a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8023e019a18d24881b8780aef047b455</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>add58d847358637741402c2979fc014ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PROGRAM</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>af39eae82404a11130f08d21c9d8a84f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aac7f12ef78085882c4fd0a2b5dd0d359</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a2e60c8a6b44d8d40ad51c65ab95b3e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a7eb603191d4446e7cf87c2356be3448e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aaf461fd64ac182b47c025f6f78af23e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9224116e351cb230398e837841fac367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>addac5c47b0c3f52a08255d079dfb6c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abae7b714231e81de94e1024f9f41a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a34b22bed0e5c0ba971a86ab8c56838fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>acee0a296326d46d40c9b97667dc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a20c9ad5e2c2ee1049282fca2605d3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aeb0a208a3c967515421f6659575da87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINKS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac39a0a0f89c208808ee921c9dbe8da8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6c5b0c0bc04b2036a971ca4bd7f5007f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5079457f2d9cc6be8da3834ae4a06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a803f3a1743aef11a357e838e50d80f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1f8d8754eb24cd09fb3107a3f71bf76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_POSITION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a40ee44d232bc7661ec5a37bacd60702e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ANGLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aef6ef58b8c84169ca96fc70f9c5cee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LENGTH</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a60e947bd75233810d5417b41f27e68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COLOR</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adcc89457ed75668afd992c756fc58549</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ACCEL</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aafdce9f42320b3e72c814cceaab9809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DECEL</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4f883334365d5c2e0f18944be814441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TAU</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8d32ba4c4cc7e453e9b63426d84eb084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5cdedbf9fd0353a0a7c60982b4bd1494</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a46a1e04d43660551e055d44f2d0ca41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0f50ad2a0f01241405381b9e895ab2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MINGAP</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aea443b43de4353bbaab7f34d303afe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WIDTH</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adb08f65a6543f976dbfe6ee7db5d08a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8bcea46eaacfa0cb3896a2ca066ce237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TYPE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae136061e5a4bf896d9cfb27868baf9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a006ca3246206d575bc949da18c7d075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>afb32e44c504d7f1bd7f7ba1fb3a56a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a19d2b339169244a09db78bb764fadd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a48cbe1bf5748e27183054ed2ddcfa3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGES</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ada001729364b89aa926730f631d6e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FILL</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>add08c9a33fb813e51fccabb3475a4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4493c1eaff38410b9afd3b5ec86e760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab193f946f651c97e299dfc4285133516</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa03c145ea3d6ed1039ee650ad0599452</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a82afe862545ade0192be2788e5b29f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8c5b07ef23ea6dc11209203b3ac7759d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a7378a076f1ed4fb133d04d474ec36110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad18db3a6f2be838f3ea6d75bb1784b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac98dc6e9bc82ae734fa638762f81eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac73c5a63a7ba70a57e9f2162277799db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aaa434a0096961983f3ca1fddbeb73b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_WITHOUT_aodvTraCI</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>af8a318643639db73871ec78df6892581</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a547dc5b69db59f7d5919f1e295469049</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5c4f611616810959183c7b4e1d6e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a2bc86d4cb640d38c9141eff52fdeddc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ae3c19c3616e283cc23c02b38fa6b106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adf0c5e5040db7935734b8b883973e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa744a28d72caf1c96e355a61b341d9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CO2EMISSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>adcc6403451c32bda03d9563843f4eb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COEMISSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a55f8fd37376dc3adc19fc6e2ceaf53ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_HCEMISSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aaa0aad5c649d543d8de81bdb22d06664</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PMXEMISSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a37217bdbf8be36dc1bd44ecd62a807a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOXEMISSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a89457fa8c4ae6bd5adf6cc97860d08bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FUELCONSUMPTION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>acdec282d3916d2d2ec373cd6f5f5e977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOISEEMISSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a54cb80eb2dc3f07710f64ca77f9b732d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac2d739153c2b7614503bdd7053a96027</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6975b2bc0430600de2e96f1b7dcb5e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa57f4cf03d1b32e487371987f3f0cc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad32f4444706efc2c595e978f7898563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad9d66d42efa6d47d084d4dd8ed52b7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abb332ca9704ebaa6b5f779af5ab8412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a578826c7c51ee3143b8b6f6c63854512</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ad329e5b7d4a42b7e34acf7cb89b34de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a0ff9aec6a237456a854c35841a01e1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aba383d3234c4f0b62a0ece79b98ec457</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ada0133b150f6beef3b9c15d65892dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa15656ecb567d69ab1a26a6b77f48e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4d7f1f70a9b831317c8516c7c49395b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a53906c58d5f7c9d0474b2327dc6758c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1feee452ab9f9778c68cf55e8cb70b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a217ca72b88d743238b7bc3bacbe7da1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abf31d852e42db03d1a3fd426d9d3b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aa8562695a38b797bf6c77156cc53be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>aca15cc76f5f1f2150602ae0221ea9efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a30267d895605937cc904a8471aa2b098</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a89cb2ef6aa378ea1b5c71ede68f3af5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a1051bd1ae917fc0cc2639f48462c0a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a97fe5470fb1ac167c713671655ff3e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ab9959e75e26bc66b3733ddc04de6b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a8ef564809ccabdee78bdc9656a660a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a92f25b953319f56d635ea4fe599d65c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a39e184bf382ac65aaaf2ea344ed909a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a9cf2d3b5926694eca9a290606153dbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a27d763793c3a43050ece9e76caa0f697</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a817e029aaf52b9bd33c3115af6384e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a6223fc3eef58008e64e425ddf4136ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>ac7a52c618e295256a64a55c94bd754a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a48b64030823e73abcea5f383a07a6b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a3de049e7d6d515e3250a8af1bcd04565</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a4ae01bdb5b0bcb9237faecf1930af5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>aodvTraCIConstants_8h.html</anchorfile>
      <anchor>a5762708bbdd17c389bfffb5a19143b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aodvTraCIMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>aodvTraCIMobility_8cc</filename>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="aodvTraCIMobility_8h" name="aodvTraCIMobility.h" local="yes" imported="no">mobility/single/aodvTraCIMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>aodvTraCIMobility_8cc.html</anchorfile>
      <anchor>a8d79cd26ac257278a62d33caf703a7ae</anchor>
      <arglist>(aodvTraCIMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aodvTraCIMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>aodvTraCIMobility_8h</filename>
    <includes id="VANETMobilityBase_8h" name="VANETMobilityBase.h" local="yes" imported="no">VANETMobilityBase.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="aodvTraCIScenarioManager_8h" name="aodvTraCIScenarioManager.h" local="yes" imported="no">world/traci/aodvTraCIScenarioManager.h</includes>
    <class kind="class">aodvTraCIMobility</class>
    <class kind="class">aodvTraCIMobility::Statistics</class>
    <class kind="class">aodvTraCIMobilityAccess</class>
  </compound>
  <compound kind="file">
    <name>aodvTraCIScenarioManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>aodvTraCIScenarioManager_8cc</filename>
    <includes id="aodvTraCIScenarioManager_8h" name="aodvTraCIScenarioManager.h" local="yes" imported="no">world/traci/aodvTraCIScenarioManager.h</includes>
    <includes id="aodvTraCIConstants_8h" name="aodvTraCIConstants.h" local="yes" imported="no">world/traci/aodvTraCIConstants.h</includes>
    <includes id="aodvTraCIMobility_8h" name="aodvTraCIMobility.h" local="yes" imported="no">mobility/single/aodvTraCIMobility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>aodvTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYSOCKET</name>
      <anchorfile>aodvTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a5a08180b61c99cfe56e425578f50ea99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>aodvTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>aodvTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>abdadc0f3fe6e6b0634597e804f5081fd</anchor>
      <arglist>(aodvTraCIScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aodvTraCIScenarioManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>aodvTraCIScenarioManager_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="vanetTraCIColor_8h" name="vanetTraCIColor.h" local="yes" imported="no">vanetTraCIColor.h</includes>
    <class kind="class">aodvTraCIScenarioManager</class>
    <class kind="struct">aodvTraCIScenarioManager::aodvTraCICoord</class>
    <class kind="class">aodvTraCIScenarioManager::aodvTraCIBuffer</class>
    <class kind="class">aodvTraCIScenarioManagerAccess</class>
  </compound>
  <compound kind="file">
    <name>aodvTraCIScenarioManagerLaunchd.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>aodvTraCIScenarioManagerLaunchd_8cc</filename>
    <includes id="aodvTraCIScenarioManagerLaunchd_8h" name="aodvTraCIScenarioManagerLaunchd.h" local="yes" imported="no">world/traci/aodvTraCIScenarioManagerLaunchd.h</includes>
    <includes id="aodvTraCIConstants_8h" name="aodvTraCIConstants.h" local="yes" imported="no">world/traci/aodvTraCIConstants.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>aodvTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>acd42c64604c9797d6697cdbd75377eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>aodvTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>aodvTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a27d5a36e881da2bf764261c70b14b8a7</anchor>
      <arglist>(aodvTraCIScenarioManagerLaunchd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aodvTraCIScenarioManagerLaunchd.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>aodvTraCIScenarioManagerLaunchd_8h</filename>
    <includes id="aodvTraCIScenarioManager_8h" name="aodvTraCIScenarioManager.h" local="yes" imported="no">world/traci/aodvTraCIScenarioManager.h</includes>
    <class kind="class">aodvTraCIScenarioManagerLaunchd</class>
    <class kind="class">aodvTraCIScenarioManagerLaunchdAccess</class>
  </compound>
  <compound kind="file">
    <name>aodvTraCITestApp.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>aodvTraCITestApp_8cc</filename>
    <includes id="aodvTraCITestApp_8h" name="aodvTraCITestApp.h" local="yes" imported="no">applications/traci/aodvTraCITestApp.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>aodvTraCITestApp_8cc.html</anchorfile>
      <anchor>a6f00e5ce6162d5ffa07ef8704834edaa</anchor>
      <arglist>(aodvTraCITestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aodvTraCITestApp.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>aodvTraCITestApp_8h</filename>
    <includes id="aodvTraCIMobility_8h" name="aodvTraCIMobility.h" local="yes" imported="no">mobility/single/aodvTraCIMobility.h</includes>
    <class kind="class">aodvTraCITestApp</class>
  </compound>
  <compound kind="file">
    <name>AODVVANETControlPackets_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/aodvvanet/</path>
    <filename>AODVVANETControlPackets__m_8h</filename>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="IVANETMobility_8h" name="IVANETMobility.h" local="yes" imported="no">IVANETMobility.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="struct">UnreachableAODVNode</class>
    <class kind="class">AODVVANETControlPacket</class>
    <class kind="class">AODVVANETRREQ</class>
    <class kind="class">AODVVANETRREP</class>
    <class kind="class">AODVVANETRERR</class>
    <class kind="class">AODVVANETRREPACK</class>
    <class kind="class">WaitForAODVVANETRREP</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AODVVANETControlPacketType</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a6793908c8ebd791f55f727b64ea28408</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RREQ</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a6793908c8ebd791f55f727b64ea28408a6b79ef891ef391ef38255d800c015e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RREP</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a6793908c8ebd791f55f727b64ea28408a5d11297009e41661cb4bfb0f3d90e8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RERR</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a6793908c8ebd791f55f727b64ea28408a18c30a0cc17bf1e939291a7c470c092e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RREPACK</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a6793908c8ebd791f55f727b64ea28408a28364b6a17ac08bc431697160d78cee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a1c79629b2df03549915eaf7e68a196e8</anchor>
      <arglist>(cCommBuffer *b, UnreachableAODVNode &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a3d383b9f5d8abc2c8689206b5b106e85</anchor>
      <arglist>(cCommBuffer *b, UnreachableAODVNode &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>ab2acef79edfd51a85fbb90db43f8efd4</anchor>
      <arglist>(cCommBuffer *b, AODVVANETControlPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>abf321cf18fda3207326bd2069d15648d</anchor>
      <arglist>(cCommBuffer *b, AODVVANETControlPacket &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a66592ffdb3e6271ed22ce464578c9bb1</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRREQ &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>ae23412404f99767bf69ae827441bd8f6</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRREQ &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a0b790d7ab629f23877b81831de3d4bd9</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRREP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>af02c3b355701e25fdca873aa54ad66fd</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRREP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a652949384cb8a5ebf387738193a62f2f</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRERR &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>ac1eefec0f2ad38728392f8cc329e8ed3</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRERR &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a8ba34a6cfb17c204acd254f85b676151</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRREPACK &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>a0572cdfd835a842e49866b3f18460194</anchor>
      <arglist>(cCommBuffer *b, AODVVANETRREPACK &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>afecd2333c72fd979cdc5ff2a7f2eb91a</anchor>
      <arglist>(cCommBuffer *b, WaitForAODVVANETRREP &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>AODVVANETControlPackets__m_8h.html</anchorfile>
      <anchor>ae3a301a6aee86b6ee3f91f9c9d868da1</anchor>
      <arglist>(cCommBuffer *b, WaitForAODVVANETRREP &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AODVVANETRouteData.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/aodvvanet/</path>
    <filename>AODVVANETRouteData_8cc</filename>
    <includes id="AODVVANETRouteData_8h" name="AODVVANETRouteData.h" local="yes" imported="no">AODVVANETRouteData.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>AODVVANETRouteData_8cc.html</anchorfile>
      <anchor>a4c922a7e7fa767ee83fd58b8a83040ef</anchor>
      <arglist>(std::ostream &amp;out, const AODVVANETRouteData *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AODVVANETRouteData.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/aodvvanet/</path>
    <filename>AODVVANETRouteData_8h</filename>
    <class kind="class">AODVVANETRouteData</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>AODVVANETRouteData_8h.html</anchorfile>
      <anchor>a4c922a7e7fa767ee83fd58b8a83040ef</anchor>
      <arglist>(std::ostream &amp;out, const AODVVANETRouteData *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AODVVANETRouting.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/aodvvanet/</path>
    <filename>AODVVANETRouting_8cc</filename>
    <includes id="AODVVANETRouting_8h" name="AODVVANETRouting.h" local="yes" imported="no">AODVVANETRouting.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AODVVANETRouting_8cc.html</anchorfile>
      <anchor>aac39e0387588a4f4cc973763c4a26fed</anchor>
      <arglist>(AODVVANETRouting)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AODVVANETRouting.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/aodvvanet/</path>
    <filename>AODVVANETRouting_8h</filename>
    <includes id="AODVVANETRouteData_8h" name="AODVVANETRouteData.h" local="yes" imported="no">AODVVANETRouteData.h</includes>
    <includes id="AODVVANETControlPackets__m_8h" name="AODVVANETControlPackets_m.h" local="yes" imported="no">AODVVANETControlPackets_m.h</includes>
    <class kind="class">AODVVANETRouting</class>
    <class kind="class">AODVVANETRouting::RREQIdentifier</class>
    <class kind="class">AODVVANETRouting::RREQIdentifierCompare</class>
  </compound>
  <compound kind="file">
    <name>asserts.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>asserts_8cc</filename>
    <includes id="asserts_8h" name="asserts.h" local="yes" imported="no">veins/base/utils/asserts.h</includes>
    <member kind="function">
      <type>void</type>
      <name>fail</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>a1f8628faeb4388876f8ab45607c6f8ca</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pass</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>aec687a334481a5bcfddc105436a6bd06</anchor>
      <arglist>(std::string msg, bool hidePassed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>a91eb1f57eb654c3ac5a16d199b89c26a</anchor>
      <arglist>(std::string msg, bool value, bool hidePassed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertFalse</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>aebcb1171586edc207f337d2f73fba5b7</anchor>
      <arglist>(std::string msg, bool value)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>haltOnFails</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>aeb737c1e6c8fe37c0bbda18ed4ec9c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>displayPassed</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>ac1023727041c5d5af91a5de139fda9db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>asserts.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>asserts_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>fail</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a16993092edc0ffcced4de614d2acc074</anchor>
      <arglist>(std::string msg, T expected, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fail</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a1f8628faeb4388876f8ab45607c6f8ca</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pass</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>aee2041a905a32ba514ff25b90a20ce4e</anchor>
      <arglist>(std::string msg, bool hidePassed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>afce42beebc712b8f8a0aa98c3b6818a9</anchor>
      <arglist>(std::string msg, bool value, bool hidePassed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertFalse</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>aebcb1171586edc207f337d2f73fba5b7</anchor>
      <arglist>(std::string msg, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertClose</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a49894dc35526035a4ce26b9ab593102e</anchor>
      <arglist>(std::string msg, T target, T actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertEqual</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a600bdbb498d1f3c97126ce600fd5e48c</anchor>
      <arglist>(std::string msg, T target, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertEqualSilent</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>ae2c31f2691cef4d630fa732ccd528024</anchor>
      <arglist>(std::string msg, T target, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertNotEqual</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a38bf3c92a02acd42ddbccd053dabe2e6</anchor>
      <arglist>(std::string msg, T target, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a73ae7e986e8c63298610d330578f5b74</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>haltOnFails</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>aeb737c1e6c8fe37c0bbda18ed4ec9c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>displayPassed</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>ac1023727041c5d5af91a5de139fda9db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseApplLayer_8cc</filename>
    <includes id="BaseApplLayer_8h" name="BaseApplLayer.h" local="yes" imported="no">veins/base/modules/BaseApplLayer.h</includes>
    <includes id="PassedMessage_8h" name="PassedMessage.h" local="yes" imported="no">veins/base/utils/PassedMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseApplLayer_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BaseLayer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">BaseApplLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseBattery.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseBattery_8cc</filename>
    <includes id="BaseBattery_8h" name="BaseBattery.h" local="yes" imported="no">veins/base/modules/BaseBattery.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseBattery.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseBattery_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BaseModule_8h" name="BaseModule.h" local="yes" imported="no">veins/base/modules/BaseModule.h</includes>
    <includes id="HostState_8h" name="HostState.h" local="yes" imported="no">veins/base/utils/HostState.h</includes>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>BaseConnectionManager_8cc</filename>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="NicEntryDebug_8h" name="NicEntryDebug.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDebug.h</includes>
    <includes id="NicEntryDirect_8h" name="NicEntryDirect.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDirect.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ccEV</name>
      <anchorfile>BaseConnectionManager_8cc.html</anchorfile>
      <anchor>a4b2119ae4d85523b374e820916ee091b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>BaseConnectionManager_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="NicEntry_8h" name="NicEntry.h" local="yes" imported="no">veins/base/connectionManager/NicEntry.h</includes>
    <class kind="class">BaseConnectionManager</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <class kind="class">BaseConnectionManager::CoordSet</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseDecider.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>BaseDecider_8cc</filename>
    <includes id="BaseDecider_8h" name="BaseDecider.h" local="yes" imported="no">veins/base/phyLayer/BaseDecider.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseDecider.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>BaseDecider_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <class kind="class">BaseDecider</class>
    <class kind="struct">BaseDecider::CSRInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>deciderEV</name>
      <anchorfile>BaseDecider_8h.html</anchorfile>
      <anchor>a3200db65721ee02e265524d66a4cf7c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseLayer.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseLayer_8cc</filename>
    <includes id="BaseLayer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseLayer.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseLayer_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="PassedMessage_8h" name="PassedMessage.h" local="yes" imported="no">veins/base/utils/PassedMessage.h</includes>
    <class kind="class">BaseLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseMacLayer_8cc</filename>
    <includes id="BaseMacLayer_8h" name="BaseMacLayer.h" local="yes" imported="no">veins/base/modules/BaseMacLayer.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
    <includes id="MacToPhyInterface_8h" name="MacToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyInterface.h</includes>
    <includes id="MacToNetwControlInfo_8h" name="MacToNetwControlInfo.h" local="yes" imported="no">veins/base/utils/MacToNetwControlInfo.h</includes>
    <includes id="NetwToMacControlInfo_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">veins/base/utils/NetwToMacControlInfo.h</includes>
    <includes id="MacToPhyControlInfo_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyControlInfo.h</includes>
    <includes id="AddressingInterface_8h" name="AddressingInterface.h" local="yes" imported="no">veins/base/modules/AddressingInterface.h</includes>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="MacPkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">veins/base/messages/MacPkt_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>BaseMacLayer_8cc.html</anchorfile>
      <anchor>a248c3a8421f876d37fe7256ac9dcf05b</anchor>
      <arglist>(BaseMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseMacLayer_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BaseLayer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <includes id="MappingBase_8h" name="MappingBase.h" local="yes" imported="no">veins/base/phyLayer/MappingBase.h</includes>
    <class kind="class">BaseMacLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseMobility_8cc</filename>
    <includes id="BaseMobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="BorderMsg__m_8h" name="BorderMsg_m.h" local="yes" imported="no">veins/base/messages/BorderMsg_m.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>BaseMobility_8cc.html</anchorfile>
      <anchor>a1bc235751df246807bf46bb477c2143f</anchor>
      <arglist>(BaseMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseMobility_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="Move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <class kind="class">BaseMobility</class>
  </compound>
  <compound kind="file">
    <name>BaseModule.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseModule_8cc</filename>
    <includes id="BaseModule_8h" name="BaseModule.h" local="yes" imported="no">veins/base/modules/BaseModule.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseModule.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseModule_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="HostState_8h" name="HostState.h" local="yes" imported="no">veins/base/utils/HostState.h</includes>
    <class kind="class">BaseModule</class>
    <member kind="define">
      <type>#define</type>
      <name>debugEV_clear</name>
      <anchorfile>BaseModule_8h.html</anchorfile>
      <anchor>a796951f07c5764fcd52e9abd0b5deb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>BaseModule_8h.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>coreEV_clear</name>
      <anchorfile>BaseModule_8h.html</anchorfile>
      <anchor>adba225dfeaaba955392001ec4f3401a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>BaseModule_8h.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>BasePhyLayer_8cc</filename>
    <includes id="BasePhyLayer_8h" name="BasePhyLayer.h" local="yes" imported="no">veins/base/phyLayer/BasePhyLayer.h</includes>
    <includes id="MacToPhyControlInfo_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyControlInfo.h</includes>
    <includes id="PhyToMacControlInfo_8h" name="PhyToMacControlInfo.h" local="yes" imported="no">veins/base/phyLayer/PhyToMacControlInfo.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="Decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>BasePhyLayer_8cc.html</anchorfile>
      <anchor>a4532f68b81888efac03a569bc88db971</anchor>
      <arglist>(BasePhyLayer)</arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>NoMobiltyPos</name>
      <anchorfile>BasePhyLayer_8cc.html</anchorfile>
      <anchor>a3b33055234260612784d5d3792a1d7da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>BasePhyLayer_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="DeciderToPhyInterface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/DeciderToPhyInterface.h</includes>
    <includes id="MacToPhyInterface_8h" name="MacToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyInterface.h</includes>
    <includes id="ChannelInfo_8h" name="ChannelInfo.h" local="yes" imported="no">veins/base/phyLayer/ChannelInfo.h</includes>
    <class kind="class">BasePhyLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseWaveApplLayer.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/ieee80211p/</path>
    <filename>BaseWaveApplLayer_8cc</filename>
    <includes id="BaseWaveApplLayer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/BaseWaveApplLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseWaveApplLayer.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/ieee80211p/</path>
    <filename>BaseWaveApplLayer_8h</filename>
    <includes id="BaseApplLayer_8h" name="BaseApplLayer.h" local="yes" imported="no">veins/base/modules/BaseApplLayer.h</includes>
    <includes id="Consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="WaveShortMessage__m_8h" name="WaveShortMessage_m.h" local="yes" imported="no">veins/modules/messages/WaveShortMessage_m.h</includes>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="WaveAppToMac1609__4Interface_8h" name="WaveAppToMac1609_4Interface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/WaveAppToMac1609_4Interface.h</includes>
    <class kind="class">BaseWaveApplLayer</class>
    <member kind="define">
      <type>#define</type>
      <name>DBG</name>
      <anchorfile>BaseWaveApplLayer_8h.html</anchorfile>
      <anchor>a49606be7356624568932ec81c0d429f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseWorldUtility_8cc</filename>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>BaseWorldUtility_8cc.html</anchorfile>
      <anchor>a040c09d94eb71afa68e5d70312454ec3</anchor>
      <arglist>(BaseWorldUtility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BaseWorldUtility_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">BaseWorldUtility</class>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BatteryAccess_8cc</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>BatteryAccess_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BaseModule_8h" name="BaseModule.h" local="yes" imported="no">veins/base/modules/BaseModule.h</includes>
    <includes id="BaseBattery_8h" name="BaseBattery.h" local="yes" imported="no">veins/base/modules/BaseBattery.h</includes>
    <class kind="class">Veins::BatteryAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIConstants.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>bitcarTraCIConstants_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>bitcarTraCI_VERSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a40b1c6a27e5a770166b337ce704c7f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8e73707083e5a68828275698eadeab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>affa501f61facb91d6c42b6ed4b184dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_STOP</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a46dc7ae84992bfe62cc00731959a67f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_RESUME</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad94c1b5ed2f3487c7245445a27fb5912</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adf76abeac554994696e6af2df832caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a628edc613cc0dc75723a440d4f59cf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adeeddcd0f58304495e3e30c5285be51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLOSE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0908ae0ea53f32f9e7bbb814b4ebc9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a77a3a68c3e4b2d0f90374fa62b6d6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa5f062ce635f44c083d53d8df2e7fc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8a127fe9592a7f233ed5bfdea70dff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a05246bdec45af16aac5056a45bbfbffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1c08dbf9ecec171fd5a8abdcf4bc1732</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4a59e3000bf1dd5f9c66d541021461d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a83722ee715c13e3c54e67c8685c53677</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4ca1d39ce2764e5576da3c5bb8c31eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1bfe2cee9c84b8e204c443c164a16eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a38464f30e521653b27d884cb0f8e952b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac408b68214392c4024825c8122c2ec67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a25b3cd5b082eee76400c9e81f0b4ab93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abf2a54d0263928c7c67b1399205f62d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a995228e235671467f43c6f230f5a310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae7720408c339a65bb1d7920776e7f4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9d9eaf59816e52a9b1382cd2f0e445fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aab7627756e25685ef8398633ca620bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>afc74049e4ac8c8a65d6b25c0c363cadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad2fa5b748b1580f354b631507e6e9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0dd8b3825acb93e57835a9c6a59a0f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a23a5713b2efa147f104b003c10d07ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab9a720c867f40272e532baba3fe1d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a45d28d5e51861aadcb6628654e5eb216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a89bdee3b9abb917a60549fd59fbb0030</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4b0ea4b02e65aedf9e65adf86933cc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a46b32b8e87e293aced2c6242363abafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>af88f093b11ea60a099215445b748b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae82c59889f44f40b0df6f1c41e00cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a16b6670eaa5a5845527c1ea9c4ef6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adf59516cf5e0e33c6456e79e41c066cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>afef1c73324fcdc35456aac81a7148543</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a3a44889166592e82aecf99a5c9b9107d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac20682f65f1f56d1406969e4840386ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a7e3288033a093977343bc000cfa0dbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8327578e1d375be0cda35067c23d0542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8efb67d70d2b7c6b86d9d99a40806e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4daee312282fa61ce2b2c9e19dc71fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6ea1568c34b29442244baf42f2bdc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a17305b49c61a77532505151ce2d399b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aaa289d08e25ed1871788a796ea91119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae081962daaad7c840b403c78a17a5417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae6a517ede4227e23146523b5390e07a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a611f3b8bd0715603a95b357dfbf8d078</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab5485e8ea7e4ac013adc23328137a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad0ac305c18e80d93f39441a8db700d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a3fa3a62d0be585a1254411199257e5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9ae14a25ff457995de0d6578d034f44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8c230b85db253650ca48a0f52daf4dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4b9ab406e73542e88dfcf44d3d736a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0fd8a024f568bf8b48ea3f64654de5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>af919cb89a8a561aff0896e66b5b5319a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a430ba00f89274e46a4c30b2cb99df0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a76e46577d69ef80748268f4ac965addd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>af4c74ade0bf736fb05e375efc4c27324</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4f792965065f4fa7c1515fcf9998b7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a725c1c8d88140ccd66d2c78a72ab7c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a12e00b53d862c78782a35163d658ad24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab75171b37a51f872525267e699d527cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a30482aa996155d083ce2ca8415ed70f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad135c2bd596c0d8e6a7b1f2c3e9aff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1cfd9140dd98070257cf737420411c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a739adbf1b8ffc6ed775431573f2fdb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a404ce6a209165786b246406df4aead28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a726077fc812b6f19601ee2cd8181e889</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9a5b7a862e0e503918cdc066f3458e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abebcb9821a2d54a8cdcb094e4ca58b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5c814e302a1e1c3fd43fa2f7e285a014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a47351c017e8d6b1696debc71cfc1a52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a417533e3ca34f46cd8b1c43c9e9af26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a19fb63fc78fed848a258aa23b138ff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5f6f40f44660f99fe2f4a10f64464be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1b11dc53cd2d9cc703d64531b75446eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4a3b3f72cbb0e56c0497ec5cd41e9230</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a35d453923055d4c62f6f786b5785511c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5795554151e18de86f5abf94cbec4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae615615a34e54cf69171803bfcdf91f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa893eb800437ce3ecf5fe24ca693a953</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac50a1184def0490f99882a2b24102500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a28a6f61ca698fbf35fa06f94366e5ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abd59649fa90019dd8b4171469b43e340</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a61ace178f023e87e8fab4a2cff1d70c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8008229a0fe2d03c3e4dd58e80e46ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aae8689698f0f9440895902bd79a4acc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a59701651aaf3a84c12530259646846de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a157bc725d90b04ca8844224cc02c4cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac3fa214c68b4f9c6d72b87857d528b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa6ecd09a7f6cc9872956f06a84ab3caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad345b2290b629c7df963593c191f9a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>afc254ddb55bf9b49350f7b47ba6f9537</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0a10dec2c5213528772d967138b25984</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6f83cac4993ab850b3bf4ee317e185c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab8aa0b8c58b89bd0dcb5449e92c82b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a54a1de506a4c7ca2344bb204cd19af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab86891c2e946e90b4360ecad860825a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4e9c9edafbf4e14d85142723bbcda7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa04d99fb7799fc05097ce8b55f6794e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_2D</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9fc3eb37a8ae494084b863c411cf8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6a1ab0cb7f3aea6a181bc47f7939f284</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_3D</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a2e4e2d4459c881109b0b40d723d5ba8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a82812c142e13bbb144d26ac69b291cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad6279a78dbab9ba005c6c1ff819fb2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a63081ba85a6af222803d714237576999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a3d7c110d8026c92c2fee435f7cd12193</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BYTE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad62574650f26d2392ab55729769948b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a929147425bf7969fe1d0e33716d02bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_FLOAT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a105c7addfad52601f4d079673eae7982</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac87fa650bc0dcd101b39e15ecdb57477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_TLPHASELIST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aba8744658fadd99da72fd9117b464ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5561b6050ea28ec6d322e28848460c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5af12da4378875209e0b79bbe6b70e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COLOR</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4a2941e13cc0bd28c847984e7f573850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_OK</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a541fc8755958a227fe412e2df7fa31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a31333391a4e82822d2c43e3928b6262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_ERR</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a43465ba21de31f9ae2573e7ac5f24919</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abd665a03a6204505716245362eeca1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5722d9b8df900cf44a69151b6f4b1e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_RED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae475cd0b9d5ae96a145230c0ac287154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_YELLOW</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a65d19b964abffa9b90c39cf21fcc0fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_GREEN</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a89c162b91c4124ebfe80f5bfa37621f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_BLINKING</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adf4fad950649759339ab18b4978a57bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_NOSIGNAL</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>acf44e21bfd6f2edbb22d04efda707da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a88b616d763ed7052b2341f6d08040135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0876dbae8eb3fb92b20b2568d71eaf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a7e483da406ff89a7b9fbe9dcb4ecfa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0cfd27f8f6dad63eb821dea08fc25c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a93901a271a595e7d3eb9ab540aa8d9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ace5ff9b0a74f5328e9dbcf71d79d25a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a7b8fcc7038295f3a18a5200af1b46633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_LIST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a28687ff0fca27086bca2dfb0c0aa8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_COUNT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a10ef5e45606c2977dd1eaf386f5d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a121b9861ef8ff7a65dbf05955903bd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>af7cffef1a0ad07af0cb2bc1f647f7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5cc4b739aa511a8bcdb3ea23e5f488fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1bffbc3260dd641611f50a5b675c6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a7c60786af53b7e18ae6114577656e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a028a459ac58e7412d86407a6a647f544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac7bc8c0d2db79321580ed8391829e23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>afb37eb3a0763757e55635de36a0952bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abde51e92597a7d674fe9a90c1d6c6054</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9989b962ced0c0a5d568c5812effe104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a74683d948c8a7dfc72157023021232f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8f84a9cfe1563281fc6c91b72f14a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8023e019a18d24881b8780aef047b455</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>add58d847358637741402c2979fc014ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PROGRAM</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>af39eae82404a11130f08d21c9d8a84f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aac7f12ef78085882c4fd0a2b5dd0d359</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a2e60c8a6b44d8d40ad51c65ab95b3e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a7eb603191d4446e7cf87c2356be3448e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aaf461fd64ac182b47c025f6f78af23e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9224116e351cb230398e837841fac367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>addac5c47b0c3f52a08255d079dfb6c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abae7b714231e81de94e1024f9f41a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a34b22bed0e5c0ba971a86ab8c56838fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>acee0a296326d46d40c9b97667dc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a20c9ad5e2c2ee1049282fca2605d3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aeb0a208a3c967515421f6659575da87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINKS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac39a0a0f89c208808ee921c9dbe8da8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6c5b0c0bc04b2036a971ca4bd7f5007f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5079457f2d9cc6be8da3834ae4a06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a803f3a1743aef11a357e838e50d80f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1f8d8754eb24cd09fb3107a3f71bf76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_POSITION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a40ee44d232bc7661ec5a37bacd60702e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ANGLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aef6ef58b8c84169ca96fc70f9c5cee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LENGTH</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a60e947bd75233810d5417b41f27e68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COLOR</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adcc89457ed75668afd992c756fc58549</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ACCEL</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aafdce9f42320b3e72c814cceaab9809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DECEL</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4f883334365d5c2e0f18944be814441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TAU</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8d32ba4c4cc7e453e9b63426d84eb084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5cdedbf9fd0353a0a7c60982b4bd1494</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a46a1e04d43660551e055d44f2d0ca41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0f50ad2a0f01241405381b9e895ab2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MINGAP</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aea443b43de4353bbaab7f34d303afe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WIDTH</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adb08f65a6543f976dbfe6ee7db5d08a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8bcea46eaacfa0cb3896a2ca066ce237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TYPE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae136061e5a4bf896d9cfb27868baf9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a006ca3246206d575bc949da18c7d075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>afb32e44c504d7f1bd7f7ba1fb3a56a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a19d2b339169244a09db78bb764fadd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a48cbe1bf5748e27183054ed2ddcfa3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGES</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ada001729364b89aa926730f631d6e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FILL</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>add08c9a33fb813e51fccabb3475a4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4493c1eaff38410b9afd3b5ec86e760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab193f946f651c97e299dfc4285133516</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa03c145ea3d6ed1039ee650ad0599452</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a82afe862545ade0192be2788e5b29f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8c5b07ef23ea6dc11209203b3ac7759d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a7378a076f1ed4fb133d04d474ec36110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad18db3a6f2be838f3ea6d75bb1784b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac98dc6e9bc82ae734fa638762f81eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac73c5a63a7ba70a57e9f2162277799db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aaa434a0096961983f3ca1fddbeb73b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_WITHOUT_bitcarTraCI</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1fa7988163ecfd02e86c44e48526c8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a547dc5b69db59f7d5919f1e295469049</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5c4f611616810959183c7b4e1d6e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a2bc86d4cb640d38c9141eff52fdeddc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ae3c19c3616e283cc23c02b38fa6b106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>adf0c5e5040db7935734b8b883973e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa744a28d72caf1c96e355a61b341d9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COEMISSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a55f8fd37376dc3adc19fc6e2ceaf53ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_HCEMISSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aaa0aad5c649d543d8de81bdb22d06664</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PMXEMISSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a37217bdbf8be36dc1bd44ecd62a807a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOXEMISSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a89457fa8c4ae6bd5adf6cc97860d08bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FUELCONSUMPTION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>acdec282d3916d2d2ec373cd6f5f5e977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOISEEMISSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a54cb80eb2dc3f07710f64ca77f9b732d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac2d739153c2b7614503bdd7053a96027</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6975b2bc0430600de2e96f1b7dcb5e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa57f4cf03d1b32e487371987f3f0cc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad32f4444706efc2c595e978f7898563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad9d66d42efa6d47d084d4dd8ed52b7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abb332ca9704ebaa6b5f779af5ab8412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a578826c7c51ee3143b8b6f6c63854512</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ad329e5b7d4a42b7e34acf7cb89b34de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a0ff9aec6a237456a854c35841a01e1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aba383d3234c4f0b62a0ece79b98ec457</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ada0133b150f6beef3b9c15d65892dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa15656ecb567d69ab1a26a6b77f48e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4d7f1f70a9b831317c8516c7c49395b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a53906c58d5f7c9d0474b2327dc6758c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1feee452ab9f9778c68cf55e8cb70b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a217ca72b88d743238b7bc3bacbe7da1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abf31d852e42db03d1a3fd426d9d3b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aa8562695a38b797bf6c77156cc53be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>aca15cc76f5f1f2150602ae0221ea9efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a30267d895605937cc904a8471aa2b098</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a89cb2ef6aa378ea1b5c71ede68f3af5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a1051bd1ae917fc0cc2639f48462c0a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a97fe5470fb1ac167c713671655ff3e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ab9959e75e26bc66b3733ddc04de6b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a8ef564809ccabdee78bdc9656a660a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a92f25b953319f56d635ea4fe599d65c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a39e184bf382ac65aaaf2ea344ed909a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a9cf2d3b5926694eca9a290606153dbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a27d763793c3a43050ece9e76caa0f697</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a817e029aaf52b9bd33c3115af6384e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a6223fc3eef58008e64e425ddf4136ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>ac7a52c618e295256a64a55c94bd754a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a48b64030823e73abcea5f383a07a6b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a3de049e7d6d515e3250a8af1bcd04565</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a4ae01bdb5b0bcb9237faecf1930af5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>bitcarTraCIConstants_8h.html</anchorfile>
      <anchor>a5762708bbdd17c389bfffb5a19143b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIDemo.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>bitcarTraCIDemo_8cc</filename>
    <includes id="bitcarTraCIDemo_8h" name="bitcarTraCIDemo.h" local="yes" imported="no">applications/traci/bitcarTraCIDemo.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>bitcarTraCIDemo_8cc.html</anchorfile>
      <anchor>a86c04555f2db1c5aaa5ab618ba5a75a8</anchor>
      <arglist>(bitcarTraCIDemo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIDemo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>bitcarTraCIDemo_8h</filename>
    <includes id="bitcarTraCIMobility_8h" name="bitcarTraCIMobility.h" local="yes" imported="no">mobility/single/bitcarTraCIMobility.h</includes>
    <class kind="class">bitcarTraCIDemo</class>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>bitcarTraCIMobility_8cc</filename>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="bitcarTraCIMobility_8h" name="bitcarTraCIMobility.h" local="yes" imported="no">mobility/single/bitcarTraCIMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>bitcarTraCIMobility_8cc.html</anchorfile>
      <anchor>a4a9edac10985aa1f21ca9aa4c571a95a</anchor>
      <arglist>(bitcarTraCIMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>bitcarTraCIMobility_8h</filename>
    <includes id="VANETMobilityBase_8h" name="VANETMobilityBase.h" local="yes" imported="no">VANETMobilityBase.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="bitcarTraCIScenarioManager_8h" name="bitcarTraCIScenarioManager.h" local="yes" imported="no">world/traci/bitcarTraCIScenarioManager.h</includes>
    <class kind="class">bitcarTraCIMobility</class>
    <class kind="class">bitcarTraCIMobility::Statistics</class>
    <class kind="class">bitcarTraCIMobilityAccess</class>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIScenarioManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>bitcarTraCIScenarioManager_8cc</filename>
    <includes id="bitcarTraCIScenarioManager_8h" name="bitcarTraCIScenarioManager.h" local="yes" imported="no">world/traci/bitcarTraCIScenarioManager.h</includes>
    <includes id="bitcarTraCIConstants_8h" name="bitcarTraCIConstants.h" local="yes" imported="no">world/traci/bitcarTraCIConstants.h</includes>
    <includes id="bitcarTraCIMobility_8h" name="bitcarTraCIMobility.h" local="yes" imported="no">mobility/single/bitcarTraCIMobility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>bitcarTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYSOCKET</name>
      <anchorfile>bitcarTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a5a08180b61c99cfe56e425578f50ea99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>bitcarTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>bitcarTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a66bcb6cf4e7bc467d090a46dfeb946eb</anchor>
      <arglist>(bitcarTraCIScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIScenarioManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>bitcarTraCIScenarioManager_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="vanetTraCIColor_8h" name="vanetTraCIColor.h" local="yes" imported="no">vanetTraCIColor.h</includes>
    <class kind="class">bitcarTraCIScenarioManager</class>
    <class kind="struct">bitcarTraCIScenarioManager::bitcarTraCICoord</class>
    <class kind="class">bitcarTraCIScenarioManager::bitcarTraCIBuffer</class>
    <class kind="class">bitcarTraCIScenarioManagerAccess</class>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIScenarioManagerLaunchd.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>bitcarTraCIScenarioManagerLaunchd_8cc</filename>
    <includes id="bitcarTraCIScenarioManagerLaunchd_8h" name="bitcarTraCIScenarioManagerLaunchd.h" local="yes" imported="no">world/traci/bitcarTraCIScenarioManagerLaunchd.h</includes>
    <includes id="bitcarTraCIConstants_8h" name="bitcarTraCIConstants.h" local="yes" imported="no">world/traci/bitcarTraCIConstants.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>bitcarTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>acd42c64604c9797d6697cdbd75377eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>bitcarTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>bitcarTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>aac484a508c787df4aeb3a374e6b03bba</anchor>
      <arglist>(bitcarTraCIScenarioManagerLaunchd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitcarTraCIScenarioManagerLaunchd.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>bitcarTraCIScenarioManagerLaunchd_8h</filename>
    <includes id="bitcarTraCIScenarioManager_8h" name="bitcarTraCIScenarioManager.h" local="yes" imported="no">world/traci/bitcarTraCIScenarioManager.h</includes>
    <class kind="class">bitcarTraCIScenarioManagerLaunchd</class>
    <class kind="class">bitcarTraCIScenarioManagerLaunchdAccess</class>
  </compound>
  <compound kind="file">
    <name>bitcarTraCITestApp.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>bitcarTraCITestApp_8cc</filename>
    <includes id="bitcarTraCITestApp_8h" name="bitcarTraCITestApp.h" local="yes" imported="no">applications/traci/bitcarTraCITestApp.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>bitcarTraCITestApp_8cc.html</anchorfile>
      <anchor>a68c70a47d52a8936e073494c16ac0191</anchor>
      <arglist>(bitcarTraCITestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitcarTraCITestApp.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>bitcarTraCITestApp_8h</filename>
    <includes id="bitcarTraCIMobility_8h" name="bitcarTraCIMobility.h" local="yes" imported="no">mobility/single/bitcarTraCIMobility.h</includes>
    <class kind="class">bitcarTraCITestApp</class>
  </compound>
  <compound kind="file">
    <name>BorderMsg_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/messages/</path>
    <filename>BorderMsg__m_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">BorderMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>BorderMsg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>BorderMsg__m_8h.html</anchorfile>
      <anchor>a22d334b7616278a3df52bb1d909385b8</anchor>
      <arglist>(cCommBuffer *b, BorderMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>BorderMsg__m_8h.html</anchorfile>
      <anchor>af8a744ea926c5d85163001062af00b8f</anchor>
      <arglist>(cCommBuffer *b, BorderMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BreakpointPathlossModel.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>BreakpointPathlossModel_8cc</filename>
    <includes id="BreakpointPathlossModel_8h" name="BreakpointPathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/BreakpointPathlossModel.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>BreakpointPathlossModel_8cc.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BreakpointPathlossModel.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>BreakpointPathlossModel_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">BreakpointPathlossModel</class>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>ChannelAccess_8cc</filename>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>ChannelAccess_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="BaseMobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <class kind="class">Veins::ChannelAccess</class>
    <namespace>Veins</namespace>
    <member kind="typedef">
      <type>AccessModuleWrap&lt; BaseMobility &gt;</type>
      <name>ChannelMobilityAccessType</name>
      <anchorfile>ChannelAccess_8h.html</anchorfile>
      <anchor>ad43d252a035fb04d7edeae30f510a8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelMobilityAccessType::wrapType *</type>
      <name>ChannelMobilityPtrType</name>
      <anchorfile>ChannelAccess_8h.html</anchorfile>
      <anchor>a9706b5abb35f3e8d5583c9eba6f286e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>ChannelInfo_8cc</filename>
    <includes id="ChannelInfo_8h" name="ChannelInfo.h" local="yes" imported="no">veins/base/phyLayer/ChannelInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>ChannelInfo_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <class kind="class">ChannelInfo</class>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">ChannelInfo::IntersectionIterator</class>
  </compound>
  <compound kind="file">
    <name>ChannelSenseRequest_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/messages/</path>
    <filename>ChannelSenseRequest__m_8h</filename>
    <includes id="ChannelState_8h" name="ChannelState.h" local="yes" imported="no">veins/base/phyLayer/ChannelState.h</includes>
    <class kind="class">ChannelSenseRequest</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SenseMode</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_IDLE</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5fa104e205ceb06dd05f20252442da97f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_BUSY</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5fa483617bed0c86dfe6c89bace979c6774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_TIMEOUT</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5faf06f2d91002adf222ab423eec3e45a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>a2000434ac71682a384856e8f28c660b6</anchor>
      <arglist>(cCommBuffer *b, ChannelSenseRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChannelSenseRequest__m_8h.html</anchorfile>
      <anchor>af79196c44695c51ecb2ee8e8a3b8dc6e</anchor>
      <arglist>(cCommBuffer *b, ChannelSenseRequest &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelState.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>ChannelState_8cc</filename>
    <includes id="ChannelState_8h" name="ChannelState.h" local="yes" imported="no">veins/base/phyLayer/ChannelState.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelState.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>ChannelState_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <class kind="class">ChannelState</class>
  </compound>
  <compound kind="file">
    <name>compatibility_vanet.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>compatibility__vanet_8h</filename>
    <includes id="VanetAddress_8h" name="VanetAddress.h" local="yes" imported="no">VanetAddress.h</includes>
    <class kind="struct">Vanet_In_addr</class>
    <class kind="struct">Vanet_Sockaddr</class>
    <member kind="define">
      <type>#define</type>
      <name>ETH_ALEN</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a9822d89774e0d6ddaa06503950130423</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXTTL</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>ab8974c8c20e3a7cfdf98dfcb9c184c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s_addr</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>ae1f156d87cafe306718671f508168391</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>in_addr</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a73e57c1190f8731fb8b0217f929c4e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sockaddr</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>af5850e749a61de4774245a6d599920b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>u_int8_t</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a56d7c2fd64ccd607e3d67262a0741ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>u_int16_t</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a5812174a8236d5da1d9add5a828a94bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>u_int32_t</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a0d5a2542b430beb8568bacccd2c657ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u_short</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>aa1a19deefc008737e6397f44d983cfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u_char</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>ae2b02ed168fc99cff3851603910b1fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>in_addr_t</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a98b38134a62f24554da0ffcabde8062c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>sa_family_t</name>
      <anchorfile>compatibility__vanet_8h.html</anchorfile>
      <anchor>a27a82860cef19f4a53f68516e7b2ee0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>ConnectionManager_8cc</filename>
    <includes id="ConnectionManager_8h" name="ConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/ConnectionManager.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ccEV</name>
      <anchorfile>ConnectionManager_8cc.html</anchorfile>
      <anchor>a4b2119ae4d85523b374e820916ee091b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ConnectionManager_8cc.html</anchorfile>
      <anchor>a7713f40391ce1dfc9b8330a6f4c13f90</anchor>
      <arglist>(ConnectionManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>ConnectionManager_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <class kind="class">ConnectionManager</class>
  </compound>
  <compound kind="file">
    <name>Consts80211p.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/utility/</path>
    <filename>Consts80211p_8h</filename>
    <namespace>Channels</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ChannelNumber</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CRIT_SOL</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcab12b043ef121a55f7798b8d88f3435ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH1</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca4cd9253ed42cb3f1acfcc858a800bec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH2</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca33e2709732ed8a9d5d26e0671d465dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CCH</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca5b15c7f06aa1608e57faa584bfed0974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH3</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcacde39da5e71b24a5f2930033049547ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH4</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca3f6fadf251397cd3ffe1b485d7f91cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HPPS</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca9719348cf725d818dfdd2f2bdbe849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>t_channel</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>adf9b7633e9be0abbe2a94e0e2b8de074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>type_CCH</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>adf9b7633e9be0abbe2a94e0e2b8de074a1b0214f354aaccb8651c8f6ff9d70a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>type_SCH</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>adf9b7633e9be0abbe2a94e0e2b8de074ae92afaf1085abce97f5950ea2d9f9514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>NUM_BITRATES_80211P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a5e887d732e81dc0981f99b0e2c030069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>BITRATES_80211P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>aa993194e2d4293a145d2b00c6569371f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>N_DBPS_80211P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a07569e16d5fd310d27f2831508dcc3f8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>T_SYM_80211P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a4f275fa377c7436a45af7b7740e81d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_TOTAL_LENGTH</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a75705ba4279984f5988a2d8212b65f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PREAMBLE_DURATION</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>ab06ac4fa34e971e108d21a82c513a970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PLCPSIGNAL_DURATION</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>ad1f3844c5afe572fc3184129aa4804ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_PLCPSIGNAL_LENGTH</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a01440d3776a55604719ceca39dfcc998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_PSDU_HEADER_LENGTH</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a2d3f83aac8c4e34f1120511c1338b20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>PHY_HDR_BITRATE</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a56b561211f1fcfdab87c70d01233b2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SLOTLENGTH_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a57411d164eea157170298f09ff1d38ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SIFS_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a5955b96e024a202edb9979d259545ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>RADIODELAY_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a0dde96ba4b7be427d0454328da52bdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMIN_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a6184b83da22de091e54fb8aaedefde7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMAX_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>ab6759d76a19c23aa6d45798752abbf72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SWITCHING_INTERVAL_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>ad3933c8b54b76e8b7f78f12668eb4883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>GUARD_INTERVAL_11P</name>
      <anchorfile>Consts80211p_8h.html</anchorfile>
      <anchor>a6dece903cd8ff198a8d8188c9a487bce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstsPhy.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/utility/</path>
    <filename>ConstsPhy_8h</filename>
    <member kind="enumeration">
      <type></type>
      <name>PHY_MCS</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_DEFAULT</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706abb208d7cf7db22185898951438688c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_BPSK_R_1_2</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706a5fb55ff7d9fec312a8ba1fceb644f5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_BPSK_R_3_4</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706afa6c55696fc03742eeed93694e8e4f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_QPSK_R_1_2</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706aaa2b7eff7fa29a905815a3fa125e7fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_QPSK_R_3_4</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706a5d379ce90e65c6431b484f0298815ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_QAM16_R_1_2</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706a07ea8904f2e8d75ffbc37392bb9f5e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_QAM16_R_3_4</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706a92105c9fcd1fc2a731444a959e44c3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_QAM64_R_2_3</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706adac718e7006431df918158ca83ea5658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MCS_OFDM_QAM64_R_3_4</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>addf24552a8d5fcdee4e55f5159598706a3fa4b230c6143d74d05fd66db343ef49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Bandwidth</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>a309e7287abbbc1b9b4c59da7a4b08caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BW_OFDM_5_MHZ</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>a309e7287abbbc1b9b4c59da7a4b08caaa8b38e98617bf0f7939b942c0d1e9129c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BW_OFDM_10_MHZ</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>a309e7287abbbc1b9b4c59da7a4b08caaa747004341f83730e0c132f3cc249804e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BW_OFDM_20_MHZ</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>a309e7287abbbc1b9b4c59da7a4b08caaa6089690ee75749c450f244cc992e2dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getOfdmDatarate</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>a878241df607e21ba511c4c75aaa10f46</anchor>
      <arglist>(enum PHY_MCS mcs, enum Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNDBPS</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>af8b23bdc646e596a8fdcfef1bd627bec</anchor>
      <arglist>(enum PHY_MCS mcs)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getBandwidth</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>ad7e8d16898a2924a3e9dafc7f2bb53b4</anchor>
      <arglist>(enum Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>enum PHY_MCS</type>
      <name>getMCS</name>
      <anchorfile>ConstsPhy_8h.html</anchorfile>
      <anchor>a481094cdfeec1bcd0e44a79583b2e538</anchor>
      <arglist>(uint64_t datarate, enum Bandwidth bw)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ControlVanetRouting_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>ControlVanetRouting__m_8h</filename>
    <includes id="VanetAddress_8h" name="VanetAddress.h" local="yes" imported="no">VanetAddress.h</includes>
    <class kind="class">ControlVanetRouting</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VanetControlType</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>aeca4fc7fd8dfe50a210f6227147871d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VANET_ROUTE_NO_OPTION</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>aeca4fc7fd8dfe50a210f6227147871d9a06287b218bb9dddfb679baa78342b039</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VANET_ROUTE_UPDATE</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>aeca4fc7fd8dfe50a210f6227147871d9adcf2f55aace00cc23e47c9c8e5e5f7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VANET_ROUTE_NOROUTE</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>aeca4fc7fd8dfe50a210f6227147871d9a398f3406bd8d26e4af41f1b2579f8f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>a035d13414ae765845cdd141492f62782</anchor>
      <arglist>(cCommBuffer *b, ControlVanetRouting &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ControlVanetRouting__m_8h.html</anchorfile>
      <anchor>ae1dd72c60ddb8f1dca2fe0330ffaa83a</anchor>
      <arglist>(cCommBuffer *b, ControlVanetRouting &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>Coord_8cc</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
  </compound>
  <compound kind="file">
    <name>Coord.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>Coord_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <class kind="class">Coord</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Coord_8h.html</anchorfile>
      <anchor>a8c1991dbbe58ef68597baf656b5d726e</anchor>
      <arglist>(std::ostream &amp;os, const Coord &amp;coord)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>Decider_8cc</filename>
    <includes id="Decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>Decider_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="DeciderToPhyInterface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/DeciderToPhyInterface.h</includes>
    <includes id="ChannelSenseRequest__m_8h" name="ChannelSenseRequest_m.h" local="yes" imported="no">veins/base/messages/ChannelSenseRequest_m.h</includes>
    <includes id="ChannelState_8h" name="ChannelState.h" local="yes" imported="no">veins/base/phyLayer/ChannelState.h</includes>
    <class kind="class">DeciderResult</class>
    <class kind="class">Decider</class>
  </compound>
  <compound kind="file">
    <name>Decider80211p.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>Decider80211p_8cc</filename>
    <includes id="Decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">veins/modules/phy/Decider80211p.h</includes>
    <includes id="DeciderResult80211_8h" name="DeciderResult80211.h" local="yes" imported="no">veins/modules/phy/DeciderResult80211.h</includes>
    <includes id="Mac80211Pkt__m_8h" name="Mac80211Pkt_m.h" local="yes" imported="no">veins/modules/messages/Mac80211Pkt_m.h</includes>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
    <includes id="AirFrame11p__m_8h" name="AirFrame11p_m.h" local="yes" imported="no">veins/modules/messages/AirFrame11p_m.h</includes>
    <includes id="NistErrorRate_8h" name="NistErrorRate.h" local="yes" imported="no">veins/modules/phy/NistErrorRate.h</includes>
    <includes id="ConstsPhy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider80211p.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>Decider80211p_8h</filename>
    <includes id="BaseDecider_8h" name="BaseDecider.h" local="yes" imported="no">veins/base/phyLayer/BaseDecider.h</includes>
    <includes id="Consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="Mac80211pToPhy11pInterface_8h" name="Mac80211pToPhy11pInterface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h</includes>
    <includes id="Decider80211pToPhy80211pInterface_8h" name="Decider80211pToPhy80211pInterface.h" local="yes" imported="no">veins/modules/phy/Decider80211pToPhy80211pInterface.h</includes>
    <class kind="class">Decider80211p</class>
    <member kind="define">
      <type>#define</type>
      <name>DBG_D11P</name>
      <anchorfile>Decider80211p_8h.html</anchorfile>
      <anchor>a5b7f92e5571f898a742f73f8aa6dbf13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider80211pToPhy80211pInterface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>Decider80211pToPhy80211pInterface_8h</filename>
    <class kind="class">Decider80211pToPhy80211pInterface</class>
  </compound>
  <compound kind="file">
    <name>DeciderResult80211.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>DeciderResult80211_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <class kind="class">DeciderResult80211</class>
  </compound>
  <compound kind="file">
    <name>DeciderToPhyInterface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>DeciderToPhyInterface_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <class kind="class">DeciderToPhyInterface</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>FindModule.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>FindModule_8h</filename>
    <class kind="class">FindModule</class>
    <class kind="class">AccessModuleWrap</class>
  </compound>
  <compound kind="file">
    <name>FWMath.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>FWMath_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <class kind="class">FWMath</class>
    <member kind="define">
      <type>#define</type>
      <name>M_E</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a9bf5d952c5c93c70f9e66c9794d406c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LOG2E</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>ac5c747ee5bcbe892875672a0b9d8171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LOG10E</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a9ed2b5582226f3896424ff6d2a3ebb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LN2</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a92428112a5d24721208748774a4f23e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LN10</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a0a53871497a155afe91424c28a8ec3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI_2</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a958e4508ed28ee5cc04249144312c15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI_4</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>aeb24420b096a677f3a2dc5a72b36bf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_1_PI</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a08dfac3cca9601a02fc88356cc078e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_2_PI</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a97f6d6514d3d3dd50c3a2a6d622673db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_2_SQRTPI</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a631ff334c4a1a6db2e8a7ff4acbe48a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT2</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a66b3ab30f1332874326ed93969e496e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT1_2</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>acdbb2c2f9429f08916f03c8786d2d2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPSILON</name>
      <anchorfile>FWMath_8h.html</anchorfile>
      <anchor>a002b2f4894492820fe708b1b7e7c5e70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalWirelessLinkInspector_Vanet.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/util/</path>
    <filename>GlobalWirelessLinkInspector__Vanet_8cc</filename>
    <includes id="GlobalWirelessLinkInspector__Vanet_8h" name="GlobalWirelessLinkInspector_Vanet.h" local="yes" imported="no">GlobalWirelessLinkInspector_Vanet.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalWirelessLinkInspector__Vanet_8cc.html</anchorfile>
      <anchor>a39e8e525c0dc1f9d91f959d9249942e6</anchor>
      <arglist>(GlobalWirelessLinkInspector_Vanet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalWirelessLinkInspector_Vanet.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/util/</path>
    <filename>GlobalWirelessLinkInspector__Vanet_8h</filename>
    <includes id="VanetAddress_8h" name="VanetAddress.h" local="yes" imported="no">VanetAddress.h</includes>
    <class kind="class">GlobalWirelessLinkInspector_Vanet</class>
    <class kind="class">GlobalWirelessLinkInspector_Vanet::Link</class>
    <class kind="class">GlobalWirelessLinkInspector_Vanet::ProtocolRoutingData</class>
  </compound>
  <compound kind="file">
    <name>HostState.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>HostState_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <class kind="class">HostState</class>
  </compound>
  <compound kind="file">
    <name>Interpolation.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>Interpolation_8h</filename>
    <class kind="class">Interpolated</class>
    <class kind="class">PairLess</class>
    <class kind="class">InterpolatorBase</class>
    <class kind="class">NextSmaller</class>
    <class kind="class">Nearest</class>
    <class kind="class">Linear</class>
    <class kind="class">ConstInterpolateableIterator</class>
    <class kind="class">InterpolateableIterator</class>
    <class kind="class">InterpolateableMap</class>
    <member kind="function">
      <type>TTo</type>
      <name>cast_it</name>
      <anchorfile>Interpolation_8h.html</anchorfile>
      <anchor>aacba495129ae31f1f99257d9684e15d6</anchor>
      <arglist>(TFrom rValToCast)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cast_it</name>
      <anchorfile>Interpolation_8h.html</anchorfile>
      <anchor>aeee3c36671ca4ce2a8758dc6b965f4f1</anchor>
      <arglist>(T rValToCast)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cast_it</name>
      <anchorfile>Interpolation_8h.html</anchorfile>
      <anchor>aea316e2fa002f18bdba41db169b7b11b</anchor>
      <arglist>(simtime_t rValToCast)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IVANETMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/contract/</path>
    <filename>IVANETMobility_8cc</filename>
    <includes id="IVANETMobility_8h" name="IVANETMobility.h" local="yes" imported="no">IVANETMobility.h</includes>
  </compound>
  <compound kind="file">
    <name>IVANETMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/contract/</path>
    <filename>IVANETMobility_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">IVANETMobility</class>
  </compound>
  <compound kind="file">
    <name>JakesFading.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>JakesFading_8cc</filename>
    <includes id="JakesFading_8h" name="JakesFading.h" local="yes" imported="no">veins/modules/analogueModel/JakesFading.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>JakesFading.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>JakesFading_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">JakesFading</class>
  </compound>
  <compound kind="file">
    <name>LinearVANETMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>LinearVANETMobility_8cc</filename>
    <includes id="LinearVANETMobility_8h" name="LinearVANETMobility.h" local="yes" imported="no">LinearVANETMobility.h</includes>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>LinearVANETMobility_8cc.html</anchorfile>
      <anchor>aff5cea0f493a77de6ab1083765b6340f</anchor>
      <arglist>(LinearVANETMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearVANETMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>LinearVANETMobility_8h</filename>
    <includes id="MovingVANETMobilityBase_8h" name="MovingVANETMobilityBase.h" local="yes" imported="no">MovingVANETMobilityBase.h</includes>
    <class kind="class">LinearVANETMobility</class>
  </compound>
  <compound kind="file">
    <name>LineSegmentsVANETMobilityBase.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>LineSegmentsVANETMobilityBase_8cc</filename>
    <includes id="LineSegmentsVANETMobilityBase_8h" name="LineSegmentsVANETMobilityBase.h" local="yes" imported="no">LineSegmentsVANETMobilityBase.h</includes>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
  </compound>
  <compound kind="file">
    <name>LineSegmentsVANETMobilityBase.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>LineSegmentsVANETMobilityBase_8h</filename>
    <includes id="MovingVANETMobilityBase_8h" name="MovingVANETMobilityBase.h" local="yes" imported="no">MovingVANETMobilityBase.h</includes>
    <class kind="class">LineSegmentsVANETMobilityBase</class>
  </compound>
  <compound kind="file">
    <name>LogNormalShadowing.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>LogNormalShadowing_8cc</filename>
    <includes id="LogNormalShadowing_8h" name="LogNormalShadowing.h" local="yes" imported="no">veins/modules/analogueModel/LogNormalShadowing.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>LogNormalShadowing.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>LogNormalShadowing_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">LogNormalShadowing</class>
  </compound>
  <compound kind="file">
    <name>Mac1609_4.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mac/ieee80211p/</path>
    <filename>Mac1609__4_8cc</filename>
    <includes id="Mac1609__4_8h" name="Mac1609_4.h" local="yes" imported="no">veins/modules/mac/ieee80211p/Mac1609_4.h</includes>
    <includes id="DeciderResult80211_8h" name="DeciderResult80211.h" local="yes" imported="no">veins/modules/phy/DeciderResult80211.h</includes>
    <includes id="PhyToMacControlInfo_8h" name="PhyToMacControlInfo.h" local="yes" imported="no">veins/base/phyLayer/PhyToMacControlInfo.h</includes>
    <includes id="PhyControlMessage__m_8h" name="PhyControlMessage_m.h" local="yes" imported="no">veins/modules/messages/PhyControlMessage_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DBG_MAC</name>
      <anchorfile>Mac1609__4_8cc.html</anchorfile>
      <anchor>ace1894472dc5e8160edbe7db7adffc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Mac1609__4_8cc.html</anchorfile>
      <anchor>a0559bab8a6211b4285e66873b447df1b</anchor>
      <arglist>(Mac1609_4)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac1609_4.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mac/ieee80211p/</path>
    <filename>Mac1609__4_8h</filename>
    <includes id="BaseLayer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
    <includes id="MacToPhyControlInfo_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyControlInfo.h</includes>
    <includes id="PhyLayer80211p_8h" name="PhyLayer80211p.h" local="yes" imported="no">veins/modules/phy/PhyLayer80211p.h</includes>
    <includes id="WaveAppToMac1609__4Interface_8h" name="WaveAppToMac1609_4Interface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/WaveAppToMac1609_4Interface.h</includes>
    <includes id="Consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="Mac80211Pkt__m_8h" name="Mac80211Pkt_m.h" local="yes" imported="no">veins/modules/messages/Mac80211Pkt_m.h</includes>
    <includes id="WaveShortMessage__m_8h" name="WaveShortMessage_m.h" local="yes" imported="no">veins/modules/messages/WaveShortMessage_m.h</includes>
    <includes id="BaseMacLayer_8h" name="BaseMacLayer.h" local="yes" imported="no">veins/base/modules/BaseMacLayer.h</includes>
    <includes id="ConstsPhy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <class kind="class">Mac1609_4</class>
    <class kind="class">Mac1609_4::EDCA</class>
    <class kind="class">Mac1609_4::EDCA::EDCAQueue</class>
  </compound>
  <compound kind="file">
    <name>Mac80211Pkt_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/messages/</path>
    <filename>Mac80211Pkt__m_8h</filename>
    <includes id="MacPkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">veins/base/messages/MacPkt_m.h</includes>
    <class kind="class">Mac80211Pkt</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Mac80211Pkt__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Mac80211Pkt__m_8h.html</anchorfile>
      <anchor>a3636b139d0b4cc3ebd195a2f1f43a065</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Mac80211Pkt__m_8h.html</anchorfile>
      <anchor>afd4838fe235bac3190a45d54f5efd986</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211pToPhy11pInterface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mac/ieee80211p/</path>
    <filename>Mac80211pToPhy11pInterface_8h</filename>
    <includes id="MacToPhyInterface_8h" name="MacToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyInterface.h</includes>
    <class kind="class">Mac80211pToPhy11pInterface</class>
  </compound>
  <compound kind="file">
    <name>MacPkt_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/messages/</path>
    <filename>MacPkt__m_8h</filename>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">MacPkt</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>MacPkt__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>MacPkt__m_8h.html</anchorfile>
      <anchor>a6e80fe061f237f06d3061c1dff3636c7</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>MacPkt__m_8h.html</anchorfile>
      <anchor>a6956d0946b0b1b7f8a570be8edd08551</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MacToNetwControlInfo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>MacToNetwControlInfo_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">MacToNetwControlInfo</class>
  </compound>
  <compound kind="file">
    <name>MacToPhyControlInfo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>MacToPhyControlInfo_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
    <class kind="class">MacToPhyControlInfo</class>
  </compound>
  <compound kind="file">
    <name>MacToPhyInterface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>MacToPhyInterface_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
    <includes id="ChannelState_8h" name="ChannelState.h" local="yes" imported="no">veins/base/phyLayer/ChannelState.h</includes>
    <includes id="PhyUtils_8h" name="PhyUtils.h" local="yes" imported="no">veins/base/phyLayer/PhyUtils.h</includes>
    <class kind="class">MacToPhyInterface</class>
  </compound>
  <compound kind="file">
    <name>Mapping.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>Mapping_8h</filename>
    <includes id="MappingBase_8h" name="MappingBase.h" local="yes" imported="no">veins/base/phyLayer/MappingBase.h</includes>
    <includes id="MappingUtils_8h" name="MappingUtils.h" local="yes" imported="no">veins/base/phyLayer/MappingUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>MappingBase.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>MappingBase_8cc</filename>
    <includes id="MappingBase_8h" name="MappingBase.h" local="yes" imported="no">veins/base/phyLayer/MappingBase.h</includes>
  </compound>
  <compound kind="file">
    <name>MappingBase.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>MappingBase_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Interpolation_8h" name="Interpolation.h" local="yes" imported="no">veins/base/phyLayer/Interpolation.h</includes>
    <class kind="class">Dimension</class>
    <class kind="class">DimensionSet</class>
    <class kind="class">Argument</class>
    <class kind="class">Argument::key_iterator</class>
    <class kind="class">NoNextIteratorException</class>
    <class kind="class">ConstMappingIterator</class>
    <class kind="struct">mixim::math::mW2dBm</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, false &gt;</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, true &gt;</class>
    <class kind="class">ConstMapping</class>
    <class kind="class">MappingIterator</class>
    <class kind="class">Mapping</class>
    <class kind="class">SimpleConstMappingIterator</class>
    <class kind="class">SimpleConstMapping</class>
    <namespace>mixim</namespace>
    <namespace>mixim::math</namespace>
  </compound>
  <compound kind="file">
    <name>MappingUtils.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>MappingUtils_8cc</filename>
    <includes id="MappingUtils_8h" name="MappingUtils.h" local="yes" imported="no">veins/base/phyLayer/MappingUtils.h</includes>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator*</name>
      <anchorfile>MappingUtils_8cc.html</anchorfile>
      <anchor>ae96e8b4471b28153196ae43af2471878</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator/</name>
      <anchorfile>MappingUtils_8cc.html</anchorfile>
      <anchor>a16eb83f49b6fed502b242fd0174d54de</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator+</name>
      <anchorfile>MappingUtils_8cc.html</anchorfile>
      <anchor>a561d5cc659fda6240220623c149ea994</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator-</name>
      <anchorfile>MappingUtils_8cc.html</anchorfile>
      <anchor>a59113e9a1d0b73e0fbd033356d2359fb</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MappingUtils.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>MappingUtils_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="MappingBase_8h" name="MappingBase.h" local="yes" imported="no">veins/base/phyLayer/MappingBase.h</includes>
    <class kind="class">BaseFilteredIterator</class>
    <class kind="class">FilteredMappingIterator</class>
    <class kind="class">TimeMappingIterator</class>
    <class kind="class">TimeMapping</class>
    <class kind="class">LinearIntplMappingIterator</class>
    <class kind="class">LinearIntplMapping</class>
    <class kind="class">Interpolated&lt; Mapping * &gt;</class>
    <class kind="class">Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</class>
    <class kind="class">ConstantSimpleConstMapping</class>
    <class kind="class">ConstMappingIteratorWrapper</class>
    <class kind="class">ConstMappingWrapper</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">MultiDimMappingIterator</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">FilledUpMappingIterator</class>
    <class kind="class">FilledUpMapping</class>
    <class kind="class">MappingUtils</class>
    <class kind="class">ConcatConstMappingIterator</class>
    <class kind="class">ConcatConstMapping</class>
    <class kind="class">BaseDelayedIterator</class>
    <class kind="class">BaseDelayedMapping</class>
    <class kind="class">ConstDelayedMapping</class>
    <class kind="class">DelayedMapping</class>
    <member kind="typedef">
      <type>BaseFilteredIterator&lt; ConstMappingIterator &gt;</type>
      <name>FilteredConstMappingIterator</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>aa645dfa599e41183c494290d0abba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredConstMappingIterator, ConstMappingIterator &gt;</type>
      <name>ConstDelayedMappingIterator</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>a65c3da57807297c8c20a24d18e142051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredMappingIterator, MappingIterator &gt;</type>
      <name>DelayedMappingIterator</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>af6d7bb3c43fe0bda97133e548ce327c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator*</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>aed8e21a598d720afebf9ac5b21ef419f</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator/</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>a4dd8d69004180c73deb537f4f7fb85a0</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator+</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>a689351b9381f651d0d85666721171e99</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator-</name>
      <anchorfile>MappingUtils_8h.html</anchorfile>
      <anchor>a2db200226d07eef6670f7c4c3fb9e99b</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MiXiMDefs.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>MiXiMDefs_8h</filename>
    <includes id="miximkerneldefs_8h" name="miximkerneldefs.h" local="yes" imported="no">veins/base/utils/miximkerneldefs.h</includes>
    <class kind="class">simsignalwrap_t</class>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_API</name>
      <anchorfile>MiXiMDefs_8h.html</anchorfile>
      <anchor>aa9f7e3adba6f75276614400a8ebbedd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>miximkerneldefs.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>miximkerneldefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_VERSION</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a7ba1ea0c3476b05a9e1f8fe56cc3f958</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_PACKET_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>ad6bd863f498a055ad7936e8606f52456</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_UWBIRPACKET_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>aabad51446826904506303465155af970</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_DROPPEDPACKET_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>aad55d45b2982ce696ce5dc1692690627</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_PASSEDMSG_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>ae77f3d9270863d9320e03453f8b05724</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_HOSTSTATE_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a3ec3b1ea6bc9444723e83dd40ec0e3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_MOBILITY_CHANGE_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>ae69fff18982d6706f61a783d2c76e3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_BATTERY_CHANGE_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a96f94c37521741f38fd049c30ddf9817</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_MOBANMSG_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a7483fc5c00a5a73c605d34fc48202a47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Move.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>Move_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">Move</class>
  </compound>
  <compound kind="file">
    <name>MovingVANETMobilityBase.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>MovingVANETMobilityBase_8cc</filename>
    <includes id="MovingVANETMobilityBase_8h" name="MovingVANETMobilityBase.h" local="yes" imported="no">MovingVANETMobilityBase.h</includes>
  </compound>
  <compound kind="file">
    <name>MovingVANETMobilityBase.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>MovingVANETMobilityBase_8h</filename>
    <includes id="VANETMobilityBase_8h" name="VANETMobilityBase.h" local="yes" imported="no">VANETMobilityBase.h</includes>
    <class kind="class">MovingVANETMobilityBase</class>
  </compound>
  <compound kind="file">
    <name>NetwToMacControlInfo.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>NetwToMacControlInfo_8cc</filename>
    <includes id="NetwToMacControlInfo_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">veins/base/utils/NetwToMacControlInfo.h</includes>
    <member kind="typedef">
      <type>NetwToMacControlInfo</type>
      <name>tNetwToMacControlInfoBase</name>
      <anchorfile>NetwToMacControlInfo_8cc.html</anchorfile>
      <anchor>acf80fe272569db4f5ebc3b1044996d5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NetwToMacControlInfo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>NetwToMacControlInfo_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">NetwToMacControlInfo</class>
  </compound>
  <compound kind="file">
    <name>NicEntry.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>NicEntry_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">NicEntry</class>
    <class kind="class">NicEntry::NicEntryComparator</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>NicEntryDebug_8cc</filename>
    <includes id="NicEntryDebug_8h" name="NicEntryDebug.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDebug.h</includes>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>nicEV</name>
      <anchorfile>NicEntryDebug_8cc.html</anchorfile>
      <anchor>a086d1da3fccd71d29bb48aa11e524977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>NicEntryDebug_8h</filename>
    <includes id="NicEntry_8h" name="NicEntry.h" local="yes" imported="no">veins/base/connectionManager/NicEntry.h</includes>
    <class kind="class">NicEntryDebug</class>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>NicEntryDirect_8cc</filename>
    <includes id="NicEntryDirect_8h" name="NicEntryDirect.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDirect.h</includes>
    <includes id="ChannelAccess_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>nicEV</name>
      <anchorfile>NicEntryDirect_8cc.html</anchorfile>
      <anchor>a086d1da3fccd71d29bb48aa11e524977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>NicEntryDirect_8h</filename>
    <includes id="NicEntry_8h" name="NicEntry.h" local="yes" imported="no">veins/base/connectionManager/NicEntry.h</includes>
    <class kind="class">NicEntryDirect</class>
  </compound>
  <compound kind="file">
    <name>NistErrorRate.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>NistErrorRate_8cc</filename>
    <includes id="NistErrorRate_8h" name="NistErrorRate.h" local="yes" imported="no">veins/modules/phy/NistErrorRate.h</includes>
  </compound>
  <compound kind="file">
    <name>NistErrorRate.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>NistErrorRate_8h</filename>
    <includes id="ConstsPhy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <class kind="class">NistErrorRate</class>
  </compound>
  <compound kind="file">
    <name>Obstacle.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/obstacle/</path>
    <filename>Obstacle_8cc</filename>
    <includes id="Obstacle_8h" name="Obstacle.h" local="yes" imported="no">veins/modules/obstacle/Obstacle.h</includes>
  </compound>
  <compound kind="file">
    <name>Obstacle.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/obstacle/</path>
    <filename>Obstacle_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="AnnotationManager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">Veins::Obstacle</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>ObstacleControl.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/obstacle/</path>
    <filename>ObstacleControl_8cc</filename>
    <includes id="ObstacleControl_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ObstacleControl_8cc.html</anchorfile>
      <anchor>ac2ede00c414fc755fe96265836a8029c</anchor>
      <arglist>(Veins::ObstacleControl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObstacleControl.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/obstacle/</path>
    <filename>ObstacleControl_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="Obstacle_8h" name="Obstacle.h" local="yes" imported="no">veins/modules/obstacle/Obstacle.h</includes>
    <includes id="AnnotationManager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">Veins::ObstacleControl</class>
    <class kind="struct">Veins::ObstacleControl::CacheKey</class>
    <class kind="class">Veins::ObstacleControlAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>PassedMessage.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>PassedMessage_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <class kind="class">PassedMessage</class>
  </compound>
  <compound kind="file">
    <name>PERModel.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>PERModel_8cc</filename>
    <includes id="PERModel_8h" name="PERModel.h" local="yes" imported="no">veins/modules/analogueModel/PERModel.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>PERModel.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>PERModel_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">PERModel</class>
  </compound>
  <compound kind="file">
    <name>PhyControlMessage_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/messages/</path>
    <filename>PhyControlMessage__m_8h</filename>
    <class kind="class">PhyControlMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>PhyControlMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PhyControlMessage__m_8h.html</anchorfile>
      <anchor>a4dd59ed507307a69ba74eb35d697717d</anchor>
      <arglist>(cCommBuffer *b, PhyControlMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PhyControlMessage__m_8h.html</anchorfile>
      <anchor>aca8bbf78adf011bdb0e80e6a1b001d55</anchor>
      <arglist>(cCommBuffer *b, PhyControlMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyLayer80211p.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>PhyLayer80211p_8cc</filename>
    <includes id="PhyLayer80211p_8h" name="PhyLayer80211p.h" local="yes" imported="no">veins/modules/phy/PhyLayer80211p.h</includes>
    <includes id="Decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">veins/modules/phy/Decider80211p.h</includes>
    <includes id="SimplePathlossModel_8h" name="SimplePathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/SimplePathlossModel.h</includes>
    <includes id="BreakpointPathlossModel_8h" name="BreakpointPathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/BreakpointPathlossModel.h</includes>
    <includes id="LogNormalShadowing_8h" name="LogNormalShadowing.h" local="yes" imported="no">veins/modules/analogueModel/LogNormalShadowing.h</includes>
    <includes id="JakesFading_8h" name="JakesFading.h" local="yes" imported="no">veins/modules/analogueModel/JakesFading.h</includes>
    <includes id="PERModel_8h" name="PERModel.h" local="yes" imported="no">veins/modules/analogueModel/PERModel.h</includes>
    <includes id="SimpleObstacleShadowing_8h" name="SimpleObstacleShadowing.h" local="yes" imported="no">veins/modules/analogueModel/SimpleObstacleShadowing.h</includes>
    <includes id="TwoRayInterferenceModel_8h" name="TwoRayInterferenceModel.h" local="yes" imported="no">veins/modules/analogueModel/TwoRayInterferenceModel.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="Consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="AirFrame11p__m_8h" name="AirFrame11p_m.h" local="yes" imported="no">veins/modules/messages/AirFrame11p_m.h</includes>
    <includes id="MacToPhyControlInfo_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>PhyLayer80211p_8cc.html</anchorfile>
      <anchor>a81dd20c566964352e521b615a54b29cb</anchor>
      <arglist>(PhyLayer80211p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyLayer80211p.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>PhyLayer80211p_8h</filename>
    <includes id="BasePhyLayer_8h" name="BasePhyLayer.h" local="yes" imported="no">veins/base/phyLayer/BasePhyLayer.h</includes>
    <includes id="Mac80211pToPhy11pInterface_8h" name="Mac80211pToPhy11pInterface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h</includes>
    <includes id="Decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">veins/modules/phy/Decider80211p.h</includes>
    <includes id="SimplePathlossModel_8h" name="SimplePathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/SimplePathlossModel.h</includes>
    <includes id="LogNormalShadowing_8h" name="LogNormalShadowing.h" local="yes" imported="no">veins/modules/analogueModel/LogNormalShadowing.h</includes>
    <includes id="SNRThresholdDecider_8h" name="SNRThresholdDecider.h" local="yes" imported="no">veins/modules/phy/SNRThresholdDecider.h</includes>
    <includes id="JakesFading_8h" name="JakesFading.h" local="yes" imported="no">veins/modules/analogueModel/JakesFading.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="Decider80211pToPhy80211pInterface_8h" name="Decider80211pToPhy80211pInterface.h" local="yes" imported="no">veins/modules/phy/Decider80211pToPhy80211pInterface.h</includes>
    <includes id="Move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <class kind="class">PhyLayer80211p</class>
    <member kind="define">
      <type>#define</type>
      <name>DBG</name>
      <anchorfile>PhyLayer80211p_8h.html</anchorfile>
      <anchor>a49606be7356624568932ec81c0d429f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyToMacControlInfo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>PhyToMacControlInfo_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <class kind="class">PhyToMacControlInfo</class>
  </compound>
  <compound kind="file">
    <name>PhyUtils.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>PhyUtils_8cc</filename>
    <includes id="PhyUtils_8h" name="PhyUtils.h" local="yes" imported="no">veins/base/phyLayer/PhyUtils.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>PhyUtils.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>PhyUtils_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <class kind="class">RadioStateAnalogueModel</class>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <class kind="class">Veins::Radio</class>
    <class kind="class">RSAMConstMappingIterator</class>
    <class kind="class">RSAMMapping</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIConstants.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>rbvtrTraCIConstants_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>rbvtrTraCI_VERSION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0620dd21483a2ca31be8b51b9754e947</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8e73707083e5a68828275698eadeab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>affa501f61facb91d6c42b6ed4b184dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_STOP</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a46dc7ae84992bfe62cc00731959a67f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_RESUME</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad94c1b5ed2f3487c7245445a27fb5912</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adf76abeac554994696e6af2df832caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a628edc613cc0dc75723a440d4f59cf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adeeddcd0f58304495e3e30c5285be51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLOSE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0908ae0ea53f32f9e7bbb814b4ebc9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a77a3a68c3e4b2d0f90374fa62b6d6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa5f062ce635f44c083d53d8df2e7fc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8a127fe9592a7f233ed5bfdea70dff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a05246bdec45af16aac5056a45bbfbffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1c08dbf9ecec171fd5a8abdcf4bc1732</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4a59e3000bf1dd5f9c66d541021461d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a83722ee715c13e3c54e67c8685c53677</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4ca1d39ce2764e5576da3c5bb8c31eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1bfe2cee9c84b8e204c443c164a16eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a38464f30e521653b27d884cb0f8e952b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac408b68214392c4024825c8122c2ec67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a25b3cd5b082eee76400c9e81f0b4ab93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abf2a54d0263928c7c67b1399205f62d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a995228e235671467f43c6f230f5a310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae7720408c339a65bb1d7920776e7f4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9d9eaf59816e52a9b1382cd2f0e445fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aab7627756e25685ef8398633ca620bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>afc74049e4ac8c8a65d6b25c0c363cadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad2fa5b748b1580f354b631507e6e9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0dd8b3825acb93e57835a9c6a59a0f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a23a5713b2efa147f104b003c10d07ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab9a720c867f40272e532baba3fe1d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a45d28d5e51861aadcb6628654e5eb216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a89bdee3b9abb917a60549fd59fbb0030</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4b0ea4b02e65aedf9e65adf86933cc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a46b32b8e87e293aced2c6242363abafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>af88f093b11ea60a099215445b748b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae82c59889f44f40b0df6f1c41e00cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a16b6670eaa5a5845527c1ea9c4ef6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adf59516cf5e0e33c6456e79e41c066cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>afef1c73324fcdc35456aac81a7148543</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a3a44889166592e82aecf99a5c9b9107d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac20682f65f1f56d1406969e4840386ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a7e3288033a093977343bc000cfa0dbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8327578e1d375be0cda35067c23d0542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8efb67d70d2b7c6b86d9d99a40806e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4daee312282fa61ce2b2c9e19dc71fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6ea1568c34b29442244baf42f2bdc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a17305b49c61a77532505151ce2d399b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aaa289d08e25ed1871788a796ea91119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae081962daaad7c840b403c78a17a5417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae6a517ede4227e23146523b5390e07a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a611f3b8bd0715603a95b357dfbf8d078</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab5485e8ea7e4ac013adc23328137a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad0ac305c18e80d93f39441a8db700d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a3fa3a62d0be585a1254411199257e5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9ae14a25ff457995de0d6578d034f44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8c230b85db253650ca48a0f52daf4dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4b9ab406e73542e88dfcf44d3d736a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0fd8a024f568bf8b48ea3f64654de5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>af919cb89a8a561aff0896e66b5b5319a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a430ba00f89274e46a4c30b2cb99df0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a76e46577d69ef80748268f4ac965addd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>af4c74ade0bf736fb05e375efc4c27324</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4f792965065f4fa7c1515fcf9998b7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a725c1c8d88140ccd66d2c78a72ab7c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a12e00b53d862c78782a35163d658ad24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab75171b37a51f872525267e699d527cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a30482aa996155d083ce2ca8415ed70f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad135c2bd596c0d8e6a7b1f2c3e9aff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1cfd9140dd98070257cf737420411c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a739adbf1b8ffc6ed775431573f2fdb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a404ce6a209165786b246406df4aead28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a726077fc812b6f19601ee2cd8181e889</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9a5b7a862e0e503918cdc066f3458e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abebcb9821a2d54a8cdcb094e4ca58b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5c814e302a1e1c3fd43fa2f7e285a014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a47351c017e8d6b1696debc71cfc1a52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a417533e3ca34f46cd8b1c43c9e9af26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a19fb63fc78fed848a258aa23b138ff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5f6f40f44660f99fe2f4a10f64464be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1b11dc53cd2d9cc703d64531b75446eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4a3b3f72cbb0e56c0497ec5cd41e9230</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a35d453923055d4c62f6f786b5785511c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5795554151e18de86f5abf94cbec4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae615615a34e54cf69171803bfcdf91f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa893eb800437ce3ecf5fe24ca693a953</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac50a1184def0490f99882a2b24102500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a28a6f61ca698fbf35fa06f94366e5ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abd59649fa90019dd8b4171469b43e340</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a61ace178f023e87e8fab4a2cff1d70c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8008229a0fe2d03c3e4dd58e80e46ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aae8689698f0f9440895902bd79a4acc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a59701651aaf3a84c12530259646846de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a157bc725d90b04ca8844224cc02c4cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac3fa214c68b4f9c6d72b87857d528b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa6ecd09a7f6cc9872956f06a84ab3caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad345b2290b629c7df963593c191f9a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>afc254ddb55bf9b49350f7b47ba6f9537</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0a10dec2c5213528772d967138b25984</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6f83cac4993ab850b3bf4ee317e185c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab8aa0b8c58b89bd0dcb5449e92c82b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a54a1de506a4c7ca2344bb204cd19af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab86891c2e946e90b4360ecad860825a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4e9c9edafbf4e14d85142723bbcda7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa04d99fb7799fc05097ce8b55f6794e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_2D</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9fc3eb37a8ae494084b863c411cf8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6a1ab0cb7f3aea6a181bc47f7939f284</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_3D</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a2e4e2d4459c881109b0b40d723d5ba8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a82812c142e13bbb144d26ac69b291cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad6279a78dbab9ba005c6c1ff819fb2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a63081ba85a6af222803d714237576999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a3d7c110d8026c92c2fee435f7cd12193</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BYTE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad62574650f26d2392ab55729769948b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a929147425bf7969fe1d0e33716d02bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_FLOAT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a105c7addfad52601f4d079673eae7982</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac87fa650bc0dcd101b39e15ecdb57477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_TLPHASELIST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aba8744658fadd99da72fd9117b464ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5561b6050ea28ec6d322e28848460c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5af12da4378875209e0b79bbe6b70e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COLOR</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4a2941e13cc0bd28c847984e7f573850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_OK</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a541fc8755958a227fe412e2df7fa31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a31333391a4e82822d2c43e3928b6262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_ERR</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a43465ba21de31f9ae2573e7ac5f24919</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abd665a03a6204505716245362eeca1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5722d9b8df900cf44a69151b6f4b1e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_RED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae475cd0b9d5ae96a145230c0ac287154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_YELLOW</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a65d19b964abffa9b90c39cf21fcc0fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_GREEN</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a89c162b91c4124ebfe80f5bfa37621f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_BLINKING</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adf4fad950649759339ab18b4978a57bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_NOSIGNAL</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>acf44e21bfd6f2edbb22d04efda707da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a88b616d763ed7052b2341f6d08040135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0876dbae8eb3fb92b20b2568d71eaf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a7e483da406ff89a7b9fbe9dcb4ecfa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0cfd27f8f6dad63eb821dea08fc25c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a93901a271a595e7d3eb9ab540aa8d9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ace5ff9b0a74f5328e9dbcf71d79d25a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a7b8fcc7038295f3a18a5200af1b46633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_LIST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a28687ff0fca27086bca2dfb0c0aa8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_COUNT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a10ef5e45606c2977dd1eaf386f5d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a121b9861ef8ff7a65dbf05955903bd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>af7cffef1a0ad07af0cb2bc1f647f7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5cc4b739aa511a8bcdb3ea23e5f488fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1bffbc3260dd641611f50a5b675c6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a7c60786af53b7e18ae6114577656e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a028a459ac58e7412d86407a6a647f544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac7bc8c0d2db79321580ed8391829e23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>afb37eb3a0763757e55635de36a0952bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abde51e92597a7d674fe9a90c1d6c6054</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9989b962ced0c0a5d568c5812effe104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a74683d948c8a7dfc72157023021232f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8f84a9cfe1563281fc6c91b72f14a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8023e019a18d24881b8780aef047b455</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>add58d847358637741402c2979fc014ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PROGRAM</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>af39eae82404a11130f08d21c9d8a84f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aac7f12ef78085882c4fd0a2b5dd0d359</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a2e60c8a6b44d8d40ad51c65ab95b3e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a7eb603191d4446e7cf87c2356be3448e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aaf461fd64ac182b47c025f6f78af23e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9224116e351cb230398e837841fac367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>addac5c47b0c3f52a08255d079dfb6c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abae7b714231e81de94e1024f9f41a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a34b22bed0e5c0ba971a86ab8c56838fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>acee0a296326d46d40c9b97667dc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a20c9ad5e2c2ee1049282fca2605d3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aeb0a208a3c967515421f6659575da87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINKS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac39a0a0f89c208808ee921c9dbe8da8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6c5b0c0bc04b2036a971ca4bd7f5007f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5079457f2d9cc6be8da3834ae4a06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a803f3a1743aef11a357e838e50d80f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1f8d8754eb24cd09fb3107a3f71bf76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_POSITION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a40ee44d232bc7661ec5a37bacd60702e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ANGLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aef6ef58b8c84169ca96fc70f9c5cee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LENGTH</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a60e947bd75233810d5417b41f27e68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COLOR</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adcc89457ed75668afd992c756fc58549</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ACCEL</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aafdce9f42320b3e72c814cceaab9809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DECEL</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4f883334365d5c2e0f18944be814441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TAU</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8d32ba4c4cc7e453e9b63426d84eb084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5cdedbf9fd0353a0a7c60982b4bd1494</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a46a1e04d43660551e055d44f2d0ca41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0f50ad2a0f01241405381b9e895ab2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MINGAP</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aea443b43de4353bbaab7f34d303afe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WIDTH</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adb08f65a6543f976dbfe6ee7db5d08a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8bcea46eaacfa0cb3896a2ca066ce237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TYPE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae136061e5a4bf896d9cfb27868baf9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a006ca3246206d575bc949da18c7d075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>afb32e44c504d7f1bd7f7ba1fb3a56a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a19d2b339169244a09db78bb764fadd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a48cbe1bf5748e27183054ed2ddcfa3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGES</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ada001729364b89aa926730f631d6e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FILL</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>add08c9a33fb813e51fccabb3475a4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4493c1eaff38410b9afd3b5ec86e760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab193f946f651c97e299dfc4285133516</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa03c145ea3d6ed1039ee650ad0599452</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a82afe862545ade0192be2788e5b29f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8c5b07ef23ea6dc11209203b3ac7759d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a7378a076f1ed4fb133d04d474ec36110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad18db3a6f2be838f3ea6d75bb1784b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac98dc6e9bc82ae734fa638762f81eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac73c5a63a7ba70a57e9f2162277799db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aaa434a0096961983f3ca1fddbeb73b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_WITHOUT_rbvtrTraCI</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a3aac87b47221d1c7cc973c47ec761a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a547dc5b69db59f7d5919f1e295469049</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5c4f611616810959183c7b4e1d6e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a2bc86d4cb640d38c9141eff52fdeddc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ae3c19c3616e283cc23c02b38fa6b106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>adf0c5e5040db7935734b8b883973e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa744a28d72caf1c96e355a61b341d9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac2d739153c2b7614503bdd7053a96027</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6975b2bc0430600de2e96f1b7dcb5e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa57f4cf03d1b32e487371987f3f0cc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad32f4444706efc2c595e978f7898563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad9d66d42efa6d47d084d4dd8ed52b7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abb332ca9704ebaa6b5f779af5ab8412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a578826c7c51ee3143b8b6f6c63854512</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ad329e5b7d4a42b7e34acf7cb89b34de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a0ff9aec6a237456a854c35841a01e1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aba383d3234c4f0b62a0ece79b98ec457</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ada0133b150f6beef3b9c15d65892dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa15656ecb567d69ab1a26a6b77f48e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4d7f1f70a9b831317c8516c7c49395b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a53906c58d5f7c9d0474b2327dc6758c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1feee452ab9f9778c68cf55e8cb70b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a217ca72b88d743238b7bc3bacbe7da1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abf31d852e42db03d1a3fd426d9d3b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aa8562695a38b797bf6c77156cc53be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>aca15cc76f5f1f2150602ae0221ea9efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a30267d895605937cc904a8471aa2b098</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a89cb2ef6aa378ea1b5c71ede68f3af5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a1051bd1ae917fc0cc2639f48462c0a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a97fe5470fb1ac167c713671655ff3e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ab9959e75e26bc66b3733ddc04de6b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a8ef564809ccabdee78bdc9656a660a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a92f25b953319f56d635ea4fe599d65c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a39e184bf382ac65aaaf2ea344ed909a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a9cf2d3b5926694eca9a290606153dbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a27d763793c3a43050ece9e76caa0f697</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a817e029aaf52b9bd33c3115af6384e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a6223fc3eef58008e64e425ddf4136ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>ac7a52c618e295256a64a55c94bd754a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a48b64030823e73abcea5f383a07a6b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a3de049e7d6d515e3250a8af1bcd04565</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a4ae01bdb5b0bcb9237faecf1930af5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>rbvtrTraCIConstants_8h.html</anchorfile>
      <anchor>a5762708bbdd17c389bfffb5a19143b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIDemo.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>rbvtrTraCIDemo_8cc</filename>
    <includes id="rbvtrTraCIDemo_8h" name="rbvtrTraCIDemo.h" local="yes" imported="no">applications/traci/rbvtrTraCIDemo.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>rbvtrTraCIDemo_8cc.html</anchorfile>
      <anchor>a94db31527498f9becea7b0ffd422a68c</anchor>
      <arglist>(rbvtrTraCIDemo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIDemo.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>rbvtrTraCIDemo_8h</filename>
    <includes id="rbvtrTraCIMobility_8h" name="rbvtrTraCIMobility.h" local="yes" imported="no">mobility/single/rbvtrTraCIMobility.h</includes>
    <class kind="class">rbvtrTraCIDemo</class>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>rbvtrTraCIMobility_8cc</filename>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="rbvtrTraCIMobility_8h" name="rbvtrTraCIMobility.h" local="yes" imported="no">mobility/single/rbvtrTraCIMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>rbvtrTraCIMobility_8cc.html</anchorfile>
      <anchor>abdb6b58c4d16afb6e4c8988f8f6063eb</anchor>
      <arglist>(rbvtrTraCIMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>rbvtrTraCIMobility_8h</filename>
    <includes id="VANETMobilityBase_8h" name="VANETMobilityBase.h" local="yes" imported="no">VANETMobilityBase.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="rbvtrTraCIScenarioManager_8h" name="rbvtrTraCIScenarioManager.h" local="yes" imported="no">world/traci/rbvtrTraCIScenarioManager.h</includes>
    <class kind="class">rbvtrTraCIMobility</class>
    <class kind="class">rbvtrTraCIMobility::Statistics</class>
    <class kind="class">rbvtrTraCIMobilityAccess</class>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIScenarioManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>rbvtrTraCIScenarioManager_8cc</filename>
    <includes id="rbvtrTraCIScenarioManager_8h" name="rbvtrTraCIScenarioManager.h" local="yes" imported="no">world/traci/rbvtrTraCIScenarioManager.h</includes>
    <includes id="rbvtrTraCIConstants_8h" name="rbvtrTraCIConstants.h" local="yes" imported="no">world/traci/rbvtrTraCIConstants.h</includes>
    <includes id="rbvtrTraCIMobility_8h" name="rbvtrTraCIMobility.h" local="yes" imported="no">mobility/single/rbvtrTraCIMobility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>rbvtrTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYSOCKET</name>
      <anchorfile>rbvtrTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a5a08180b61c99cfe56e425578f50ea99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>rbvtrTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>rbvtrTraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a961ae3f747d8c7be736aa538e39b02a7</anchor>
      <arglist>(rbvtrTraCIScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIScenarioManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>rbvtrTraCIScenarioManager_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="vanetTraCIColor_8h" name="vanetTraCIColor.h" local="yes" imported="no">vanetTraCIColor.h</includes>
    <class kind="class">rbvtrTraCIScenarioManager</class>
    <class kind="struct">rbvtrTraCIScenarioManager::rbvtrTraCICoord</class>
    <class kind="class">rbvtrTraCIScenarioManager::rbvtrTraCIBuffer</class>
    <class kind="class">rbvtrTraCIScenarioManagerAccess</class>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIScenarioManagerLaunchd.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>rbvtrTraCIScenarioManagerLaunchd_8cc</filename>
    <includes id="rbvtrTraCIScenarioManagerLaunchd_8h" name="rbvtrTraCIScenarioManagerLaunchd.h" local="yes" imported="no">world/traci/rbvtrTraCIScenarioManagerLaunchd.h</includes>
    <includes id="rbvtrTraCIConstants_8h" name="rbvtrTraCIConstants.h" local="yes" imported="no">world/traci/rbvtrTraCIConstants.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>rbvtrTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>acd42c64604c9797d6697cdbd75377eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>rbvtrTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>rbvtrTraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a8dcdb8e8b38c6b21b99760290405a94d</anchor>
      <arglist>(rbvtrTraCIScenarioManagerLaunchd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCIScenarioManagerLaunchd.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>rbvtrTraCIScenarioManagerLaunchd_8h</filename>
    <includes id="rbvtrTraCIScenarioManager_8h" name="rbvtrTraCIScenarioManager.h" local="yes" imported="no">world/traci/rbvtrTraCIScenarioManager.h</includes>
    <class kind="class">rbvtrTraCIScenarioManagerLaunchd</class>
    <class kind="class">rbvtrTraCIScenarioManagerLaunchdAccess</class>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCITestApp.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>rbvtrTraCITestApp_8cc</filename>
    <includes id="rbvtrTraCITestApp_8h" name="rbvtrTraCITestApp.h" local="yes" imported="no">applications/traci/rbvtrTraCITestApp.h</includes>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>rbvtrTraCITestApp_8cc.html</anchorfile>
      <anchor>aa3dfdf23f5ac31dfe504c3c4c6aa94c6</anchor>
      <arglist>(rbvtrTraCITestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbvtrTraCITestApp.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>rbvtrTraCITestApp_8h</filename>
    <includes id="rbvtrTraCIMobility_8h" name="rbvtrTraCIMobility.h" local="yes" imported="no">mobility/single/rbvtrTraCIMobility.h</includes>
    <class kind="class">rbvtrTraCITestApp</class>
  </compound>
  <compound kind="file">
    <name>Signal.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>Signal_8cc</filename>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
  </compound>
  <compound kind="file">
    <name>Signal_.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>Signal___8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <class kind="class">Signal</class>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>SimpleAddress_8cc</filename>
    <includes id="SimpleAddress_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>SimpleAddress_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <class kind="class">LAddress</class>
  </compound>
  <compound kind="file">
    <name>SimpleObstacleShadowing.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>SimpleObstacleShadowing_8cc</filename>
    <includes id="SimpleObstacleShadowing_8h" name="SimpleObstacleShadowing.h" local="yes" imported="no">veins/modules/analogueModel/SimpleObstacleShadowing.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>SimpleObstacleShadowing_8cc.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleObstacleShadowing.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>SimpleObstacleShadowing_8h</filename>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="ObstacleControl_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="Move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <includes id="Signal___8h" name="Signal_.h" local="yes" imported="no">veins/base/phyLayer/Signal_.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <class kind="class">SimpleObstacleShadowing</class>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>SimplePathlossModel_8cc</filename>
    <includes id="SimplePathlossModel_8h" name="SimplePathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/SimplePathlossModel.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>splmEV</name>
      <anchorfile>SimplePathlossModel_8cc.html</anchorfile>
      <anchor>a8e82343f744a3001e77dd476bd4177ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>SimplePathlossModel_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <class kind="class">SimplePathlossConstMapping</class>
    <class kind="class">SimplePathlossModel</class>
  </compound>
  <compound kind="file">
    <name>SNRThresholdDecider.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>SNRThresholdDecider_8cc</filename>
    <includes id="SNRThresholdDecider_8h" name="SNRThresholdDecider.h" local="yes" imported="no">veins/modules/phy/SNRThresholdDecider.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <includes id="Mapping_8h" name="Mapping.h" local="yes" imported="no">veins/base/phyLayer/Mapping.h</includes>
  </compound>
  <compound kind="file">
    <name>SNRThresholdDecider.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>SNRThresholdDecider_8h</filename>
    <includes id="MiXiMDefs_8h" name="MiXiMDefs.h" local="yes" imported="no">veins/base/utils/MiXiMDefs.h</includes>
    <includes id="BaseDecider_8h" name="BaseDecider.h" local="yes" imported="no">veins/base/phyLayer/BaseDecider.h</includes>
    <class kind="class">SNRThresholdDecider</class>
  </compound>
  <compound kind="file">
    <name>sumo-launchd.py</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/</path>
    <filename>sumo-launchd_8py</filename>
    <class kind="class">sumo-launchd::UnusedPortLock</class>
    <namespace>sumo-launchd</namespace>
    <member kind="function">
      <type>def</type>
      <name>find_unused_port</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>ae199d5eca874e2c4f6d513c66dff9d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>forward_connection</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a4b524ec343d97f862098dcabe3cee5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parse_launch_configuration</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a5bb0381076a6bf722594d40b0029c911</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_sumo</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a91ba6915eb6c01fb3b4025d5c4551929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_sumoconfig_option</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>addc4ce10e4de5003d6af5428e4fe37cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>copy_and_modify_files</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a2e6e9db4f6c950cb721420724161bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle_launch_configuration</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a2be039960bf6da2a250ff6fdb41e3868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle_get_version</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>ad5ba1217a0c27654b0b7e06ae498b1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_launch_config</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a27f9e5e0276f801c387b1e0c55a8fdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle_connection</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>adce09b7709906bef8a95a1706bcb206d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>wait_for_connections</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a6c344aaa3a1a4035429d894209dd7ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_kill_daemon</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>af87c20e965cb9c3f00e50449237886a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>daemonize</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>ad7c19708d9b1f2e267e37a46195a0dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>main</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a92c2c1d9d79c74b81542a276aff5b2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_API_VERSION</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>aa7049e7602df270346bf91f32b5fa828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_LAUNCHD_VERSION</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a429bfbb81849120c75ec17e6dcf12dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_CMD_GET_VERSION</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a44b79cff15e2d42297325edba8cb622a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_CMD_FILE_SEND</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a2bd20e2cd07a693c3ee9d8e1528ed0c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIBuffer.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIBuffer_8cc</filename>
    <includes id="TraCIBuffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="TraCIConstants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="TraCICoord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <namespace>Veins</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a9701754031a4d3de7cc9eeaae1bf9e87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIBuffer.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIBuffer_8h</filename>
    <class kind="class">Veins::TraCIBuffer</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIColor.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIColor_8cc</filename>
    <includes id="TraCIColor_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
  </compound>
  <compound kind="file">
    <name>TraCIColor.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIColor_8h</filename>
    <class kind="class">Veins::TraCIColor</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICommandInterface.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCICommandInterface_8cc</filename>
    <includes id="TraCIBuffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="TraCIConnection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="TraCIConstants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="TraCICoord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICommandInterface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCICommandInterface_8h</filename>
    <includes id="TraCIColor_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">Veins::TraCICommandInterface</class>
    <class kind="class">Veins::TraCICommandInterface::Vehicle</class>
    <class kind="class">Veins::TraCICommandInterface::Road</class>
    <class kind="class">Veins::TraCICommandInterface::Lane</class>
    <class kind="class">Veins::TraCICommandInterface::Trafficlight</class>
    <class kind="class">Veins::TraCICommandInterface::Polygon</class>
    <class kind="class">Veins::TraCICommandInterface::Poi</class>
    <class kind="class">Veins::TraCICommandInterface::Junction</class>
    <class kind="class">Veins::TraCICommandInterface::Route</class>
    <class kind="class">Veins::TraCICommandInterface::GuiView</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIConnection.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIConnection_8cc</filename>
    <includes id="TraCIConnection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="TraCIConstants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <class kind="struct">Veins::traci2omnet_functor</class>
    <namespace>Veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>TraCIConnection_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>TraCIConnection_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SOCKET</type>
      <name>socket</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a6eeefaf3bbdaff6c10cfcd01200016d3</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>ab52db5bfe6d9095440c0b0ac309bb99d</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIConnection.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIConnection_8h</filename>
    <includes id="TraCIBuffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="TraCICoord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">Veins::TraCIConnection</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIConstants.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIConstants_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRACI_VERSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a07fa3c69b8577074f150b63432efc227</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8e73707083e5a68828275698eadeab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>affa501f61facb91d6c42b6ed4b184dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_STOP</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a46dc7ae84992bfe62cc00731959a67f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_RESUME</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad94c1b5ed2f3487c7245445a27fb5912</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adf76abeac554994696e6af2df832caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a628edc613cc0dc75723a440d4f59cf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adeeddcd0f58304495e3e30c5285be51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLOSE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0908ae0ea53f32f9e7bbb814b4ebc9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a77a3a68c3e4b2d0f90374fa62b6d6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa5f062ce635f44c083d53d8df2e7fc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8a127fe9592a7f233ed5bfdea70dff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a05246bdec45af16aac5056a45bbfbffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1c08dbf9ecec171fd5a8abdcf4bc1732</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4a59e3000bf1dd5f9c66d541021461d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a83722ee715c13e3c54e67c8685c53677</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4ca1d39ce2764e5576da3c5bb8c31eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1bfe2cee9c84b8e204c443c164a16eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a38464f30e521653b27d884cb0f8e952b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac408b68214392c4024825c8122c2ec67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a25b3cd5b082eee76400c9e81f0b4ab93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abf2a54d0263928c7c67b1399205f62d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a995228e235671467f43c6f230f5a310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae7720408c339a65bb1d7920776e7f4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9d9eaf59816e52a9b1382cd2f0e445fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aab7627756e25685ef8398633ca620bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>afc74049e4ac8c8a65d6b25c0c363cadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad2fa5b748b1580f354b631507e6e9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0dd8b3825acb93e57835a9c6a59a0f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a23a5713b2efa147f104b003c10d07ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab9a720c867f40272e532baba3fe1d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a45d28d5e51861aadcb6628654e5eb216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a89bdee3b9abb917a60549fd59fbb0030</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4b0ea4b02e65aedf9e65adf86933cc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a46b32b8e87e293aced2c6242363abafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>af88f093b11ea60a099215445b748b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae82c59889f44f40b0df6f1c41e00cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a16b6670eaa5a5845527c1ea9c4ef6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adf59516cf5e0e33c6456e79e41c066cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>afef1c73324fcdc35456aac81a7148543</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a3a44889166592e82aecf99a5c9b9107d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac20682f65f1f56d1406969e4840386ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a7e3288033a093977343bc000cfa0dbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8327578e1d375be0cda35067c23d0542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8efb67d70d2b7c6b86d9d99a40806e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4daee312282fa61ce2b2c9e19dc71fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6ea1568c34b29442244baf42f2bdc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a17305b49c61a77532505151ce2d399b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aaa289d08e25ed1871788a796ea91119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae081962daaad7c840b403c78a17a5417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae6a517ede4227e23146523b5390e07a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a611f3b8bd0715603a95b357dfbf8d078</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab5485e8ea7e4ac013adc23328137a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad0ac305c18e80d93f39441a8db700d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a3fa3a62d0be585a1254411199257e5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9ae14a25ff457995de0d6578d034f44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8c230b85db253650ca48a0f52daf4dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4b9ab406e73542e88dfcf44d3d736a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0fd8a024f568bf8b48ea3f64654de5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>af919cb89a8a561aff0896e66b5b5319a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a430ba00f89274e46a4c30b2cb99df0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a76e46577d69ef80748268f4ac965addd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>af4c74ade0bf736fb05e375efc4c27324</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4f792965065f4fa7c1515fcf9998b7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a725c1c8d88140ccd66d2c78a72ab7c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a12e00b53d862c78782a35163d658ad24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab75171b37a51f872525267e699d527cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a30482aa996155d083ce2ca8415ed70f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad135c2bd596c0d8e6a7b1f2c3e9aff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1cfd9140dd98070257cf737420411c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a739adbf1b8ffc6ed775431573f2fdb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a404ce6a209165786b246406df4aead28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a726077fc812b6f19601ee2cd8181e889</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9a5b7a862e0e503918cdc066f3458e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abebcb9821a2d54a8cdcb094e4ca58b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5c814e302a1e1c3fd43fa2f7e285a014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a47351c017e8d6b1696debc71cfc1a52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a417533e3ca34f46cd8b1c43c9e9af26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a19fb63fc78fed848a258aa23b138ff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5f6f40f44660f99fe2f4a10f64464be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1b11dc53cd2d9cc703d64531b75446eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4a3b3f72cbb0e56c0497ec5cd41e9230</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a35d453923055d4c62f6f786b5785511c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5795554151e18de86f5abf94cbec4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae615615a34e54cf69171803bfcdf91f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa893eb800437ce3ecf5fe24ca693a953</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac50a1184def0490f99882a2b24102500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a28a6f61ca698fbf35fa06f94366e5ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abd59649fa90019dd8b4171469b43e340</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a61ace178f023e87e8fab4a2cff1d70c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8008229a0fe2d03c3e4dd58e80e46ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aae8689698f0f9440895902bd79a4acc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a59701651aaf3a84c12530259646846de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a157bc725d90b04ca8844224cc02c4cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac3fa214c68b4f9c6d72b87857d528b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa6ecd09a7f6cc9872956f06a84ab3caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad345b2290b629c7df963593c191f9a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>afc254ddb55bf9b49350f7b47ba6f9537</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0a10dec2c5213528772d967138b25984</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6f83cac4993ab850b3bf4ee317e185c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab8aa0b8c58b89bd0dcb5449e92c82b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a54a1de506a4c7ca2344bb204cd19af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab86891c2e946e90b4360ecad860825a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4e9c9edafbf4e14d85142723bbcda7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa04d99fb7799fc05097ce8b55f6794e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_2D</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9fc3eb37a8ae494084b863c411cf8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6a1ab0cb7f3aea6a181bc47f7939f284</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_3D</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a2e4e2d4459c881109b0b40d723d5ba8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a82812c142e13bbb144d26ac69b291cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad6279a78dbab9ba005c6c1ff819fb2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a63081ba85a6af222803d714237576999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a3d7c110d8026c92c2fee435f7cd12193</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BYTE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad62574650f26d2392ab55729769948b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a929147425bf7969fe1d0e33716d02bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_FLOAT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a105c7addfad52601f4d079673eae7982</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac87fa650bc0dcd101b39e15ecdb57477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_TLPHASELIST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aba8744658fadd99da72fd9117b464ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5561b6050ea28ec6d322e28848460c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5af12da4378875209e0b79bbe6b70e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COLOR</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4a2941e13cc0bd28c847984e7f573850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_OK</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a541fc8755958a227fe412e2df7fa31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a31333391a4e82822d2c43e3928b6262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_ERR</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a43465ba21de31f9ae2573e7ac5f24919</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abd665a03a6204505716245362eeca1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5722d9b8df900cf44a69151b6f4b1e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_RED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae475cd0b9d5ae96a145230c0ac287154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_YELLOW</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a65d19b964abffa9b90c39cf21fcc0fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_GREEN</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a89c162b91c4124ebfe80f5bfa37621f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_BLINKING</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adf4fad950649759339ab18b4978a57bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_NOSIGNAL</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>acf44e21bfd6f2edbb22d04efda707da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a88b616d763ed7052b2341f6d08040135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0876dbae8eb3fb92b20b2568d71eaf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a7e483da406ff89a7b9fbe9dcb4ecfa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0cfd27f8f6dad63eb821dea08fc25c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a93901a271a595e7d3eb9ab540aa8d9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ace5ff9b0a74f5328e9dbcf71d79d25a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a7b8fcc7038295f3a18a5200af1b46633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_LIST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a28687ff0fca27086bca2dfb0c0aa8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_COUNT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a10ef5e45606c2977dd1eaf386f5d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a121b9861ef8ff7a65dbf05955903bd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>af7cffef1a0ad07af0cb2bc1f647f7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5cc4b739aa511a8bcdb3ea23e5f488fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1bffbc3260dd641611f50a5b675c6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a7c60786af53b7e18ae6114577656e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a028a459ac58e7412d86407a6a647f544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac7bc8c0d2db79321580ed8391829e23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>afb37eb3a0763757e55635de36a0952bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abde51e92597a7d674fe9a90c1d6c6054</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9989b962ced0c0a5d568c5812effe104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a74683d948c8a7dfc72157023021232f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8f84a9cfe1563281fc6c91b72f14a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8023e019a18d24881b8780aef047b455</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>add58d847358637741402c2979fc014ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PROGRAM</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>af39eae82404a11130f08d21c9d8a84f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aac7f12ef78085882c4fd0a2b5dd0d359</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a2e60c8a6b44d8d40ad51c65ab95b3e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a7eb603191d4446e7cf87c2356be3448e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aaf461fd64ac182b47c025f6f78af23e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9224116e351cb230398e837841fac367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>addac5c47b0c3f52a08255d079dfb6c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abae7b714231e81de94e1024f9f41a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a34b22bed0e5c0ba971a86ab8c56838fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>acee0a296326d46d40c9b97667dc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a20c9ad5e2c2ee1049282fca2605d3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aeb0a208a3c967515421f6659575da87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINKS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac39a0a0f89c208808ee921c9dbe8da8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6c5b0c0bc04b2036a971ca4bd7f5007f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5079457f2d9cc6be8da3834ae4a06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a803f3a1743aef11a357e838e50d80f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1f8d8754eb24cd09fb3107a3f71bf76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_POSITION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a40ee44d232bc7661ec5a37bacd60702e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ANGLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aef6ef58b8c84169ca96fc70f9c5cee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LENGTH</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a60e947bd75233810d5417b41f27e68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COLOR</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adcc89457ed75668afd992c756fc58549</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ACCEL</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aafdce9f42320b3e72c814cceaab9809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DECEL</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4f883334365d5c2e0f18944be814441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TAU</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8d32ba4c4cc7e453e9b63426d84eb084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5cdedbf9fd0353a0a7c60982b4bd1494</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a46a1e04d43660551e055d44f2d0ca41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0f50ad2a0f01241405381b9e895ab2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MINGAP</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aea443b43de4353bbaab7f34d303afe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WIDTH</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adb08f65a6543f976dbfe6ee7db5d08a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8bcea46eaacfa0cb3896a2ca066ce237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TYPE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae136061e5a4bf896d9cfb27868baf9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a006ca3246206d575bc949da18c7d075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>afb32e44c504d7f1bd7f7ba1fb3a56a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a19d2b339169244a09db78bb764fadd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a48cbe1bf5748e27183054ed2ddcfa3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGES</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ada001729364b89aa926730f631d6e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FILL</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>add08c9a33fb813e51fccabb3475a4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4493c1eaff38410b9afd3b5ec86e760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab193f946f651c97e299dfc4285133516</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa03c145ea3d6ed1039ee650ad0599452</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a82afe862545ade0192be2788e5b29f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8c5b07ef23ea6dc11209203b3ac7759d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a7378a076f1ed4fb133d04d474ec36110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad18db3a6f2be838f3ea6d75bb1784b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac98dc6e9bc82ae734fa638762f81eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac73c5a63a7ba70a57e9f2162277799db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aaa434a0096961983f3ca1fddbeb73b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_WITHOUT_TRACI</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a152867a4fb7b5bbc0557db0511384503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a547dc5b69db59f7d5919f1e295469049</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5c4f611616810959183c7b4e1d6e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a2bc86d4cb640d38c9141eff52fdeddc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ae3c19c3616e283cc23c02b38fa6b106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adf0c5e5040db7935734b8b883973e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa744a28d72caf1c96e355a61b341d9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CO2EMISSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>adcc6403451c32bda03d9563843f4eb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COEMISSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a55f8fd37376dc3adc19fc6e2ceaf53ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_HCEMISSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aaa0aad5c649d543d8de81bdb22d06664</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PMXEMISSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a37217bdbf8be36dc1bd44ecd62a807a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOXEMISSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a89457fa8c4ae6bd5adf6cc97860d08bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FUELCONSUMPTION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>acdec282d3916d2d2ec373cd6f5f5e977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOISEEMISSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a54cb80eb2dc3f07710f64ca77f9b732d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac2d739153c2b7614503bdd7053a96027</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6975b2bc0430600de2e96f1b7dcb5e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa57f4cf03d1b32e487371987f3f0cc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad32f4444706efc2c595e978f7898563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad9d66d42efa6d47d084d4dd8ed52b7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abb332ca9704ebaa6b5f779af5ab8412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a578826c7c51ee3143b8b6f6c63854512</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ad329e5b7d4a42b7e34acf7cb89b34de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a0ff9aec6a237456a854c35841a01e1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aba383d3234c4f0b62a0ece79b98ec457</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ada0133b150f6beef3b9c15d65892dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa15656ecb567d69ab1a26a6b77f48e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4d7f1f70a9b831317c8516c7c49395b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a53906c58d5f7c9d0474b2327dc6758c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1feee452ab9f9778c68cf55e8cb70b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a217ca72b88d743238b7bc3bacbe7da1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abf31d852e42db03d1a3fd426d9d3b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aa8562695a38b797bf6c77156cc53be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>aca15cc76f5f1f2150602ae0221ea9efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a30267d895605937cc904a8471aa2b098</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a89cb2ef6aa378ea1b5c71ede68f3af5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a1051bd1ae917fc0cc2639f48462c0a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a97fe5470fb1ac167c713671655ff3e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ab9959e75e26bc66b3733ddc04de6b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a8ef564809ccabdee78bdc9656a660a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a92f25b953319f56d635ea4fe599d65c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a39e184bf382ac65aaaf2ea344ed909a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a9cf2d3b5926694eca9a290606153dbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a27d763793c3a43050ece9e76caa0f697</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a817e029aaf52b9bd33c3115af6384e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a6223fc3eef58008e64e425ddf4136ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>ac7a52c618e295256a64a55c94bd754a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a48b64030823e73abcea5f383a07a6b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a3de049e7d6d515e3250a8af1bcd04565</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a4ae01bdb5b0bcb9237faecf1930af5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>TraCIConstants_8h.html</anchorfile>
      <anchor>a5762708bbdd17c389bfffb5a19143b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCICoord.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCICoord_8h</filename>
    <class kind="struct">Veins::TraCICoord</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIDemo11p.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>TraCIDemo11p_8cc</filename>
    <includes id="TraCIDemo11p_8h" name="TraCIDemo11p.h" local="yes" imported="no">veins/modules/application/traci/TraCIDemo11p.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCIDemo11p_8cc.html</anchorfile>
      <anchor>aaefed44a3a2f799836e77309d4832b4c</anchor>
      <arglist>(TraCIDemo11p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIDemo11p.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>TraCIDemo11p_8h</filename>
    <includes id="BaseWaveApplLayer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/BaseWaveApplLayer.h</includes>
    <includes id="TraCIMobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">TraCIDemo11p</class>
  </compound>
  <compound kind="file">
    <name>TraCIDemoRSU11p.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>TraCIDemoRSU11p_8cc</filename>
    <includes id="TraCIDemoRSU11p_8h" name="TraCIDemoRSU11p.h" local="yes" imported="no">veins/modules/application/traci/TraCIDemoRSU11p.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCIDemoRSU11p_8cc.html</anchorfile>
      <anchor>a0451243059dffcd98e337ceb6e7cd5e2</anchor>
      <arglist>(TraCIDemoRSU11p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIDemoRSU11p.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>TraCIDemoRSU11p_8h</filename>
    <includes id="BaseWaveApplLayer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/BaseWaveApplLayer.h</includes>
    <includes id="AnnotationManager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">TraCIDemoRSU11p</class>
  </compound>
  <compound kind="file">
    <name>TraCIMobility.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIMobility_8cc</filename>
    <includes id="TraCIMobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCIMobility_8cc.html</anchorfile>
      <anchor>a46c5c94510c6ee1b57c9ffab9048b39a</anchor>
      <arglist>(Veins::TraCIMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIMobility.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIMobility_8h</filename>
    <includes id="BaseMobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="TraCIScenarioManager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">Veins::TraCIMobility</class>
    <class kind="class">Veins::TraCIMobility::Statistics</class>
    <class kind="class">Veins::TraCIMobilityAccess</class>
    <namespace>Veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRACI_SIGNAL_PARKING_CHANGE_NAME</name>
      <anchorfile>TraCIMobility_8h.html</anchorfile>
      <anchor>a1a6e3abf500842c598e3d3335fd1c59e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManager.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScenarioManager_8cc</filename>
    <includes id="TraCIScenarioManager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="TraCIConstants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="TraCIMobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="ObstacleControl_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="TraCIScenarioManagerInet_8h" name="TraCIScenarioManagerInet.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManagerInet.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>TraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCIScenarioManager_8cc.html</anchorfile>
      <anchor>a69ec07628cb31a9358ad83bede75c5a7</anchor>
      <arglist>(Veins::TraCIScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManager.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScenarioManager_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="BaseConnectionManager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="FindModule_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="ObstacleControl_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="TraCIBuffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="TraCIColor_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
    <includes id="TraCIConnection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="TraCICoord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <class kind="class">Veins::TraCIScenarioManager</class>
    <class kind="class">Veins::TraCIScenarioManagerAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerInet.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScenarioManagerInet_8cc</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallPreInitialize</name>
      <anchorfile>TraCIScenarioManagerInet_8cc.html</anchorfile>
      <anchor>a837d0aa832e73eca6f2ba8c992c919a5</anchor>
      <arglist>(cModule *mod, const std::string &amp;nodeId, const Coord &amp;position, const std::string &amp;road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallNextPosition</name>
      <anchorfile>TraCIScenarioManagerInet_8cc.html</anchorfile>
      <anchor>a5049232949eb3445301bc999967c4057</anchor>
      <arglist>(cModule *mod, const Coord &amp;p, const std::string &amp;edge, double speed, double angle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerInet.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScenarioManagerInet_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallPreInitialize</name>
      <anchorfile>TraCIScenarioManagerInet_8h.html</anchorfile>
      <anchor>a837d0aa832e73eca6f2ba8c992c919a5</anchor>
      <arglist>(cModule *mod, const std::string &amp;nodeId, const Coord &amp;position, const std::string &amp;road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallNextPosition</name>
      <anchorfile>TraCIScenarioManagerInet_8h.html</anchorfile>
      <anchor>a5049232949eb3445301bc999967c4057</anchor>
      <arglist>(cModule *mod, const Coord &amp;p, const std::string &amp;edge, double speed, double angle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerLaunchd.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScenarioManagerLaunchd_8cc</filename>
    <includes id="TraCIScenarioManagerLaunchd_8h" name="TraCIScenarioManagerLaunchd.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="TraCIConstants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>TraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>acd42c64604c9797d6697cdbd75377eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>TraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCIScenarioManagerLaunchd_8cc.html</anchorfile>
      <anchor>a6eacbf5f08621d86b8f8b34ad5d7f9df</anchor>
      <arglist>(Veins::TraCIScenarioManagerLaunchd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerLaunchd.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScenarioManagerLaunchd_8h</filename>
    <includes id="TraCIScenarioManager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <class kind="class">Veins::TraCIScenarioManagerLaunchd</class>
    <class kind="class">Veins::TraCIScenarioManagerLaunchdAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScreenRecorder.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScreenRecorder_8cc</filename>
    <includes id="TraCIScreenRecorder_8h" name="TraCIScreenRecorder.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScreenRecorder.h</includes>
    <includes id="TraCIScenarioManager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCIScreenRecorder_8cc.html</anchorfile>
      <anchor>a1447c8d81a52a5ee0d1fdb2964fc8486</anchor>
      <arglist>(Veins::TraCIScreenRecorder)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScreenRecorder.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>TraCIScreenRecorder_8h</filename>
    <class kind="class">Veins::TraCIScreenRecorder</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCITestApp.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>TraCITestApp_8cc</filename>
    <includes id="asserts_8h" name="asserts.h" local="yes" imported="no">veins/base/utils/asserts.h</includes>
    <includes id="TraCITestApp_8h" name="TraCITestApp.h" local="yes" imported="no">veins/modules/application/traci/TraCITestApp.h</includes>
    <includes id="TraCIColor_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraCITestApp_8cc.html</anchorfile>
      <anchor>a204163ae55278a8583c7ef492ceacbf5</anchor>
      <arglist>(Veins::TraCITestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCITestApp.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>TraCITestApp_8h</filename>
    <includes id="BaseApplLayer_8h" name="BaseApplLayer.h" local="yes" imported="no">veins/base/modules/BaseApplLayer.h</includes>
    <includes id="TraCIMobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="TraCICommandInterface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">Veins::TraCITestApp</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TwoRayInterferenceModel.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>TwoRayInterferenceModel_8cc</filename>
    <includes id="TwoRayInterferenceModel_8h" name="TwoRayInterferenceModel.h" local="yes" imported="no">veins/modules/analogueModel/TwoRayInterferenceModel.h</includes>
    <includes id="AirFrame__m_8h" name="AirFrame_m.h" local="yes" imported="no">veins/base/messages/AirFrame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>TwoRayInterferenceModel_8cc.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TwoRayInterferenceModel.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>TwoRayInterferenceModel_8h</filename>
    <includes id="AnalogueModel_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="BaseWorldUtility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="MappingBase_8h" name="MappingBase.h" local="yes" imported="no">veins/base/phyLayer/MappingBase.h</includes>
    <class kind="class">TwoRayInterferenceModel</class>
    <class kind="class">TwoRayInterferenceModel::Mapping</class>
  </compound>
  <compound kind="file">
    <name>Vanet_ControlInfoBreakLink_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>Vanet__ControlInfoBreakLink__m_8h</filename>
    <class kind="class">Vanet_ControlInfoBreakLink</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Vanet__ControlInfoBreakLink__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vanet__ControlInfoBreakLink__m_8h.html</anchorfile>
      <anchor>a32849dcdb68b72ced82045bd8ffc8d45</anchor>
      <arglist>(cCommBuffer *b, Vanet_ControlInfoBreakLink &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vanet__ControlInfoBreakLink__m_8h.html</anchorfile>
      <anchor>a3c3d116f5f41924449a8dd2c745bdaf4</anchor>
      <arglist>(cCommBuffer *b, Vanet_ControlInfoBreakLink &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vanet_LocatorNotificationInfo_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>Vanet__LocatorNotificationInfo__m_8h</filename>
    <class kind="class">Vanet_LocatorNotificationInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Vanet__LocatorNotificationInfo__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vanet__LocatorNotificationInfo__m_8h.html</anchorfile>
      <anchor>a8794c152744a08f94e199822e40c820b</anchor>
      <arglist>(cCommBuffer *b, Vanet_LocatorNotificationInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vanet__LocatorNotificationInfo__m_8h.html</anchorfile>
      <anchor>a15d70218e9fbe28aa178fde341902987</anchor>
      <arglist>(cCommBuffer *b, Vanet_LocatorNotificationInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vanet_MeshControlInfo_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>Vanet__MeshControlInfo__m_8h</filename>
    <class kind="class">MeshControlInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Vanet__MeshControlInfo__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vanet__MeshControlInfo__m_8h.html</anchorfile>
      <anchor>a18b893e9a1c8b005343c16b5f3263586</anchor>
      <arglist>(cCommBuffer *b, MeshControlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vanet__MeshControlInfo__m_8h.html</anchorfile>
      <anchor>a349d0948793017e0e9dea95027d2a442</anchor>
      <arglist>(cCommBuffer *b, MeshControlInfo &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VanetAddress.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetAddress_8cc</filename>
    <includes id="VanetAddress_8h" name="VanetAddress.h" local="yes" imported="no">VanetAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>VanetAddress.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetAddress_8h</filename>
    <class kind="class">VanetAddress</class>
    <class kind="class">VanetNetworkAddress</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>VanetAddress_8h.html</anchorfile>
      <anchor>a485e903ed28c20990892f5a3ee2b1383</anchor>
      <arglist>(std::ostream &amp;os, const VanetAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>VanetAddress_8h.html</anchorfile>
      <anchor>a9a5c0b04da00715923cb727b6293686a</anchor>
      <arglist>(std::ostream &amp;os, const VanetNetworkAddress &amp;addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VANETMobilityAccess.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>VANETMobilityAccess_8cc</filename>
    <includes id="VANETMobilityAccess_8h" name="VANETMobilityAccess.h" local="yes" imported="no">VANETMobilityAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>VANETMobilityAccess.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>VANETMobilityAccess_8h</filename>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="IVANETMobility_8h" name="IVANETMobility.h" local="yes" imported="no">IVANETMobility.h</includes>
    <class kind="class">VANETMobilityAccess</class>
  </compound>
  <compound kind="file">
    <name>VANETMobilityBase.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>VANETMobilityBase_8cc</filename>
    <includes id="VANETMobilityBase_8h" name="VANETMobilityBase.h" local="yes" imported="no">VANETMobilityBase.h</includes>
    <includes id="FWMath_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Abstract_Class</name>
      <anchorfile>VANETMobilityBase_8cc.html</anchorfile>
      <anchor>aaab3cb0e1711dec28f79279f347a62ed</anchor>
      <arglist>(VANETMobilityBase)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VANETMobilityBase.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>VANETMobilityBase_8h</filename>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="IVANETMobility_8h" name="IVANETMobility.h" local="yes" imported="no">IVANETMobility.h</includes>
    <class kind="class">VANETMobilityBase</class>
  </compound>
  <compound kind="file">
    <name>VanetModuleAccess.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetModuleAccess_8cc</filename>
    <includes id="VanetModuleAccess_8h" name="VanetModuleAccess.h" local="yes" imported="no">VanetModuleAccess.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>_isNetworkNode</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>a8c6734b471e24a302c7ab9e105e838c3</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNetworkNode</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>aab7abb7590c0e163f3953e8e222955af</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWherever</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>a1acd07224acd83418500c6607f5ab952</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWhereverInNode</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>a637753c69f461388c683b5ef8c4becf9</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleSomewhereUp</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>a59ac1b91d8937524b41563fd5ec15efb</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findContainingNode</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>a05eb8740c0b600bfb259b3bc7806ac9c</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContainingNode</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>ae742661272edb2bddaecae9f1421489d</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleUnderContainingNode</name>
      <anchorfile>VanetModuleAccess_8cc.html</anchorfile>
      <anchor>a6052b421b266b84ad8a046b3954db7aa</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VanetModuleAccess.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetModuleAccess_8h</filename>
    <class kind="class">VanetModuleAccess</class>
    <member kind="function">
      <type>bool</type>
      <name>isNetworkNode</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>aab7abb7590c0e163f3953e8e222955af</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWherever</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>a1acd07224acd83418500c6607f5ab952</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWhereverInNode</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>a637753c69f461388c683b5ef8c4becf9</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleSomewhereUp</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>a59ac1b91d8937524b41563fd5ec15efb</anchor>
      <arglist>(const char *name, cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findContainingNode</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>a05eb8740c0b600bfb259b3bc7806ac9c</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContainingNode</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>ae742661272edb2bddaecae9f1421489d</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleUnderContainingNode</name>
      <anchorfile>VanetModuleAccess_8h.html</anchorfile>
      <anchor>a6052b421b266b84ad8a046b3954db7aa</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VanetNetfilterHook.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetNetfilterHook_8cc</filename>
    <includes id="VanetNetfilterHook_8h" name="VanetNetfilterHook.h" local="yes" imported="no">VanetNetfilterHook.h</includes>
    <includes id="ControlVanetRouting__m_8h" name="ControlVanetRouting_m.h" local="yes" imported="no">ControlVanetRouting_m.h</includes>
  </compound>
  <compound kind="file">
    <name>VanetNetfilterHook.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetNetfilterHook_8h</filename>
    <class kind="class">VanetNetfilterHook</class>
  </compound>
  <compound kind="file">
    <name>VanetRoutingBase.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetRoutingBase_8cc</filename>
    <includes id="VanetRoutingBase_8h" name="VanetRoutingBase.h" local="yes" imported="no">VanetRoutingBase.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="Vanet__ControlInfoBreakLink__m_8h" name="Vanet_ControlInfoBreakLink_m.h" local="yes" imported="no">Vanet_ControlInfoBreakLink_m.h</includes>
    <includes id="GlobalWirelessLinkInspector__Vanet_8h" name="GlobalWirelessLinkInspector_Vanet.h" local="yes" imported="no">GlobalWirelessLinkInspector_Vanet.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IP_DEF_TTL</name>
      <anchorfile>VanetRoutingBase_8cc.html</anchorfile>
      <anchor>a40a8b1505c0e570282488bc4561df61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDP_HDR_LEN</name>
      <anchorfile>VanetRoutingBase_8cc.html</anchorfile>
      <anchor>a4e1d4437ed494b8b2d172764b9a18f5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VanetRoutingBase.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>VanetRoutingBase_8h</filename>
    <includes id="compatibility__vanet_8h" name="compatibility_vanet.h" local="yes" imported="no">compatibility_vanet.h</includes>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="VanetAddress_8h" name="VanetAddress.h" local="yes" imported="no">VanetAddress.h</includes>
    <includes id="VanetNetfilterHook_8h" name="VanetNetfilterHook.h" local="yes" imported="no">VanetNetfilterHook.h</includes>
    <class kind="class">VanetTimer</class>
    <class kind="class">VanetRoutingBase</class>
    <class kind="class">VanetRoutingBase::ProtocolRoutingData</class>
    <class kind="struct">VanetRoutingBase::InterfaceIdentification</class>
    <class kind="struct">VanetRoutingBase::VanetProxyAddress</class>
    <member kind="define">
      <type>#define</type>
      <name>interface80211ptr</name>
      <anchorfile>VanetRoutingBase_8h.html</anchorfile>
      <anchor>add4cad668061121fca5e32d6bd93b963</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; simtime_t, VanetTimer * &gt;</type>
      <name>TimerMultiMap</name>
      <anchorfile>VanetRoutingBase_8h.html</anchorfile>
      <anchor>a09a70a5f8b454df474e2da94d0745d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; VanetAddress &gt;</type>
      <name>AddressGroup</name>
      <anchorfile>VanetRoutingBase_8h.html</anchorfile>
      <anchor>a31684fe571f5fe83f30d41c4b012b0cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; VanetAddress &gt;::iterator</type>
      <name>AddressGroupIterator</name>
      <anchorfile>VanetRoutingBase_8h.html</anchorfile>
      <anchor>a65f8e9b4e9b27cc47b4d623a79e54b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; VanetAddress &gt;::const_iterator</type>
      <name>AddressGroupConstIterator</name>
      <anchorfile>VanetRoutingBase_8h.html</anchorfile>
      <anchor>addd2b40c0d98d290b053d8e16e5a8f0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vanetTraCIColor.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>vanetTraCIColor_8cc</filename>
    <includes id="vanetTraCIColor_8h" name="vanetTraCIColor.h" local="yes" imported="no">vanetTraCIColor.h</includes>
  </compound>
  <compound kind="file">
    <name>vanetTraCIColor.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>vanetTraCIColor_8h</filename>
    <class kind="class">vanetTraCIColor</class>
  </compound>
  <compound kind="file">
    <name>WaveAppToMac1609_4Interface.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mac/ieee80211p/</path>
    <filename>WaveAppToMac1609__4Interface_8h</filename>
    <includes id="NetwToMacControlInfo_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">veins/base/utils/NetwToMacControlInfo.h</includes>
    <includes id="Consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <class kind="class">WaveAppToMac1609_4Interface</class>
  </compound>
  <compound kind="file">
    <name>WaveShortMessage_m.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/messages/</path>
    <filename>WaveShortMessage__m_8h</filename>
    <includes id="Coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">WaveShortMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>WaveShortMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>WaveShortMessage__m_8h.html</anchorfile>
      <anchor>ae74b14e21ab85bdfeeca766a8ce81a74</anchor>
      <arglist>(cCommBuffer *b, WaveShortMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>WaveShortMessage__m_8h.html</anchorfile>
      <anchor>a6cbe959450c1c1aaa3a979594bfe7d49</anchor>
      <arglist>(cCommBuffer *b, WaveShortMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>winsupport.cc</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>winsupport_8cc</filename>
    <includes id="winsupport_8h" name="winsupport.h" local="yes" imported="no">veins/base/utils/winsupport.h</includes>
  </compound>
  <compound kind="file">
    <name>winsupport.h</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>winsupport_8h</filename>
  </compound>
  <compound kind="class">
    <name>AccessModuleWrap</name>
    <filename>classAccessModuleWrap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>wrapType</name>
      <anchorfile>classAccessModuleWrap.html</anchorfile>
      <anchor>a6526ebf12a047ec5a36bd316106289b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccessModuleWrap</name>
      <anchorfile>classAccessModuleWrap.html</anchorfile>
      <anchor>a3b420065b43d5504addd73e2dda15068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *const</type>
      <name>get</name>
      <anchorfile>classAccessModuleWrap.html</anchorfile>
      <anchor>aabe6dcb792c40ce4c77b2f194aadbe5f</anchor>
      <arglist>(cModule *const from=NULL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>pModule</name>
      <anchorfile>classAccessModuleWrap.html</anchorfile>
      <anchor>a385653cd58a20af54c6938f5c66d9a40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AddressingInterface</name>
    <filename>classAddressingInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>classAddressingInterface.html</anchorfile>
      <anchor>a7d81614e8dea6e3a7316184e6b9e959c</anchor>
      <arglist>(const cModule *mac) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>classAddressingInterface.html</anchorfile>
      <anchor>a3f4172beef51056ebc815246b6c9d651</anchor>
      <arglist>(const cModule *netw) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AirFrame11p</name>
    <filename>classAirFrame11p.html</filename>
    <base>Veins::AirFrame</base>
    <member kind="function">
      <type></type>
      <name>AirFrame11p</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a7f35dba37995cdb2fb5b0f380b9e445e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame11p</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a2b3e68356c5dcf9538a1cf5fa42457db</anchor>
      <arglist>(const AirFrame11p &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AirFrame11p</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>ab50da7666fe019f06bec4801bd864cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AirFrame11p &amp;</type>
      <name>operator=</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a9f63926aabf4ca26d7a253da273a0693</anchor>
      <arglist>(const AirFrame11p &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AirFrame11p *</type>
      <name>dup</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a042810dd386765917473bf9b9572a483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a053a61df242466fb76f8fb3e66661615</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>acf108af30c840181cb327fc7db85fb36</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getUnderSensitivity</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>ae9af854b9c8237077618f82a3db6be54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnderSensitivity</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>ad9c2571b011c2b081ad1689218f0d0ac</anchor>
      <arglist>(bool underSensitivity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWasTransmitting</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a8d2568edd1c3308580ce581d64a14951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWasTransmitting</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>aa00aa01ba7302cd1078a5a51f6bc5cb5</anchor>
      <arglist>(bool wasTransmitting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>aead118aef0272bc72d772a346ef216ea</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a02b5d1dc99b7fcf3686b25c965d4d770</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AirFrame</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a01bda7e9448c181df0b87b2aa6c59cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AirFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>af1ec37559d035b9b870009724628255a</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Signal &amp;</type>
      <name>getSignal</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a50cfde43def85076f0ba2e9ad16d18a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Signal &amp;</type>
      <name>getSignal</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>ae37b5e2dd134dc2c810612a778beb20d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSignal</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a49085838ee8057aa8532249b7c2dc3f4</anchor>
      <arglist>(const Signal &amp;signal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a713e5d23b4ccb3d89d29468ff1dd7b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>afc8977ce81a1b732d504db463273cb1a</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getState</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a7786f03f21fc3e7cf683a9636d25f109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a82332ad0dc0819fe138cdc49204d1743</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a93fd575a93cc8bb692c6c92784208ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a0fb208736c55183a306f9f446798a683</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getId</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>abac89b81d2c1fdce7f64bd6c91811032</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>afc9fad9abb1e40cb558d3a1df40481ad</anchor>
      <arglist>(long id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProtocolId</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a550f3534098413c07fc54c73104e05c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocolId</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a26fa4bd47eb08854f694220a6d719d2c</anchor>
      <arglist>(int protocolId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannel</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a8a404bb88f599e41eda2e965d6e39866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannel</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>ac5cee514e9249028a4ba35f6a8255379</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>af22a1142529951461e8ed5f5318d8a5f</anchor>
      <arglist>(const AirFrame11p &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a69109d3b4c81745b4b1c38dea670704f</anchor>
      <arglist>(const AirFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>underSensitivity_var</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>ab95fd64b3946bb61542d5f5d879af776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>wasTransmitting_var</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a8b073d735fff5b53d31b829097079b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal</type>
      <name>signal_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>ab1716ce0e24eaa8eb4ca13e7985215e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a05af12909106987b17121764e2fd08b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a78f69395e9da4bba43803fb40a8175b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a3ac85154d2abdef79dceb96c95a6d5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>id_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>aad208a6693e37833b0abadb7931c4de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocolId_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>aa2d2317a0bfed95d2a3144f92b27dc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channel_var</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>aec135269933b47564b88ebea1944c33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAirFrame11p.html</anchorfile>
      <anchor>a50a72f449f996cade0d4625823cc34c5</anchor>
      <arglist>(const AirFrame11p &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnalogueModel</name>
    <filename>classAnalogueModel.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalogueModel</name>
      <anchorfile>classAnalogueModel.html</anchorfile>
      <anchor>ad67dc10e9889eb66fe7515280a00c97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classAnalogueModel.html</anchorfile>
      <anchor>ad522c654f6e2184cbb7d03fde72a1eb9</anchor>
      <arglist>(AirFrame *frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCI</name>
    <filename>classaodvTraCI.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>aedff161869ae3feb4764f228ff3642a1</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>ad18de877ddcfcd2b66c0d367b4f2be67</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a3f148afb94348dd5e48f9a1c2d379643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>ae303294c271dcc6517071fd129805774</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a735ad614e99cf12b8d1120606f2104ea</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupLowerLayer</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>ac4722b21d120e5034c85d0df012cf714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>ac2b7acbf7bab15dd165c011421700a1b</anchor>
      <arglist>(cMessage *apMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a0e5898aea7cc3afa184a36e7ff9e147a</anchor>
      <arglist>(cMessage *apMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMessage</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>ac456f13a9bf4ab9aefeca6d875ddaca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a072b8e36a844be426c28d2b5effd81f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>aea3020d07e819bb3b5979c85272278ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a4bad82da04450fb6208663244ee7b522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>socket</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a91a9da2858acc89abc259fde1e33d4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classaodvTraCI.html</anchorfile>
      <anchor>a9d72489f29fbf68f3a7fd8c4469d9473</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIMobility</name>
    <filename>classaodvTraCIMobility.html</filename>
    <base>VANETMobilityBase</base>
    <class kind="class">aodvTraCIMobility::Statistics</class>
    <member kind="function">
      <type></type>
      <name>aodvTraCIMobility</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a1c1de2d99555e6b102dac120ae29d745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ad5c5d3c6148635831909abc501a2c0f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a3472225c15d01bf0677f7b8c7c4aa0b8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialPosition</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>aadf7f3fce5a8b7974a23953c2ccc2e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a9d2f9ec0a7a81e3b77c68d872a9e6862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a3ea74b5351763043e73eabaa580ed03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>aca5a853bc355c8aca41793a10305ea94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAcceleration</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a511ce8d8df0db5c9f683e33d0b8db4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAngularPosition</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a085427ca538988d14660078e6cb8d3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a47aa9b4088c37dc136f36f3dc0d9d392</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a8538cabed9e8ad49a32acfd49ede4576</anchor>
      <arglist>(std::string external_id, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double acceleration=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextPosition</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a646386739961c12db26a76cb47ece377</anchor>
      <arglist>(const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1, double acceleration=-1, aodvTraCIScenarioManager::VehicleSignal signals=aodvTraCIScenarioManager::VEH_SIGNAL_UNDEF)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>acf2ae84a5e786d953208903b5d699b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a58d9b6d70671171e46053ce8c9c24ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a5e6d3cd661d376622626daace8a62239</anchor>
      <arglist>(std::string external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a30dac79e408fab68bda4bd39b559597d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPosition</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a46c0ff83fe9ce2ad06dc92fc28ced438</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRoadId</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a48626a1e627774df21939275ce836e62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a8e38f0910683ffcac96795bba5e35944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAcceleration</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a0686f8367238d47e30e05148305505d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIScenarioManager::VehicleSignal</type>
      <name>getSignals</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a8e8297ebcc9a4f61b13f2f0c7fdcd2bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAngleRad</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ac782369bfa4d3aa5682bbc2757a1cd1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ab952d7a0620e1dd3f4c77c97b11ef255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a8766d68959c811d8d09e1fe6f4da9588</anchor>
      <arglist>(int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a8f7f4401c28e89b2dc62f7c9c69b1de4</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a81a51865f82dc205caf83baefc7b0e7b</anchor>
      <arglist>(std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ad9cf3b83361c3ac9ec608713084bf986</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandParkVehicle</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a98de97493bb74448ecf4a1e2476ff786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a91025c39fad1ec171f289dd4c7beda73</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a4841b289a85f06f165095d1dbd3b42cc</anchor>
      <arglist>(std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ae1c61ed5d530ed9583c02e21a02329de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a092ee4251b3c05bde8afbe209afd262d</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ae9a7e52975b8ae27c17382b08a04647f</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a43458178f37e48ac1ca280c90158747a</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a57444fabde73ef341bfffdd0765a7531</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-aodvTraCIScenarioManager::DEPART_NOW, double emitPosition=-aodvTraCIScenarioManager::DEPART_POS_BASE, double emitSpeed=-aodvTraCIScenarioManager::DEPART_SPEED_MAX, int8_t emitLane=-aodvTraCIScenarioManager::DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IVANETMobility</name>
      <anchorfile>classIVANETMobility.html</anchorfile>
      <anchor>a55c0f0d590faa060a10c00ed6056d20c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a5f23c0a9cd12a5712848ae6f2e943292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>aba3bab79ddb1dc7eb474d2e150db1724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VANETMobilityBase</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a8efadeb1c28f0d85962e2468c0f5ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a87d43ad63018b9d7ed9c3ac5d0eaca5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkPosition</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>acd3890dbe9213ab313056b11fd7608d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a85d712cd9bab2be5f8831c27bfbabb0a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateVisualRepresentation</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>afe9e91548f6e6b9c3cd53df7caf7b519</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>emitMobilityStateChangedSignal</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a430b25b989fc7c890a12ffe6dacbfe3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>af21965c9540a49d3e18cb2c5e1dc9172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>findVisualRepresentation</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a2d653f538b2aa92e3d780947bf23fe41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOutside</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a40fb6079e2cccb31c9e7933b0d31bbfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reflectIfOutside</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a5f438e2c50567fefda1ef2f4e051bc5e</anchor>
      <arglist>(Coord &amp;targetPosition, Coord &amp;speed, double &amp;angle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>wrapIfOutside</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a78a0c28244a1b9c7f1671f486c21b70a</anchor>
      <arglist>(Coord &amp;targetPosition)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a5c614b06ae29b20262fc246ba8ad9da3</anchor>
      <arglist>(Coord &amp;targetPosition)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseErrorIfOutside</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a4d815e0001fc15d5d8801180139568e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleIfOutside</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a48f7c5d0745363b3953db625de15cbd3</anchor>
      <arglist>(BorderPolicy policy, Coord &amp;targetPosition, Coord &amp;speed, double &amp;angle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>accidentCount</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>af23236dd6ba381df59114ea63d584227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosXVec</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>af33f050273f55f2c2e3af05126b9b82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosYVec</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a2f26e88636429492bb57a70687d907d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentSpeedVec</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a15e0d54ad1a3c7d028f9fed986216755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentAccelerationVec</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a05bc6eca62bc8aa9a5c42629c168d341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Statistics</type>
      <name>statistics</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>af630fd0ba65a3cd4c7501647b492e293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a44a25f54347a64fa767cd9d1ebeeccee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a9ee8cb9b93b5a796f184b923c8dad49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ad6efb58f1eaf87c255986e570bd07da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>nextPos</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a75695413addcc2648a90d001d764a038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>road_id</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a483e1fc4c12775d3492e178543acae06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>af70b7c5a628aaec20ecd1dfa9458c8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a5da2fd1696947f6fe85a9dacfa1443ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>af8268ba4f3070ca61fe0ed43402215af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCIScenarioManager::VehicleSignal</type>
      <name>signals</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a3696b1662f116e12458fc267110197c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startAccidentMsg</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>af6447e831abf072baadb588048485197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopAccidentMsg</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>ae13a08ee0fe1c5352927d09a619a1721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a9cb097f2e10bad10c3e8780d1ada1826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>last_speed</name>
      <anchorfile>classaodvTraCIMobility.html</anchorfile>
      <anchor>a4294e7bba219c2275ab3245b6d8a342c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>visualRepresentation</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a8d64c8426cd2dcf52b0fe0a5eb8cecba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>constraintAreaMin</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a6d0bf1396f6d96f0ce58afe5b82236a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>constraintAreaMax</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a8a43343e76c0a87a5400fb98b8284e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastPosition</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a6c63863584f153711bc440c9c66031f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BorderPolicy</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a84541509fddd7f21238ddca31b11c601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REFLECT</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a84541509fddd7f21238ddca31b11c601a9682c960e16510efd8b18fcc22ba490c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WRAP</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a84541509fddd7f21238ddca31b11c601ae8fd9d27d3768dea9e797b0872fefdaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PLACERANDOMLY</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a84541509fddd7f21238ddca31b11c601ae32c4a1f518cc46ac0f56837d2bcdaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RAISEERROR</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a84541509fddd7f21238ddca31b11c601a584b97a08c46f0cb2083c120dc972469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Coord</type>
      <name>getMinimTopLeft</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>ab8715d28d32f6053b1c41bc8754a1803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Coord</type>
      <name>getMaximumRightBotton</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a81ae5fca23a8c09c8cbf6457d6a6b9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static simsignal_t</type>
      <name>vanetMobilityStateChangedSignal</name>
      <anchorfile>classIVANETMobility.html</anchorfile>
      <anchor>ac2469661b9243ace1338e60e1d567489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Coord</type>
      <name>mininumArea</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>ac61f6941cd665d322761e277519d525f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Coord</type>
      <name>maximumArea</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a7c9951f5cb8daf9f3c74c349e2f7e7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>areaInitalized</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a19d6b21f26fbf8b2c18c83df2c94892e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIMobility::Statistics</name>
    <filename>classaodvTraCIMobility_1_1Statistics.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>af6d1166554f93ef3b261e0546d4ea1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a1801c54f5f36dc4cd7bccecfa7df0c98</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalars</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>aeb0333767bc40f79358edd19379a827e</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>firstRoadNumber</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a2f59d66222061b9447ef2ab1f17efe0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a7fa2126fbba6174d0b085d0c70308ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>totalTime</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a347a9f3420de99f30bc6f348d58c21f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a0a26c0710e9df7aa975c7704c0356a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a5b25093e61f32c9c1f6265e9664127f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a980ce88e77c9b42a1e9221bee40fabc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDistance</name>
      <anchorfile>classaodvTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>acd134720db9cb5636d7655485bc57d39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIMobilityAccess</name>
    <filename>classaodvTraCIMobilityAccess.html</filename>
    <base>VanetModuleAccess&lt; aodvTraCIMobility &gt;</base>
    <member kind="function">
      <type></type>
      <name>aodvTraCIMobilityAccess</name>
      <anchorfile>classaodvTraCIMobilityAccess.html</anchorfile>
      <anchor>aad703e2acd2c8b7bc9fbd8b0dd91efc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIScenarioManager</name>
    <filename>classaodvTraCIScenarioManager.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">aodvTraCIScenarioManager::aodvTraCIBuffer</class>
    <class kind="struct">aodvTraCIScenarioManager::aodvTraCICoord</class>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_UNDEF</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a27a13a3cc4da7e571099d95cdb095b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_NONE</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a056e659e20fca1da10bb488f395d1edf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_RIGHT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a07d6b5c4e2aa3010ef58e59ee1d7fa9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_LEFT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2af5bb5cdd7bc628fd85671effdd257bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_EMERGENCY</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a54113a619126785ac7ab8a123b0ef685</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BRAKELIGHT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a7dfcce7779cf28b930eb16e16e04734a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FRONTLIGHT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a9a2376aca51479707906571793463e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FOGLIGHT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2afc7208e5b7765e3f485588baf9fcbabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_HIGHBEAM</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a64331a621aadd036ea79f6e12cd1272b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BACKDRIVE</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2ac0b1b651247e00c0551258b26f82f214</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_WIPER</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a7361688d9105dc351dad66544fd18171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_LEFT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a320f49d0480402b0d3b3a975c17408dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_RIGHT</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a19961adc9f3e5077ea9c4d376384a7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_BLUE</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2abb121bc0d20da989682726159b68fdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_RED</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2ac8a020375ffbe38cef497d9b24c4a347</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_YELLOW</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a952cd0aded2b30b118ced2dc871ec8b2a15d5cd0fba6048ed5bcf08f25dc62476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DepartDefs</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a23f1d2c1c16e52a6c4003a167c314785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_NOW</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a23f1d2c1c16e52a6c4003a167c314785ac99717fefd526298464b45f990bc3169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_LANE_BEST_FREE</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a23f1d2c1c16e52a6c4003a167c314785a3d75ca6852bafa8752d388e5594067ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_POS_BASE</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a23f1d2c1c16e52a6c4003a167c314785a985ee416cb6af90b21e1bf1502c3a6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a23f1d2c1c16e52a6c4003a167c314785a9776784b89e0c4cd0b2295b3dbb75ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~aodvTraCIScenarioManager</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a3908def56eaf0b7a2ba17580ba7b76a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a9cb5a4c8f648ea3d12d8aa10544eac40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a7a5c58c7c67833bee0bd3f63c8ca4f14</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a42e785914c1dd0d429059bd888db8c75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a32a7c94b6c71a330e10dcf6ac2a3a7e3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a39fb48851d1c4aa97aed1804787a4008</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a34aeb27495048feb3fd89ec59ede0a82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; uint32_t, std::string &gt;</type>
      <name>commandGetVersion</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a9f140ded556fec982accf9524b5a3128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ab1c016837b0cff17c8d0afbf76b4d00c</anchor>
      <arglist>(std::string nodeId, int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a9f48c1bd5d8c3521b2695a2aac0ce5c1</anchor>
      <arglist>(std::string nodeId, double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a7a5c81ba8dbdbda68c69b37534ea3333</anchor>
      <arglist>(std::string nodeId, std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetVehicleParking</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a0e87f7f25b7daefa3b16ef8db2136df8</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetEdgeId</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aa232d4aaaab02af23c5c2b4d83301e88</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetCurrentEdgeOnRoute</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a212223d315d2e8ccd344b9e3c049828e</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneId</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>acaf066c75618e8340b21076389b9ca10</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLanePosition</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aec6c0f2c9fd738e462cbe2040592cea3</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPlannedEdgeIds</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a595de439315db661aae36019cc5ecec2</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetRouteId</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a2dcbb134115f9f7b91b15862102f8f47</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetRouteEdgeIds</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a51c3872a8ecf3196a3073f9e63e54841</anchor>
      <arglist>(std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>af769bb6d4b1c6aa4437fec357078fbfb</anchor>
      <arglist>(std::string nodeId, std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ad38c88db51d4242ab279088e41e3ab8b</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a921d75ac3db9adc01974641c9d6798e7</anchor>
      <arglist>(std::string nodeId, std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetTrafficLightProgram</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ade2312ed73e683cd90e84e4118ea2a15</anchor>
      <arglist>(std::string trafficLightId, std::string program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetTrafficLightPhaseIndex</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a302ef7c8f1f68198e8533b3d66aa7223</anchor>
      <arglist>(std::string trafficLightId, int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a8d286b029b0677c53d67c5a6115230f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a3fbaa6fe2be22f1c55f5c2dd6eff0eac</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a2700a9516f3afa418ccad70dcabeea2f</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a58db7e0d803ffbe302d411509737079d</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandAddPolygon</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a7dfba8b4332e0d11b65bdaf1bfb88011</anchor>
      <arglist>(std::string polyId, std::string polyType, const vanetTraCIColor &amp;color, bool filled, int32_t layer, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandRemovePolygon</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a145a7915a62c9816ba9a00b5094fb422</anchor>
      <arglist>(std::string polyId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandAddPoi</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a9f84561c8d4cfaf611c16c9a20153130</anchor>
      <arglist>(std::string poiId, std::string poiType, const vanetTraCIColor &amp;color, int32_t layer, Coord pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandRemovePoi</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ae641f017b9e688241ca358def1340e89</anchor>
      <arglist>(std::string poiId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetLaneIds</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a39b2acefa4f81d00447a051cc357e692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetLaneShape</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a1160aefe20d4d82fd605e8e51e7a4aec</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneEdgeId</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a99b32edd664a2aedc86ea6b7988fc118</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneLength</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ab52951c4bcbef4579f82695dc5b6ad7b</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneMaxSpeed</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ad9fbf56a1fa713d0b332b79a8e9e544a</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneMeanSpeed</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>abfdb1ac62e2df3d41a0bf47bb968341c</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetJunctionIds</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a91e0de75bdb0c14973c81900ba0b705d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>commandGetJunctionPosition</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a0dd2d2a21de5f1df658a7556ae60bd91</anchor>
      <arglist>(std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>acf281daae584ea3302632edbaa3f3980</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-DEPART_NOW, double emitPosition=-DEPART_POS_BASE, double emitSpeed=-DEPART_SPEED_MAX, int8_t emitLane=-DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, cModule * &gt; &amp;</type>
      <name>getManagedHosts</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a44b4109090f516237f633e70536eaa04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>getCurrentTimeMs</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a1d2ba2095df7ade1e62d3d5ca295044c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeOneTimestep</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a2b9270f0141f4bb3ed814455bf56c443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aa8e09133c8db133a58f067dd1ba114a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a3c23b3904e5b49669c91d6a8e46eea41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addModule</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a6bf2c521b6c09e763906f00a99a84e34</anchor>
      <arglist>(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double acceleration=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getManagedModule</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aa4407f657c9ec605f24834009a7cc3ec</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteModule</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a444cfb90208cc379b6b459114e9de8d6</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isModuleUnequipped</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a93ecb2ee97505614a1bafd1d014cbd50</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInRegionOfInterest</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aa66f8025663e41029a3c018666081234</anchor>
      <arglist>(const aodvTraCICoord &amp;position, std::string road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aodvTraCIBuffer</type>
      <name>queryaodvTraCI</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ad481243cebdf4ec078be0a45b707e065</anchor>
      <arglist>(uint8_t commandId, const aodvTraCIBuffer &amp;buf=aodvTraCIBuffer())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aodvTraCIScenarioManager::aodvTraCIBuffer</type>
      <name>queryaodvTraCIOptional</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ad2e2969fa1a929ac4e3daf9e31422706</anchor>
      <arglist>(uint8_t commandId, const aodvTraCIBuffer &amp;buf, bool &amp;success, std::string *errorMsg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>makeaodvTraCICommand</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a5bbbc69c5162c1160ccb938125b3be8a</anchor>
      <arglist>(uint8_t commandId, aodvTraCIBuffer buf=aodvTraCIBuffer())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendaodvTraCIMessage</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ad254be9ae0481241cad9ea93d592db3d</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>receiveaodvTraCIMessage</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a01e1edc2d78d2db2008810d7aebb6e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>genericGetString</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>abecaee0009e8d92084d48b9a53c10c27</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>genericGetCoord</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ad29b7b7055ed913f0b8b08d5dbcd0814</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>genericGetDouble</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aceb7cb08464b1510659fa4b0f3afb705</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>genericGetStringList</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a0cd6c11f9e2489f79cd75031cfacae27</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Coord &gt;</type>
      <name>genericGetCoordList</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a16ea156fc5e5bdc1b91656f9b4eba1b3</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>aodvTraCI2omnet</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a655877b19ec1a7e3e42faa7becffe363</anchor>
      <arglist>(aodvTraCICoord coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>aodvTraCICoord</type>
      <name>omnet2aodvTraCI</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ada3be078dfcc5fc6e60f737248b4b045</anchor>
      <arglist>(Coord coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>aodvTraCI2omnetAngle</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a5b93fd178f5b02371c614c123f093086</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>omnet2aodvTraCIAngle</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ae9f20e4cf9c1fee6e0298576d1774538</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToVehicleVariables</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ac0678af11ac221f6ac0e7fba51adc73c</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromVehicleVariables</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a77d678fbffd2cc0e509d2aae4758a0f3</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSimSubscription</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>af02aa4bcb8a998344a518f5bf964bcab</anchor>
      <arglist>(std::string objectId, aodvTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processVehicleSubscription</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>afcfc546577034f3ca08de3d57c3a8ab7</anchor>
      <arglist>(std::string objectId, aodvTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSubcriptionResult</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a611d9a89cbdd314c8f07a9daac36b612</anchor>
      <arglist>(aodvTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aee95259d734153676e0425ab2d4626e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>connectAt</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a69362ea6a20c75ec8df8d6c2860421a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstStepAt</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a3d2f144cac2551c9513c020dfd302958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>add7bae43d471a9c41e93a806ae4ab89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleType</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a0025f8f5e3ef687bcd715f9fd4af5c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleName</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ac008f95189959369de538eb191674311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleDisplayString</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ac0e3fc93d8d0bfe3be1c228fa6756960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a1433a5be2263ea5acc4285da8626c90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aeb5aca20edac38b2def2bf35f38eb579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdown</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a5977b8a735d1b935d6a1b7d46c5f89b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>margin</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a164fe91697d77d3fcf61851c1d18e90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>penetrationRate</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ae618777a00c6c984e8218c37dbe63e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>roiRoads</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>ac393e6e62e59c333c3213a4ad7905610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::pair&lt; aodvTraCICoord, aodvTraCICoord &gt; &gt;</type>
      <name>roiRects</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a0211ce28bf3a7362b05b29affd91af98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>socketPtr</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aa72940bcca51c4bb3300fa740b2101ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCICoord</type>
      <name>netbounds1</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>abaee282035c7ee23b94616ff9ffc4e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCICoord</type>
      <name>netbounds2</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a261bf64bb3f029c785e8a1d4a8bec61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextNodeVectorIndex</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aa916702e0233b3af7cb77a4a5b775e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>hosts</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a5d8262ae94bf0b443216e3e5ff64b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>unEquippedHosts</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>aff89ad81ebdc5b9bb82b3769900a4a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subscribedVehicles</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a1f71130adaae9cd62d246079ac277c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>activeVehicleCount</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a49ceba0cfeecf3aa224baeefbfc10b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdownTriggered</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a437261792d5b15e878c9b1029bb0cfc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectAndStartTrigger</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a5b537433fdf5ecd1d35d4d2df59df41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>executeOneTimestepTrigger</name>
      <anchorfile>classaodvTraCIScenarioManager.html</anchorfile>
      <anchor>a5de3a77634c6e82de54492b360697809</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIScenarioManager::aodvTraCIBuffer</name>
    <filename>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>aodvTraCIBuffer</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a91542072db8e379158f33a837976f2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aodvTraCIBuffer</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>aac20c26a4b51d4d9aa07301986ed7c68</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a04deadaadf54a8fa4766d982e4f88f5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a0472359ef856b7a04b0bc2051fcc4641</anchor>
      <arglist>(T inv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a9e6c0e28f9c565fbc4860b9f19c2d24e</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>aodvTraCIBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>afb097d4ee9a0dd5dd94a263e7ce1894d</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>aodvTraCIBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>aee7dfeb7f633bab4b94cf99fc6041019</anchor>
      <arglist>(const T &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a6f4e56935415637a57e802e47913ee76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a769b2f05959612157c18c7bc347a9e8d</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>ab6e5682d193ceab71b46f80a53da544e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a6c2f6a6177f6874a48451caee4e157d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hexStr</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>adce325643499b2fac8de75a3905c8ae1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>ac3cfbf8f557affbf490ae97758c2ed68</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a88d0e82f7b61f10b786b648d75a8fb1b</anchor>
      <arglist>(aodvTraCICoord inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a7e2de25e40474c6d0ed6c159292ee02d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>aodvTraCIScenarioManager::aodvTraCICoord</type>
      <name>read</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a9cc60a5bc9e79a22e602174bd6cd63ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>abf92c7cd26e75f074ebe14b91ee0c893</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>buf</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a8bf63ea00ab10e5a65c64a6e751e1ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>buf_index</name>
      <anchorfile>classaodvTraCIScenarioManager_1_1aodvTraCIBuffer.html</anchorfile>
      <anchor>a557b2b905dbd54b47da1e37050ce4557</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aodvTraCIScenarioManager::aodvTraCICoord</name>
    <filename>structaodvTraCIScenarioManager_1_1aodvTraCICoord.html</filename>
    <member kind="function">
      <type></type>
      <name>aodvTraCICoord</name>
      <anchorfile>structaodvTraCIScenarioManager_1_1aodvTraCICoord.html</anchorfile>
      <anchor>ad1772cdf2fa13428c016b4ca6894d5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aodvTraCICoord</name>
      <anchorfile>structaodvTraCIScenarioManager_1_1aodvTraCICoord.html</anchorfile>
      <anchor>ac370bc930be8861d434f20f6d59b1bac</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structaodvTraCIScenarioManager_1_1aodvTraCICoord.html</anchorfile>
      <anchor>a112df3f93e766f8a44cb762f883838ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structaodvTraCIScenarioManager_1_1aodvTraCICoord.html</anchorfile>
      <anchor>a4da4c6c5872ac57d4d98c960a696464b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIScenarioManagerAccess</name>
    <filename>classaodvTraCIScenarioManagerAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>aodvTraCIScenarioManagerAccess</name>
      <anchorfile>classaodvTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>a53dfcde21468b2214b47924a928a80ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>aodvTraCIScenarioManager *</type>
      <name>get</name>
      <anchorfile>classaodvTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>a89e0f95f99d776d2080e25393bdadbdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCIScenarioManager *</type>
      <name>o</name>
      <anchorfile>classaodvTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>acf3f4df8f728b487d591d161ff079930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIScenarioManagerLaunchd</name>
    <filename>classaodvTraCIScenarioManagerLaunchd.html</filename>
    <base>aodvTraCIScenarioManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~aodvTraCIScenarioManagerLaunchd</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a9c3696038edf9f7a856580465777247d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a7c5967c8b8f8b12203d9ebf1ce641cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>abc55b7c6ff982912698084982fd050b4</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a1b2ef061d0a3901cae9cd65a6eb9c258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>ab9c2a1d9fdc2097286d2486e43639b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>launchConfig</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>abdbf9ab4555910051f675eb4d8abda47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a4ef8c99617db2abf83b2c11682102370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCIScenarioManagerLaunchdAccess</name>
    <filename>classaodvTraCIScenarioManagerLaunchdAccess.html</filename>
    <base>VanetModuleAccess&lt; aodvTraCIScenarioManagerLaunchd &gt;</base>
    <member kind="function">
      <type></type>
      <name>aodvTraCIScenarioManagerLaunchdAccess</name>
      <anchorfile>classaodvTraCIScenarioManagerLaunchdAccess.html</anchorfile>
      <anchor>a6980d20d0777535c491f453e33f143ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIScenarioManagerLaunchd *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aodvTraCIScenarioManagerLaunchd *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aodvTraCITestApp</name>
    <filename>classaodvTraCITestApp.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a11b2c2b2683bc65280050fa562cd589c</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>adc190bb4df520e945a29879cacf17f78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>afcf766df91156221912118da4d5d4379</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>ae71c64d728fec10118f1a97f1744da5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>ab0b7e78457d5527902b2fc277a9e66be</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a91608f8c91f2b389249cc1351cf473a5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a665ea416676a6a696b754ec230234af5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a0f6353d1ad2886b6eb2ba6977267f9f5</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a81ada563dbed7aac17a899eea298adc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>aa358ff1d5553ae2c5adf5313c773847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aodvTraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a51db1a0e5849cf9405fb2ad6e23b2b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a559ed947ef2938a0b9c90d46c5983ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a989de5a858f9d01f407128cbc953279d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classaodvTraCITestApp.html</anchorfile>
      <anchor>a593337ee2a915d4311c14eb21bbf7e64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETControlPacket</name>
    <filename>classAODVVANETControlPacket.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>AODVVANETControlPacket</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a401a2a80640765c39c8bd6a8d039d8bc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AODVVANETControlPacket</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a4f8780cc8fd027fec982e829b3dc7a3a</anchor>
      <arglist>(const AODVVANETControlPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETControlPacket</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>ac3324962e894759874b891abf94d2403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AODVVANETControlPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>af32300483a906132920d2b1dda59bc75</anchor>
      <arglist>(const AODVVANETControlPacket &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AODVVANETControlPacket *</type>
      <name>dup</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a62670e4158918457fc80c6880f513358</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a167b1f759e39b4644d40f57b4d6f17af</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>ab50a26313186946da5791b65d57862f2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPacketType</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a25e530f26a67875ad34c19aec37b03ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketType</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a518f448284c123d9f8a7fc866c9f65e1</anchor>
      <arglist>(unsigned int packetType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a7427b36f9c902aabd857d0c46be4c182</anchor>
      <arglist>(const AODVVANETControlPacket &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>packetType_var</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>aa0ca085e08ea0daf1ee521c5725781ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAODVVANETControlPacket.html</anchorfile>
      <anchor>a4a50fb7cf4c5e7d32992c535f5442cd2</anchor>
      <arglist>(const AODVVANETControlPacket &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRERR</name>
    <filename>classAODVVANETRERR.html</filename>
    <base>AODVVANETControlPacket</base>
    <member kind="function">
      <type></type>
      <name>AODVVANETRERR</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a788411ac5bea2ae2fde50db9260ed58b</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AODVVANETRERR</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>ac3c0792f276bb2c0ed909a48f85a5747</anchor>
      <arglist>(const AODVVANETRERR &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETRERR</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a9eaa276d3066a8e324933bb3c88d73ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AODVVANETRERR &amp;</type>
      <name>operator=</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>adc35b5a09faeb2141254c1118131e3ae</anchor>
      <arglist>(const AODVVANETRERR &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AODVVANETRERR *</type>
      <name>dup</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a3806cd60fbbb34fc23cc50d30e6d078b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a59acde8c54c06023a7749711faa7cc91</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a756164659c3ff763c10a3a5af4c8d489</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPacketType</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a8be5703153e264190f66f59b7252bb57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketType</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a8faf6c478523138cdccfdaf5dac2514d</anchor>
      <arglist>(unsigned int packetType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnreachableAODVNodesArraySize</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a3f385f317a144550c1c8b7ba508f1cb7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getUnreachableAODVNodesArraySize</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>aed04fcddefabc484fe4d6b0cfa94317e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnreachableAODVNode &amp;</type>
      <name>getUnreachableAODVNodes</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a4068b680e52a390e86c837c4063f4648</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnreachableAODVNode &amp;</type>
      <name>getUnreachableAODVNodes</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>aff0178a7645e24a08c08a2d55192be2b</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnreachableAODVNodes</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a0c8c3f739dded6aa89131cbd82495362</anchor>
      <arglist>(unsigned int k, const UnreachableAODVNode &amp;unreachableAODVNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNoDeleteFlag</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>ae2f454bc3378c8c8bf3c4ee6e2f16b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoDeleteFlag</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a1be94581795b934662053c8c4514abc7</anchor>
      <arglist>(bool noDeleteFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDestCount</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a2f5385f1b0412752c8e26cbaa591c89c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestCount</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>ae4216608457f07ab81e08b810dc0c19e</anchor>
      <arglist>(unsigned int destCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a67fae1c405722d0aeef022a8b7aa3f18</anchor>
      <arglist>(const AODVVANETRERR &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>packetType_var</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>ae65b267191eaf17ee6a4dd70b75c8fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnreachableAODVNode *</type>
      <name>unreachableAODVNodes_var</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a7e6c2a86ac3368b124ef560ef36b4773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>unreachableAODVNodes_arraysize</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a4678bbb3fba1eb44fccc2cb22609bbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noDeleteFlag_var</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>adc2408ce395ff6832fc037596b84425a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>destCount_var</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a66ab5dd034679fcb49d14cfcfd38233f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAODVVANETRERR.html</anchorfile>
      <anchor>a48478f3beb699c1d419ce820e9d68f02</anchor>
      <arglist>(const AODVVANETRERR &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRouteData</name>
    <filename>classAODVVANETRouteData.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>AODVVANETRouteData</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a103cc11944b564027292ee4dac95f0e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETRouteData</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a2ea88a6707550abbce7f5a90979ed7a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDestSeqNum</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a2f9b4e42af14cea3ed98fe8a0352ae8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestSeqNum</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a30010be73ff0d21e4b8d8284d2e2db1f</anchor>
      <arglist>(unsigned int destSeqNum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValidDestNum</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a6500ee298070c381e0cac4a1d9e612be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHasValidDestNum</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>ac4c45e7d8576e9ecb06293d70adff35d</anchor>
      <arglist>(bool hasValidDestNum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeingRepaired</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>ae119e0d315c8448f7df833a2ab60659b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsBeingRepaired</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a27788ec603db30fb050d43d0971d13ff</anchor>
      <arglist>(bool isBeingRepaired)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRepariable</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>aaf771294cc0933f490e0ba3c8cc150d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsRepariable</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>aada4d7b3ca3fc23e72723d31e0e78625</anchor>
      <arglist>(bool isRepariable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTWR</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>aff4f53d2a577b262af10f24c87cd2ba8</anchor>
      <arglist>(double twr)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>getTWR</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>ad026b094293f36377a444c812cbc09c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpirationTime</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>aee434f5c564322d243178a426019ce3b</anchor>
      <arglist>(double expirationTime)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>getExpirationTime</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a74da55d7201af9b36104bc0c084ceb6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a726e685713d8282be4da89c8f8c2ff0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsActive</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a734da2171b34b162f7a7b71f14825a90</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPrecursor</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>aea294911ac222f3c9bdec4fc46e0e104</anchor>
      <arglist>(const IPv4Address &amp;precursorAddr)</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; IPv4Address &gt; &amp;</type>
      <name>getPrecursorList</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>aed9eb690c248a5ce24eadc93f303956d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; IPv4Address &gt;</type>
      <name>precursorList</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>ad74259180685310ad6dacdb2c1ef8a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>abd10a50a91018cadab3c9667b1786cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>repariable</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>af9330963593b4ff1333fc0f7bd2d9099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>beingRepaired</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a579351911a59745c933b6d59497a420a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>validDestNum</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>abf5aa6e4e5f86a6ebe25a3921e0e2352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>destSeqNum</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a46beda9f158339822ac2ab02d6e61a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>twr</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>a5b995bb2d0e3c05a6bddc367d5abc683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>expirationTime</name>
      <anchorfile>classAODVVANETRouteData.html</anchorfile>
      <anchor>ae7a31315bd726413b5a5db1729f54044</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRouting</name>
    <filename>classAODVVANETRouting.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">AODVVANETRouting::RREQIdentifier</class>
    <class kind="class">AODVVANETRouting::RREQIdentifierCompare</class>
    <member kind="function">
      <type></type>
      <name>AODVVANETRouting</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a6914b0d39a462107ffb3951939de7ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETRouting</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>abadc9739fa2c926e162080ec052856a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a1c85233283fbb1bf55d631e37e736908</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a23df7493a4041e356ad01756bc823368</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a19cdbd8245aa2415005b38d1fdfd395f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startRouteDiscovery</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a2efe9893dfed83d6b83df2c5baa797db</anchor>
      <arglist>(const IPv4Address &amp;target, unsigned int timeToLive=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>completeRouteDiscovery</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ad66c8ee34825b752a253fb4a850bc201</anchor>
      <arglist>(const IPv4Address &amp;target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasOngoingRouteDiscovery</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ab921deed72eebc0c69a80f16ef03e01a</anchor>
      <arglist>(const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelRouteDiscovery</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a2df2b8ce52ff8aeb60dd77b6bf545cec</anchor>
      <arglist>(const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateRoutingTable</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ac81cdb7b73da714d98753553377480e5</anchor>
      <arglist>(IPv4Route *route, const IPv4Address &amp;nextHop, unsigned int hopCount, bool hasValidDestNum, unsigned int destSeqNum, bool isActive, double twr, double expirationTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv4Route *</type>
      <name>createRoute</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ae2c1d1d936c455a7d3ec4c755a6bd025</anchor>
      <arglist>(const IPv4Address &amp;destAddr, const IPv4Address &amp;nextHop, unsigned int hopCount, bool hasValidDestNum, unsigned int destSeqNum, bool isActive, double twr, double expirationTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>updateValidRouteLifeTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ada1688c70333dc07274b47eddc5c07f4</anchor>
      <arglist>(const IPv4Address &amp;destAddr, double expirationTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleExpungeRoutes</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>acacce7aa0b49b61ed9e438ce9ce78acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expungeRoutes</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aae1230c36bcb7bf55faf9381fe2adbd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AODVVANETRREPACK *</type>
      <name>createRREPACK</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ac7e45b06896039e8c038a82e7fac90e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AODVVANETRREP *</type>
      <name>createHelloMessage</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aff9beb1e118f97cb095fb013ef134229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AODVVANETRREQ *</type>
      <name>createRREQ</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a7665693a2384b3b923229f8784ddf428</anchor>
      <arglist>(const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AODVVANETRREP *</type>
      <name>createRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aa80e9346cf936b9e5094273b6528a128</anchor>
      <arglist>(AODVVANETRREQ *rreq, IPv4Route *destRoute, IPv4Route *originatorRoute, const IPv4Address &amp;sourceAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AODVVANETRREP *</type>
      <name>createGratuitousRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a28f767f5ba2abfc73a99c7882e18ee6b</anchor>
      <arglist>(AODVVANETRREQ *rreq, IPv4Route *originatorRoute)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AODVVANETRERR *</type>
      <name>createRERR</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>af5759ee2b7cbca4ebda9d4ebe592d3f1</anchor>
      <arglist>(const std::vector&lt; UnreachableAODVNode &gt; &amp;unreachableAODVNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a7b8c02291229923844e0ca7e6b0fa412</anchor>
      <arglist>(AODVVANETRREP *rrep, const IPv4Address &amp;sourceAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRREQ</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>af467ecbcef885267da64ae4c248accfc</anchor>
      <arglist>(AODVVANETRREQ *rreq, const IPv4Address &amp;sourceAddr, unsigned int timeToLive)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRERR</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ad5c383bd1f046226d9576c5bdf994f1e</anchor>
      <arglist>(AODVVANETRERR *rerr, const IPv4Address &amp;sourceAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHelloMessage</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a6951a9f45827b5521dbc176f569238c4</anchor>
      <arglist>(AODVVANETRREP *helloMessage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRREPACK</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a74bc8ffc803b49dd2f4500ce980bf17d</anchor>
      <arglist>(AODVVANETRREPACK *rrepACK, const IPv4Address &amp;neighborAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRREQ</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a3bf096ee8429e867b3a42d584a4e7250</anchor>
      <arglist>(AODVVANETRREQ *rreq, const IPv4Address &amp;destAddr, unsigned int timeToLive)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRREPACK</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a88afddf5770f76c4fb14f7e950150b9d</anchor>
      <arglist>(AODVVANETRREPACK *rrepACK, const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a1f1f246c7f8de4358d5ebedc67c72a13</anchor>
      <arglist>(AODVVANETRREP *rrep, const IPv4Address &amp;destAddr, unsigned int timeToLive)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendGRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>af1c0035dfc3da544c6c3b6493076e8d5</anchor>
      <arglist>(AODVVANETRREP *grrep, const IPv4Address &amp;destAddr, unsigned int timeToLive)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forwardRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a9470bc10fd32c39c3841a637a0bfdcbe</anchor>
      <arglist>(AODVVANETRREP *rrep, const IPv4Address &amp;destAddr, unsigned int timeToLive)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forwardRREQ</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a41fc0407f66584a002076a0a3024aa87</anchor>
      <arglist>(AODVVANETRREQ *rreq, unsigned int timeToLive)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRREPACKTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>acc18b8ef90e9c9e057d3fc6bc272fcb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBlackListTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a46537982490b12465aff4bdbaf9da623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendHelloMessagesIfNeeded</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a80467b8a8d820bc07bb07b983d8623b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleWaitForAODVVANETRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a22952646cdb8211f52cc8a688f44f3cb</anchor>
      <arglist>(WaitForAODVVANETRREP *rrepTimer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRERRWhenNoRouteToForward</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ad18361845f2fbd7bbd7977bab080aefa</anchor>
      <arglist>(const IPv4Address &amp;unreachableAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLinkBreakSendRERR</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a2d5844253cd463b627e58796734e1c3f</anchor>
      <arglist>(const IPv4Address &amp;unreachableAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>adebae210f92308e9aaa9fade2e100388</anchor>
      <arglist>(int signalID, const cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Result</type>
      <name>ensureRouteForDatagram</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ac4e4dd5a9ee1387ee982e2f5f8446fb4</anchor>
      <arglist>(IPv4Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Result</type>
      <name>datagramPreRoutingHook</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ae2d097e5b84182121fa3ce2fecd015db</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inputInterfaceEntry, const InterfaceEntry *&amp;outputInterfaceEntry, IPv4Address &amp;nextHopAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Result</type>
      <name>datagramForwardHook</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a3d8577b3bae8747e86804796570eefe4</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inputInterfaceEntry, const InterfaceEntry *&amp;outputInterfaceEntry, IPv4Address &amp;nextHopAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Result</type>
      <name>datagramPostRoutingHook</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a2617a5a1865f6db1bce07cc900bbe0ed</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inputInterfaceEntry, const InterfaceEntry *&amp;outputInterfaceEntry, IPv4Address &amp;nextHopAddress)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Result</type>
      <name>datagramLocalInHook</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a0d1095ecfa192df89d43068fe0481479</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inputInterfaceEntry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Result</type>
      <name>datagramLocalOutHook</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a03510f0a87fb2ab5c0353d867789d3f4</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *&amp;outputInterfaceEntry, IPv4Address &amp;nextHopAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>delayDatagram</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>acd0dc6435ac7ca9dbf87909ce91a4f91</anchor>
      <arglist>(IPv4Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv4Address</type>
      <name>getSelfIPAddress</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a9e6bca492930ecb96860b97a60bc8e8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendAODVPacket</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a0c98bca588b062a42580d583288b6fc0</anchor>
      <arglist>(AODVVANETControlPacket *packet, const IPv4Address &amp;destAddr, unsigned int timeToLive, double delay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearState</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a7a5afe90d9d8583b7461c71538c2a133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aec104faef5f0477b39f46784533b9cb5</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>host</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a242439e84e206731324fa4b4cd7927ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>routingTable</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a0633cc57dce10919efbffa6aa178eefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>interfaceTable</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a3c2884537d87f1a869cb749265571422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>INetfilter *</type>
      <name>networkProtocol</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a686c763a21d908539ac98c148f12e171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a890d0d4a5ec0a159caa1ad2357cd9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rerrRatelimit</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a5f2e559f4640f4c111f19ee0991caec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>aodvUDPPort</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a46ede776f2bf9f3e602fc259585616a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>askGratuitousRREP</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a9460d601b68adb5e21947fc55001976e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useHelloMessages</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a163b5c214229015a3ca240bb14abcd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>maxJitter</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>abab0226eaee83d0aff617a519d2b3a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>activeRouteTimeout</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a6a33e7c20a0073d6def0c32fd4f681e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>helloInterval</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a0420e0c4fc04c797248211a71f08b8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>netDiameter</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aaf2b7fa9157000a03878adf4bf4934b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rreqRetries</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a206a62082fe2ac5ac45ee3ca24e3601d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rreqRatelimit</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aebd78e8e7b1d229a2cb885951ac2ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>timeoutBuffer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ac715cf56e9e93999c31b3e82db746f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ttlStart</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a7fa629a0a52b65070ca05ab1ab701a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ttlIncrement</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ad1bd94d06329e023658614777a11ff40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ttlThreshold</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a485be1e6494553d74bab7a4f2db03acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>localAddTTL</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ac28bf3b09a5fa308e6d7ca39dab4c31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>allowedHelloLoss</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aa47c49cfbb34250fb9f7950aedf512a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nodeTraversalTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>af351ec43cafb7037c61619339915fc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>jitterPar</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aae47037fe638f215a093d67657194165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>periodicJitter</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a638df8c3fb9326ae0ab4b81a45199307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>losRange</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ac3d91cf87612a620f9dd67fad7253379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speedWeight</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ad4cf30800f22ec4d7f0da3f6c8b0e724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>accelerationWeight</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a33903eba715f1b4761ba7d0c9e257339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>directionWeight</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a6f2802e6e7b4e4d7a277ca626199645b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>linkQualityWeight</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a73ae694e0090d5085bcfe1c9f1f90d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>deletePeriod</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aca14904a416651ce287ebd2eaf0f92e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>myRouteTimeout</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a17bd3226e82967cbe77ca7a271b27c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>blacklistTimeout</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ab389518b61cf615a1024aa5b248015f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>netTraversalTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a7459ed23ae6622cf21258563b2784b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nextHopWait</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a9597ea25c8be2e78e7e0eb40061974ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pathDiscoveryTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>acb0accdf69b7caf3de020f388b9c1007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rreqId</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ab0d0d30eeeeee45f7dfdeff473625762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sequenceNum</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a51a44672016d7fa5a0233b2300feed8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; IPv4Address, WaitForAODVVANETRREP * &gt;</type>
      <name>waitForRREPTimers</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aba97361b57a5349c63677a1901b1a687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; RREQIdentifier, simtime_t, RREQIdentifierCompare &gt;</type>
      <name>rreqsArrivalTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aac6d434526067a2d0fc3c3935dbe3fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>failedNextHop</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aa4f937826cd469c4a75e82272636105f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; IPv4Address, simtime_t &gt;</type>
      <name>blacklist</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>affbf626571ae64755b7e8b9cd3024b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rerrCount</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a5984f63a0f53d5c9ae66555a11c4c048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rreqCount</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>afdef8e45a17d6f7b277897edf7a520ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastBroadcastTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>adb6d5c1e4f52ff3943649a9b5ac2a942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; IPv4Address, unsigned int &gt;</type>
      <name>addressToRreqRetries</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a0c7a799c947b0bf90d6602a939f71704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>helloMsgTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ab3428598333e149c4ef04daf1d67b4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>expungeTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a4e54162d5d8064bf17d9f0868a66be8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>counterTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>aaad8b23f7f59cbbf68e865b3ab298ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rrepAckTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a3422f234642b4002cfbf996d17921bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>blacklistTimer</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>ad7736c315facfd2427455644d005fe17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>rebootTime</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a2a16b7924a23311cbeb2909becd5176d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isOperational</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>af4a6cce651fe1e75b00f379f72e16fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; IPv4Address, IPv4Datagram * &gt;</type>
      <name>targetAddressToDelayedPackets</name>
      <anchorfile>classAODVVANETRouting.html</anchorfile>
      <anchor>a5128c90569cc45b9bb47c9aa588341cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRouting::RREQIdentifier</name>
    <filename>classAODVVANETRouting_1_1RREQIdentifier.html</filename>
    <member kind="function">
      <type></type>
      <name>RREQIdentifier</name>
      <anchorfile>classAODVVANETRouting_1_1RREQIdentifier.html</anchorfile>
      <anchor>adcab623338ff2d3bab8d89715189967e</anchor>
      <arglist>(const IPv4Address &amp;originatorAddr, unsigned int rreqID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAODVVANETRouting_1_1RREQIdentifier.html</anchorfile>
      <anchor>a06017ac541ff6e8ce38b3b897e44d8a7</anchor>
      <arglist>(const RREQIdentifier &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>originatorAddr</name>
      <anchorfile>classAODVVANETRouting_1_1RREQIdentifier.html</anchorfile>
      <anchor>af17bf5b389bd30b80b40146f24ffe8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>rreqID</name>
      <anchorfile>classAODVVANETRouting_1_1RREQIdentifier.html</anchorfile>
      <anchor>ae09ec1666bf9be7e133632a7e90d9c0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRouting::RREQIdentifierCompare</name>
    <filename>classAODVVANETRouting_1_1RREQIdentifierCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classAODVVANETRouting_1_1RREQIdentifierCompare.html</anchorfile>
      <anchor>abc6503ca56c815ca416280e8bf41c630</anchor>
      <arglist>(const RREQIdentifier &amp;lhs, const RREQIdentifier &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRREP</name>
    <filename>classAODVVANETRREP.html</filename>
    <base>AODVVANETControlPacket</base>
    <member kind="function">
      <type></type>
      <name>AODVVANETRREP</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a0ba659d84156217f59009e9aa87bb911</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AODVVANETRREP</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a77e0f385befbf369d9d7739d4afd06f0</anchor>
      <arglist>(const AODVVANETRREP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETRREP</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a508dfa53c6d92a444c1ad435b19befd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AODVVANETRREP &amp;</type>
      <name>operator=</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>af766289e8e48b38da78bb89fd1956335</anchor>
      <arglist>(const AODVVANETRREP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AODVVANETRREP *</type>
      <name>dup</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>ac6559636804501d8c11d06346cf564e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>ae19cbde70a267087e18ab6a74d705d78</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a83036df55258f0546ba147e83cd9392a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPacketType</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a209956b67ad04f00aff2e7f0b2ea2248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketType</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a741e9f85349b46081e76188f4ac25cba</anchor>
      <arglist>(unsigned int packetType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRepairFlag</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>ab782290676133b3e61e7562dba5eb761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRepairFlag</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a2853625924798b0d818bbbf149ca0dcd</anchor>
      <arglist>(bool repairFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAckRequiredFlag</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a852d6ed0bf979b587bffc36f1aec9a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckRequiredFlag</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>afb1aff18e44d0784e87163d514f9c49c</anchor>
      <arglist>(bool ackRequiredFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPrefixSize</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a52d8459a8878145ef27cad9465cb9d16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefixSize</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a535c0ed4a44e7f6ba6e5e2f73b651174</anchor>
      <arglist>(unsigned int prefixSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getHopCount</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a67bf34e548999ba8de39eaf81532407d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a73fb53476fea62cf054addfe97cba62a</anchor>
      <arglist>(unsigned int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv4Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a54ac5819ef436df6bc37d2b7efe2fefd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv4Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>af74022dc5955328122f186faa81678c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a26e11bee7c1346d0d5f6e08f1a0c3d63</anchor>
      <arglist>(const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDestSeqNum</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a89f89633c6ddf79679fce1a6664f4315</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestSeqNum</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a6bd525015da5b6e2d5b28ce6ba80e990</anchor>
      <arglist>(unsigned int destSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv4Address &amp;</type>
      <name>getOriginatorAddr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a3ab8d3446641d20d3d91e6a80aa62341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv4Address &amp;</type>
      <name>getOriginatorAddr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>acb8d9ec0274534b0dc3c82ba1ee60039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorAddr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a6ea13a9f09e14fd749e3e662311aea05</anchor>
      <arglist>(const IPv4Address &amp;originatorAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getOriginatorSeqNum</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>afdf613cf751e0d4bb4372ee53d343aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorSeqNum</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a210eb705d71bece7405d5653df5329cf</anchor>
      <arglist>(unsigned int originatorSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getLifeTime</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>af24b1b8e05a5cbabe5b7bb3ee5e6b0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLifeTime</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a9a450677bf9a5eb6c553e16d39f2ba36</anchor>
      <arglist>(simtime_t lifeTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTwr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a686c6dd1c2f18826c333c3a5d90df5c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTwr</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a97f240f1d42df0040f1d05c159567394</anchor>
      <arglist>(double twr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getExpirationTime</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a70ffffbe3a09b0a433b42b49319ca804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpirationTime</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a1eb393eb7ce03b0e335c0bf1fa8b44b1</anchor>
      <arglist>(double expirationTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>af2448736d0b347dfd748e5d19b5cd001</anchor>
      <arglist>(const AODVVANETRREP &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>packetType_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a36b9e90a2581142064e7555437545fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>repairFlag_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>aaaddda049826ae93d23e250c69ea5c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ackRequiredFlag_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a1e93224e113133ec3d374ad0581be7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>prefixSize_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a4726ee00ec55ed26f17093c5a421ba55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>hopCount_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a246bed67350e86b1403ee44c3881e99f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>destAddr_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>afda4a23652218b954de6612f11c29c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>destSeqNum_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a21fa78674ba446384c9143fae2c7bed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>originatorAddr_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a4fb3f647f40cd8df21f6d8199bd11a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>originatorSeqNum_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a57a656bff958a20c3e3f7e30d2381fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lifeTime_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a35c406d2c6b909421e8cedb53b3243b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>twr_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a1cc212b2647464137b334a72552b3814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>expirationTime_var</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a64a928ff7af863bf1b65b1d7d36ab5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAODVVANETRREP.html</anchorfile>
      <anchor>a36b8082dc1b662fa61fe260dc3dd2a4d</anchor>
      <arglist>(const AODVVANETRREP &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRREPACK</name>
    <filename>classAODVVANETRREPACK.html</filename>
    <base>AODVVANETControlPacket</base>
    <member kind="function">
      <type></type>
      <name>AODVVANETRREPACK</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>ab64a919846b6005bf8a640fe55a7289d</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AODVVANETRREPACK</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a1b47a32ccef5687749cf08ea73b78544</anchor>
      <arglist>(const AODVVANETRREPACK &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETRREPACK</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a6d312da9e2ccb18107cea066742091cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AODVVANETRREPACK &amp;</type>
      <name>operator=</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>af3cfdb7bc6714ef2f22046a33ab35fe6</anchor>
      <arglist>(const AODVVANETRREPACK &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AODVVANETRREPACK *</type>
      <name>dup</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a4bda9cc7d9b2b9814fabfe1961074356</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a034bf0f503940509466446f5d4dd7038</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a8089c6e80c748a15f4ac6054809ce72b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPacketType</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>af0c63791a75645597d989d11e00b9d54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketType</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a401191624fcdee2fecaa0245526bcdf5</anchor>
      <arglist>(unsigned int packetType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a5f4816287e48880fb2e5bdc3ee3da87c</anchor>
      <arglist>(const AODVVANETRREPACK &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>packetType_var</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a57380e2c2965eb5cb268cefc31d10003</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAODVVANETRREPACK.html</anchorfile>
      <anchor>a34ee0809695657267f56c67e8c127d57</anchor>
      <arglist>(const AODVVANETRREPACK &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AODVVANETRREQ</name>
    <filename>classAODVVANETRREQ.html</filename>
    <base>AODVVANETControlPacket</base>
    <member kind="function">
      <type></type>
      <name>AODVVANETRREQ</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>af66871e978971ffff5e536a2ba874e22</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AODVVANETRREQ</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a8e3c49ed44b532878bfb4478e06f8f05</anchor>
      <arglist>(const AODVVANETRREQ &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AODVVANETRREQ</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a242cae1ab33aa6bf7ec8d7a7c7544e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AODVVANETRREQ &amp;</type>
      <name>operator=</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a3f50e7e72813012449d193963450447e</anchor>
      <arglist>(const AODVVANETRREQ &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AODVVANETRREQ *</type>
      <name>dup</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a7b4dbe830a08318e7e6dc11d9aeb28b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a61aeb354e71835a7feeac5618f388757</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a59ec77a0e8a2d49aa4d69eef3044a211</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPacketType</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ac5b3faf0dff74015725737e74abd9a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketType</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ae687a5ed61067efd94aaeea952798ad9</anchor>
      <arglist>(unsigned int packetType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getJoinFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a79efb037b43a5bb2e23d7e6460951d26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a9a011d3c781c0d713f3ad2ac26ed0980</anchor>
      <arglist>(bool joinFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRepairFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>adea86f2fa161f3c80d9b1c4ce866e9e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRepairFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a211f89cc909837b55eb75414738c7e3e</anchor>
      <arglist>(bool repairFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getGratuitousRREPFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>af84998a54611a844cdfcfaca747207d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGratuitousRREPFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>acd582a63fa6ff393e8a999636d574868</anchor>
      <arglist>(bool gratuitousRREPFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDestOnlyFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ae4d884ff11318bdbe0031e347e389ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestOnlyFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a8c562c88a7265b10ea94bf476a01f622</anchor>
      <arglist>(bool destOnlyFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getUnknownSeqNumFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a7c7cdb955dcb9bf59fab29507a4146e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnknownSeqNumFlag</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a96243433fdee74f36b39fdfcb1593e3b</anchor>
      <arglist>(bool unknownSeqNumFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getHopCount</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a5328826884dd5bed8e2d8d54b1d54773</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a45b7689b9d0093652aee46f04249b213</anchor>
      <arglist>(unsigned int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRreqId</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a53c96d6bd79719a6bbb60f62fbf96890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRreqId</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a7b52ead63bb9e14f59d2595d2ca3a437</anchor>
      <arglist>(unsigned int rreqId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv4Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>aaa513ac888e807e9ed86d91b52d6e51c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv4Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a0894e10e64b5eb05353eaad8bbe425e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>aa556fcb67f501210df8e1adf6796afc5</anchor>
      <arglist>(const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDestSeqNum</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a0bcea7fe7367428c959dc81672675a6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestSeqNum</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a727ec80ddb4f6fb6d4e28f6beaf2e41f</anchor>
      <arglist>(unsigned int destSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv4Address &amp;</type>
      <name>getOriginatorAddr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a1362ed45eb0b9e7d1972c2d5f1185f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv4Address &amp;</type>
      <name>getOriginatorAddr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a80136002b33c803ef2314f11c1a33e09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorAddr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a9d06480a65965eff8913aec42834804e</anchor>
      <arglist>(const IPv4Address &amp;originatorAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getOriginatorSeqNum</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a5447a454db2a1335573359ef0cb83560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorSeqNum</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a7ae9bc4eba25d0227ee9464d04e9134d</anchor>
      <arglist>(unsigned int originatorSeqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getPosition</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a932a3d4aa362f8a86e941807a4c6a40f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getPosition</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a127dc158510e616fa4de2c81d6cc5d0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ac69745ebc45468435f3c63e6c75d2f87</anchor>
      <arglist>(const Coord &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a99261d842fdc30b462fcfde9560e04e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>aa542ef51489b3912404d35f9088c1742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSpeed</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a1faf7b7644ec3934acb0fed28aa06264</anchor>
      <arglist>(const Coord &amp;speed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getAcceleration</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a3f52d3e98deae03fa2c5462d24015930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getAcceleration</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>adf5b7bb2887953b33a1f8f588e149c7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAcceleration</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a712ef79bf826be0133a899a5e24e5bdf</anchor>
      <arglist>(const Coord &amp;acceleration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a4f96b392af0a5d82c1115eebaa3a7e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a02d2b37744baad4632ca104cc1765924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDirection</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a36b413c8db525bfadad2d597f5757ef3</anchor>
      <arglist>(const Coord &amp;direction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTwr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a569bb74f2a6b40086b21430b7e703c23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTwr</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a20a3ed13af4a1dd5c88e7e42988813bb</anchor>
      <arglist>(double twr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getExpirationTime</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ae46eafc52960ad7ff57af0e66256ced2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpirationTime</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a04093ae176e05e76c33517e8cfc2669a</anchor>
      <arglist>(double expirationTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a94a020cb2735a46c7ed3ba053d99ade9</anchor>
      <arglist>(const AODVVANETRREQ &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>packetType_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a751690ccd305b9abeecb549c6b9eb302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>joinFlag_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a62a9f7903600a18fb901c857b04c3257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>repairFlag_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>afe0dcb6971dc3b133f5cf0a3f0a594d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>gratuitousRREPFlag_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>abbabffc260f86df83df8e2d2273f75c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>destOnlyFlag_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a5e15bf070caace8a5fca77b5fbfc0f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>unknownSeqNumFlag_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a3259548a66bf343ebaaa6fffe4ff7ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>hopCount_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a718836c91b8f1157d60fdf38d401474c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rreqId_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a50ab3a2dfe589a69c09b87c9c36f4331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>destAddr_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>adad9b590b82fd464fc047038f008e0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>destSeqNum_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a769713883df39a9f7fd76378939b21c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>originatorAddr_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ae96cd8b1571025de149311ffede8bd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>originatorSeqNum_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a036d2f420f23b494b7a1b7ff2878ed4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>position_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>aa7dbbcc59f2b4428dee8f2fd9829f6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>speed_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a1c1e463e401d064a7f0e8f4030fee258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>acceleration_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a20b7a0fce7d6837a32b1e457e9049f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>direction_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a3b6de73ddf6280b96afcf370b55ddd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>twr_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>ad40126ad21c3c44f2c5e72beae3a4c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>expirationTime_var</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>aa282b1b893a32cdc9f5cd00385639098</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAODVVANETRREQ.html</anchorfile>
      <anchor>a0a3930d6db6169518e829faca516ad0e</anchor>
      <arglist>(const AODVVANETRREQ &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument</name>
    <filename>classArgument.html</filename>
    <class kind="class">Argument::key_iterator</class>
    <member kind="typedef">
      <type>DimensionSet::value_type</type>
      <name>key_type</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>ac1eb4e3eff9e8f84ef4dc0c91127eba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>mapped_type</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a3dd501f2b9169432270402847347950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type</type>
      <name>mapped_type_cref</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a23feb540136f49b4202ce0c7def1f0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a62ef6fa40b8600df45f05d0e36e6d296</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a521abc97d737e8c77742dcc9f4b21022</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>aa17498813265ae215cfeb902b3df4a75</anchor>
      <arglist>(simtime_t_cref timeVal=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a4de14fe94af77f9d568cf74313dfbcd1</anchor>
      <arglist>(const DimensionSet &amp;dims, simtime_t_cref timeVal=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTime</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a2ecb3b041b5b8721d6767531e4ac792a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a8087982f050bdc61d787b128ca9ac8f9</anchor>
      <arglist>(simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasArgVal</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a0e9998020362333915af80cde79df9e6</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>mapped_type_cref</type>
      <name>getArgValue</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a137a911de0281cbb519fe13727aa0813</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValue</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a27bd7000e865670a673039233424d2ab</anchor>
      <arglist>(const Argument::key_type &amp;dim, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValues</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a72ac36c91caaeb8f34eb091abff19c51</anchor>
      <arglist>(const Argument &amp;o, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSamePosition</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>ac69b6722244626cdf4e0a006c9822cec</anchor>
      <arglist>(const Argument &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>afedad9de51d93e634baa82f1152d7155</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClose</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a306689df8719cb4334335d93cd657f74</anchor>
      <arglist>(const Argument &amp;o, Argument::mapped_type_cref epsilon=Argument::mapped_type(0.000001)) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a20805e35e4f766088dccfa2bbd8faf03</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>ac983761168238481be2bc9d9d180abe5</anchor>
      <arglist>(const Argument &amp;o, const DimensionSet *const dims=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionSet</type>
      <name>getDimensions</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a8b3fcda23d2eec4e931126d261e4b194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>aa5470d1af397ea8da8be60594981a0b0</anchor>
      <arglist>(const Argument &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>af0e836fd4aaecc1461b994e21f66ddc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a493bcd3b014d9bc09f5b0a5093797136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>aeeb6730c20ae8a8d6c9606f2e03cc1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a839f872b871bcce52fa4179b0e8ee0a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>ae4b61830a991f8911978c30a67dd2da6</anchor>
      <arglist>(const Argument::key_type &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a3289dcd0413f1df96a51df6cef134ad4</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>ac22d11d6f986ecc564b98c1dbd0acb53</anchor>
      <arglist>(const Argument::key_type &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>afd7c54a936671eb153f524443e36de52</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const mapped_type</type>
      <name>MappedZero</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a8523627cdc70492e5e0935b9a3a78cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const mapped_type</type>
      <name>MappedOne</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a657d962a1b965814e6b2eecb07f03e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; key_type, mapped_type &gt;</type>
      <name>container_type</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a5b90c0766620d819b1bf1221603cc4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a296f0e0c35afc921b9b39b312e97e425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>insertValue</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a9f8683a4ac0a277d92f4ee4c553b75f9</anchor>
      <arglist>(iterator pos, const Argument::value_type &amp;valPair, iterator &amp;itEnd, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>time</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a69cba55a3a7e1414ba8edde37796d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>container_type</type>
      <name>values</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a7e41277b3b57f03fbb47336c2b7439f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classArgument.html</anchorfile>
      <anchor>a7eb8c897281544d904f4a45de93a5cf9</anchor>
      <arglist>(std::ostream &amp;out, const Argument &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument::key_iterator</name>
    <filename>classArgument_1_1key__iterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorType::value_type::first_type &amp;</type>
      <name>reference</name>
      <anchorfile>classArgument_1_1key__iterator.html</anchorfile>
      <anchor>aad04b5c3a84f4c80b659a05472cd28bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorType::value_type::first_type *</type>
      <name>pointer</name>
      <anchorfile>classArgument_1_1key__iterator.html</anchorfile>
      <anchor>a7fb179e9a64691d51f7e893ea2686a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key_iterator</name>
      <anchorfile>classArgument_1_1key__iterator.html</anchorfile>
      <anchor>ad23a42675cec51608c15650632cc15e8</anchor>
      <arglist>(const IteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const reference</type>
      <name>operator*</name>
      <anchorfile>classArgument_1_1key__iterator.html</anchorfile>
      <anchor>a0842776337ded8b72060c6d13e40f7f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classArgument_1_1key__iterator.html</anchorfile>
      <anchor>af37b3a86b1324260757b97cf381026e7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseApplLayer</name>
    <filename>classBaseApplLayer.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseApplMessageKinds</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>ae0d47602558bc21ad258c06cf11f4361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_APPL_MESSAGE_KIND</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>ae0d47602558bc21ad258c06cf11f4361a366d211a4409475c5bc2a1193033d8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseApplControlKinds</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a78a7344b6587fdf1c02e299b156825d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_APPL_CONTROL_KIND</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a78a7344b6587fdf1c02e299b156825d9a5bfff2f2b6be2fc6599387eebaebb944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a4b6c452ca012440a7311e16b2209dddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a28b0216a8fff432bf8f66a4e8aae7e07</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>aa3ebaf5d1d1bdbec4648b07f65eb4145</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a3859f6996ca38f3a7317a3facb8389a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a0afd7ae9809a632ee75a136838029c07</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseLayer</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a0197900f0ab83323a623448fc4e8b239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a8039dac8d02052c97c1fcc209910fdde</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a5ab11502dbeeea89693d29841376a2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>a91a34707835f0938bc9c1a1c470ad5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>af1956d05ad1d5a1b5e3b605e7238c4f6</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a32a85543320f15e3852fc15201acd492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>ab8e21b1eab02b58e24ab06858faa5104</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>ace4692f0eb43b2d4ca4e46f81b5c77a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logName</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a662d45fd2e3edf53d40e84b98f4dc885</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const cModule *const</type>
      <name>getNode</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a6f5018211b942b3b4604a8b8972623d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a9195e1fe5a0ca770e7d29351e0ab2ecf</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a08d91ffcf2598556db4dd3ba845e4979</anchor>
      <arglist>(cMessage *, simtime_t_cref)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L3Type</type>
      <name>myApplAddr</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>aed82a07169f4bfd3599d6c6c0a765873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>aba8356197b089f23dd9c19b6b7937dab</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a448cd52ea7a441a8f2edb3794a59205b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a581ca398f2066910d8d10676e90d206b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a29c15eb83ed7749c838c005a3fb554d4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>a823ae7127366be3fa2e11c98ace537b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a1873d6e3fc6d92cf8482b39f1c5ac6c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>adbf061566606041db811b519f0400ed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>aa1190a06fb4dfb15d8ff001468335dc8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlDown</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a6d01a0f56978740d7617c2e338858cc3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacket</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a33f4f320f4b6c4ec48651847338ff47f</anchor>
      <arglist>(PassedMessage::direction_t dir, PassedMessage::gates_t gate, const cMessage *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerWithBattery</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>a2286e83003b2919cbb496260a5b0d009</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>a1015e11ad7fc73f62a37e395bf686015</anchor>
      <arglist>(DrawAmount &amp;amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawCurrent</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>af62a4c6ab659f7bebc16cc789c559bc6</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawEnergy</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>a603868d7ae89b65da4af161c9470f07f</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a44220aa650488eee8ad121f8bc599265</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchHostState</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a2edf4477674604a8c2eb2b95e952694a</anchor>
      <arglist>(HostState::States state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *const</type>
      <name>findHost</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a1d2d2af49918dfb9ae036b1d086b123a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const cModule *const</type>
      <name>findHost</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>ad93ceae9045951561f04cc3f3b0f78f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classBaseApplLayer.html</anchorfile>
      <anchor>ab42918350289ee246b194a5ab5e18d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PassedMessage *</type>
      <name>passedMsg</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>adf7be46c3b45429ae7e45c466202eebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>aa73b04b4b90c5d44adf7b1ea1264412d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a6a901380d0b82b72898cad4ba6cff331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerIn</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>abf4366df3282b3358945a3267538b93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerOut</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>aa77fd3b24dc3caec970d7f5c48626e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>aba75bba311458c62b4b2fa2bb9711a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a5e0a6cb17bfc2fd3127ac884d0e9d3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a1d2eb99059680b97b366ae8342f18af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlOut</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a380159410191c5ea0e5f95766a4814dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseBattery *</type>
      <name>battery</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>a19c053b2525a3e78f911f0433a90628f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deviceID</name>
      <anchorfile>classVeins_1_1BatteryAccess.html</anchorfile>
      <anchor>a904f5c552f5173ef44ccfd624c3f9b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>af32711ea117b066fcd10081a17bb81d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>notAffectedByHostState</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>ad2e5c785ee5b988e624a11a9b80e2bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catPacketSignal</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a665bf8ad06b2c4b5419669869e68ef00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catPassedMsgSignal</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a8474b0b98731b2d66c9fe3a3ae040edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catDroppedPacketSignal</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>ad8ba02d92dd106da1d85192eb28250c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catHostStateSignal</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a0d89757df3cc2bf55649eee85aad6402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseBattery</name>
    <filename>classBaseBattery.html</filename>
    <base>BaseModule</base>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a6bd8a2ebca6b85e25984fae7a5faa8fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a2aa922227a7f1d1c1e8188aaea1a16e5</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a6b2ac07e8d11823bdd239de2bfa4563a</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a4ac1773aef7363fc880a9689706ccc99</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int account)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVoltage</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a20ee7721d8da961e3493da63a0fafb81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a67c0d2c69f13b6c7ca4a24b23257d83f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>a15862e04dfa8b40082ecccff79b14ca0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual HostState::States</type>
      <name>getState</name>
      <anchorfile>classBaseBattery.html</anchorfile>
      <anchor>ab9afb1ddcea070ee4fdf9807521cc806</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseModule.html</anchorfile>
      <anchor>a03030e439aaf030c83da6e71e8be2f80</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager</name>
    <filename>classBaseConnectionManager.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">BaseConnectionManager::CoordSet</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseConnectionManager</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>aa82c4d9b87d1c1776300fa47d82a5e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a046d0df64848f1932ac1580be9d5306f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a0d39342f1e732ad44ef7e4e2dccac24f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerNic</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>ab9d82c54244e022ee41f3d1017cd74f1</anchor>
      <arglist>(cModule *nic, ChannelAccess *chAccess, const Coord *nicPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregisterNic</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a3e3f6ea1da0e15af3c91493dcfdc22ba</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNicPos</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a075ad308e1ae744f4f7ff1d6517da324</anchor>
      <arglist>(int nicID, const Coord *newPos)</arglist>
    </member>
    <member kind="function">
      <type>const NicEntry::GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>ae71cb544584cb71f96e7de50896577f8</anchor>
      <arglist>(int nicID) const </arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a6911cdbad686c0f471df22da1351cb69</anchor>
      <arglist>(const NicEntry *nic, const NicEntry *targetNic) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, NicEntry * &gt;</type>
      <name>NicEntries</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a950a318de5a93b437a1dc5872e6b9cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicEntries &gt;</type>
      <name>RowVector</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a07e3ba99630593a0b453056767f3c419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; RowVector &gt;</type>
      <name>NicMatrix</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a332ff3a0e07c412efaaa2332b00b1c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicMatrix &gt;</type>
      <name>NicCube</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a6b43342fe2608cb862e03c07cf9f799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a00b2487d2565c70a46101964a2767643</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerNicExt</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a6851b0f5e82df7cfd187c283faf0eca5</anchor>
      <arglist>(int nicID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnections</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a997a62d3bc3ca2d220a36609e4b7f4e5</anchor>
      <arglist>(int nicID, const Coord *oldPos, const Coord *newPos)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInRange</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a418d9fb4151ff38840838a94189ba8b6</anchor>
      <arglist>(NicEntries::mapped_type pFromNic, NicEntries::mapped_type pToNic)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicEntries</type>
      <name>nics</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a9e2d47a851899da506730fcdda24030e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a6b75c5b6311b76e4894d669524a15043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendDirect</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>acdfe4a6c7e4d6cfc729219946488a1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord *</type>
      <name>playgroundSize</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>ab68d40f806cce405a8e97958f1245303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a1570049e688ff532c2454fce2ef02f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistSquared</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>aa9b0c739744c1eafd365add0afe4a037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>ade8a5353ad5be39ebb3830e45ec64fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>drawMIR</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>acc2243ef90f9857769043cd040c48705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicCube</type>
      <name>nicGrid</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a4d9992e134da9af1d9b90deba1d7759a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>findDistance</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a9a4bce8e878f2d6aa18fb2606f6d8409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridCoord</type>
      <name>gridDim</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>afea80604515a28ff8a6a1d07b9b0a9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNicConnections</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>af36a4fd1f31773f63187cc9717441a98</anchor>
      <arglist>(NicEntries &amp;nmap, NicEntries::mapped_type nic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a063c137e5a6d73ff846321b511d48a32</anchor>
      <arglist>(GridCoord &amp;oldCell, GridCoord &amp;newCell, int id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GridCoord</type>
      <name>getCellForCoordinate</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a7f0e7ff7533bb1f5e3c9bb2c2c0db261</anchor>
      <arglist>(const Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NicEntries &amp;</type>
      <name>getCellEntries</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>ae776ac81a8f88a9afba710afaf8573b8</anchor>
      <arglist>(GridCoord &amp;cell)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wrapIfTorus</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a77e53c22a7c607482398632b85396a6c</anchor>
      <arglist>(int value, int max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillUnionWithNeighbors</name>
      <anchorfile>classBaseConnectionManager.html</anchorfile>
      <anchor>a9b524c0f46ec4bb2ade902ac0855cac5</anchor>
      <arglist>(CoordSet &amp;gridUnion, GridCoord cell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::CoordSet</name>
    <filename>classBaseConnectionManager_1_1CoordSet.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordSet</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a5c4c714b303d8a6ccae2628c22357556</anchor>
      <arglist>(unsigned sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoordSet</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a3f1d637881b9e4ca2a306295eacdc634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>aaa3c6a4f31789b4644a5bb7aaf414206</anchor>
      <arglist>(const GridCoord &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>GridCoord *</type>
      <name>next</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a02d6a8788ed22b635e7d8edbcb576d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSize</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>aecae0f85e052f6843660a2f6205db7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getmaxSize</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a58ff3ee1fd7484860a04e172b5dc6df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a6f6a48e14b2c80e70d66f8fd3310df65</anchor>
      <arglist>(const GridCoord &amp;c, unsigned pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GridCoord * &gt;</type>
      <name>data</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a6bf527335c1f943a562a948d63e1c435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxSize</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>ab92f6508285f667d0e7f811c74c048cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a81adb787e364efa97276766eb19fe644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>current</name>
      <anchorfile>classBaseConnectionManager_1_1CoordSet.html</anchorfile>
      <anchor>a0bdf347931c8b2c7ae970769291a804e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::GridCoord</name>
    <filename>classBaseConnectionManager_1_1GridCoord.html</filename>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>acc40471233f51e22e561d78ef9231926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>afa7e86ef98fd7a4d91d0fdfcdb17e9e3</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>acae21cc9126603082dbce10f45e97a5e</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a4f3fd84363c60c0260dc01660b8a6dc8</anchor>
      <arglist>(const GridCoord &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a5277a00268c4b72ea0af57f595100f32</anchor>
      <arglist>(const Coord &amp;c, const Coord &amp;gridCellSize=Coord(1.0, 1.0, 1.0))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a91ebc91e4af84ce4cf11d177d8ed7813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a158c3270ff10545efaf07d41c67306b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>aaaa399690632b3e605af0bd1c190100b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a075ddccd3c60f44fe6051c7afefdd255</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a2b7b149e4419a68dad34a9558f5c3c31</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classBaseConnectionManager_1_1GridCoord.html</anchorfile>
      <anchor>a8b6fb213ce1ee286ec6c894b7b22cfa5</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDecider</name>
    <filename>classBaseDecider.html</filename>
    <base>Decider</base>
    <class kind="struct">BaseDecider::CSRInfo</class>
    <member kind="enumeration">
      <type></type>
      <name>BaseDeciderControlKinds</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PACKET_DROPPED</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2ab80ab87167f9836332d1d5678f6aab64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_DECIDER_CONTROL_KIND</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2a1944cc67bf3f0c98342e3975bd05021c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDecider</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>acff4618fa7a9c2e9abf257e60e487de2</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDecider</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a486cd5548e3f75deff4dc9e3bd52fbb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a273892d7b0c9874e4efe3c7755aa7a17</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>af471a55749109aacb99429b409ccb9c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>afd31e5a65d1798d329ace9bdbec25d64</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a771545ad005ad69bef78b53fa831a7e2</anchor>
      <arglist>(DeciderToPhyInterface *phy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a82acc7c518d526216b2e31603ecc9866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a6e4b28a733a18fddec77bb6a3f179be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelChanged</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a546a912fd2463258e29bfe72698c9452</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>SignalState</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>NEW</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90ba3276f47da7417662597b21ee3afa2d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>EXPECT_HEADER</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90baf0a66719215a9be8335546666facaab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>EXPECT_END</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90ba5539b8e545c0676dab0b0efb80dfeeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; AirFrame *, int &gt;</type>
      <name>ReceivedSignal</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a4b3ede0e569c778173b7e430d958f92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a6baab300e0bec90320dfe956c2d15a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a6a480f87157d0509c0c1fccf94ea9fef</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ad931e0965c66fef10c9407d4abecbaf5</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ab9cfef6c04e12d2524d45e881f341300</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processUnknownSignal</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ac054bb9bbda73689caf6c7cd7e55c8de</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getSignalState</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>aa41d7cb370ba4069108ede77732b3bc8</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleNewSenseRequest</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a1dba383c238fba606279ef483b435f78</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSenseRequestEnd</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a2f175306cc0ae9d2805bc050315a47d8</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ae535b44e34061014fe282c36c27b0193</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>canAnswerCSR</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>aad89f97ba5dcfd556be7556f04a840b1</anchor>
      <arglist>(const CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a12dd419a9e88e0b28f8d4e530e058802</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ab8e925001d1f8630338c50f8ec10bb0d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>channelStateChanged</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>add7242168c4bb521c6335f3de590e4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a1eb9539d907f101c8d30798f6ca03337</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrameVector &amp;out)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateSnrMapping</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>abac709d59f48d292f147919854c002e2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateRSSIMapping</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a8ca42b7d77c0a1510255ec2a451d06d0</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrame *exclude=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a5eece8bf532f92912ccbd0a3bc4d6fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReceivedSignal</type>
      <name>currentSignal</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a22e578e992fab5ab54fe5fcdf196d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isChannelIdle</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a535bb5ab48036db02bed8fcf5c4e415d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CSRInfo</type>
      <name>currentChannelSenseRequest</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>ac6cd60e58a8a557ed511f8193ced4f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>a33e7f02028e78116193d09d6cdbc987e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classBaseDecider.html</anchorfile>
      <anchor>aa22cd5156240713e37578172ba5557ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>ae47e3459af2a4a7a1f14f6e60d2fc4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const simtime_t</type>
      <name>notAgain</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a3edae7484aed7b0b874521c724bd3c30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BaseDecider::CSRInfo</name>
    <filename>structBaseDecider_1_1CSRInfo.html</filename>
    <member kind="function">
      <type>ChannelSenseRequest *</type>
      <name>getRequest</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>a080b7bc98ed8cbdb7c744609b1bedb58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRequest</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>afad3f1e0a61cccc6f6c4fcd2eec42520</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSenseStart</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>a0d10f3b6c7390e4a6c6fcbe51fd61219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenseStart</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>aa0175f22d381055a82117bb689cb4713</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getAnswerTime</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>ae1668895f55eb97041d93786b6a677ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnswerTime</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>ac9baacbc20150f21914210b40946cde9</anchor>
      <arglist>(simtime_t_cref answerAt)</arglist>
    </member>
    <member kind="variable">
      <type>ChannelSenseRequest *</type>
      <name>first</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>a26075a0ae80ee25ce7b7ba995673bcbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>second</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>aed3b58f011fed59dd13105fa1f942f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>canAnswerAt</name>
      <anchorfile>structBaseDecider_1_1CSRInfo.html</anchorfile>
      <anchor>a2ca7a4ed7cd25be1c2b7c3dfabae79dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedIterator</name>
    <filename>classBaseDelayedIterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedIterator</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>abcab9572c280c99fef14ddd0a87412f9</anchor>
      <arglist>(Iterator *it, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedIterator</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a8e625392d1c0358b482f54d87ffb5887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>ab5238914bcef66527dd7a8ecb951d5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>aa0c12e487930b671c16e697782c4fcf3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a46a0da319b981b94d0c6e2bf73d0e28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>abc9b1227759ade39f70bde566d7ca596</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a0f4e26de87701b0d5522101c6161c568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a7315a6ec3aa9f6267fd84e207c9e09f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>undelayPosition</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>adc48153655a44a6cb038437df65dd8d8</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a2f79592eaa15f47a5c2758572ed58ce0</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a13b0a9510f63d62886e3359f5f1bcdb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a59687f9e8e1cf20dee889ade67390f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a3062c1ea41e22ca984d5fd0d9d50dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>classBaseDelayedIterator.html</anchorfile>
      <anchor>a365d9f953c4c0951a3e19f7c219d67ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedMapping</name>
    <filename>classBaseDelayedMapping.html</filename>
    <templarg>Base</templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(Base *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>ad6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Base::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>mapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseFilteredIterator</name>
    <filename>classBaseFilteredIterator.html</filename>
    <templarg>Base</templarg>
    <member kind="typedef">
      <type>Base::argument_value_t</type>
      <name>argument_value_t</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a37be87cd4c1a250782d6d7b4758ffe15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::argument_value_cref_t</type>
      <name>argument_value_cref_t</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a8044e0808bc668aba7894fdf64a96ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a25ac1815f0f271b16081ac946b3dafbd</anchor>
      <arglist>(Base *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseFilteredIterator</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>aea198a80ef62879176936c11a1d677d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a8fcdb15b385b6002fccb23fda1b05bec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a946f4502219bdeaf9a7bb82beb4aa1b3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>aa988f218dbea7d9dd9b78950f071951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a71f991a67d882d0ecc82ebdc47112f73</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>abbf0aa24021e5cf581e7b9109ae39650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a3ce64085acaddb83c3ba1ff609f13e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a3ecf227a5674b9334de5da528d020807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a76e879408ec7305bc5785be4cf8befa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>aa26459d30e85ab6d4497fd92f2eb6f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>origIterator</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a7522be7db740698ef7e270677d9b0f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseLayer</name>
    <filename>classBaseLayer.html</filename>
    <base>Veins::BatteryAccess</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a70f5ea30a9980d57b8384faed29ec3eb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a87d7e1e5aa73216f07e35d7be4358924</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a8c0fcfb2e806357a65d5bdb1c338627b</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>a5ca2278405070baa474dfbf059930247</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>aa37925527fae20a5de1a755103056219</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>classBaseLayer.html</anchorfile>
      <anchor>ab412568faae75040194e01d5e541dd67</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMacLayer</name>
    <filename>classBaseMacLayer.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseMacMessageKinds</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a8f1f4f485d6548964c1f1cbd75d1d9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_MAC_MESSAGE_KIND</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a8f1f4f485d6548964c1f1cbd75d1d9c7a0e31be8e59c319e75d7a9858ff984a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseMacControlKinds</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TX_OVER</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483a5e5e0e55f7cc75b0d8bad06a212371f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PACKET_DROPPED</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483adebf9c77bbe6f19772866cccbef0fe4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_MAC_CONTROL_KIND</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483a914b2cf7aab4597589adb15d8fec8b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a1cd886803a8d77f30ece55862ad679fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a23cf7efcbdc6fd3f30c5e8209bb4e033</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a61c82dc3b225eac37f7fa9936c28c2c3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getMACAddress</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a4592cf257cd761ffb1167831d4f681f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>adc87295362ca7859cb6fe2a5bbe3c90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a6de2ca07018de313a7147a03e6d77bff</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a413375cec02b990a521b62086a02264c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a95ce03241a7dd66baa693607a74eca07</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a796d456d593dfab3188b37e506dd76a8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a4a1a81a79e239a0724f3b06d9f18c505</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>ab5c40c53eda6e5a5041bddebfab6e0b6</anchor>
      <arglist>(MacPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a32d47cbd6940c09071e0f0e777cf6716</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Signal *</type>
      <name>createSignal</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a28ca155ff241c3e202a94724cc87b232</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref length, double power, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createConstantMapping</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a1c05648ce7d11bc767f9acd3d64ee067</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createRectangleMapping</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a23ed373dcfd98255df5f5ffa7e30eec6</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ConstMapping *</type>
      <name>createSingleFrequencyMapping</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a3da0a0f34a80528e6efcb5593a073c55</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref centerFreq, Argument::mapped_type_cref bandWith, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>ad7e8421f697848e8122e2261543e7780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getUpperDestinationFromControlInfo</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a64013bf689c9da4e79fa48116e14730e</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setUpControlInfo</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a7ff1f42ff72aee9670a012ebffb54881</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setDownControlInfo</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a999ed9cd9f29bf3470711cf37429ca62</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>aa7b1e6bdb734765a9f4eff7d486dfbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a8c275aa0a523808a89d2e45ade46ed1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>a8a26df9da07801d8ccb530530ef57ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>ab3111737703e0d4b5198478fb1f75e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>phyHeaderLength</name>
      <anchorfile>classBaseMacLayer.html</anchorfile>
      <anchor>ac01d16af5596dd0a23f8906a7225d5b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMobility</name>
    <filename>classBaseMobility.html</filename>
    <base>Veins::BatteryAccess</base>
    <member kind="enumeration">
      <type></type>
      <name>BorderPolicy</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REFLECT</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692a829b74c4a43c1dcf653cefb1f013442c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WRAP</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692aa1e7cff6cab8bb2e5377954240e5e9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PLACERANDOMLY</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692aba3a649e4ab9c49d2ba504eb267d6883</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RAISEERROR</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692a8e407aa7afa91b56f22fa0288cf64800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseMobilityMsgKinds</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOVE_HOST</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320a9b0e54a8ea2af0056ca7f6e3adf124d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOVE_TO_BORDER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320a6b9f8a418aa568c2fbb42a631395edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_MOBILITY_KIND</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320af70de9be1467bc9627cb6087220ec40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BorderHandling</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOWHERE</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a853b2e0d3f99c2f6d055d42f0232ddea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>X_SMALLER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1ad18e65d34ff94919ea9852c030d623f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>X_BIGGER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a702032487f04b9f8175057934fa4c095</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Y_SMALLER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a7bc26c24e4f04e88bba2e6c1301ee80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Y_BIGGER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1af063b05510ed72bec2922676d5622ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Z_SMALLER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a9f9d36e258d30fc681cac3086bcfd5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Z_BIGGER</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a59d4a5a1d81e57d64160a91dfc051e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMobility</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a15457745146da27bc0a05dc3a534406e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMobility</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a911e98f6eb04ab67801e206f57e9daec</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aad7ebb839ae5726f97ccf149ae661333</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa89e41596faff0067340643acbab27d0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a342341f600bd2ebdbe9f39b0c44f12f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a43e40c6e56445ca9439d7d44a37b12c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a7dad57a3df9fc0e67b8eeb908a8b994f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>iconSizeTagToSize</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a27e651dbd0a13f5f1a40c8ac531fc367</anchor>
      <arglist>(const char *tag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>iconSizeToTag</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a4385f329f6d9df7294297c98028083e2</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a70b2b357a4cef14850cd4edd440a13a7</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBorderMsg</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a1cd10753592e8eeb018d8f774ce862c6</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a9774524fd5f2d3ef348dc67f2af0f491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updatePosition</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a291eed23c07d4693a5fa4164aa80934e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeX</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>afd83457f242d92ccdc2e2b5a3b2c4dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeY</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a09941dabdb81e67c77fc4794167c9351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeZ</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a1245dec457a2d33c8dd1a70ccd74ea33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a8fa3e89fe9d550dfd95c341fcaa77e31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIfOutside</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aae36006995d117a723134cbe1fee5e90</anchor>
      <arglist>(BorderPolicy, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>acf49d9a33d055f987e4d978af8e3a30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BorderHandling</type>
      <name>checkIfOutside</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab69f42caa7932524bf470f0799b4aac7</anchor>
      <arglist>(Coord, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goToBorder</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a3bf65a049293dc4c7043554c04555bdc</anchor>
      <arglist>(BorderPolicy, BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectCoordinate</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a6c817348be2c3586777a85bb60e2b3f1</anchor>
      <arglist>(BorderHandling border, Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab9e4cd0caa3fc245ba934f5f5bd9fc49</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a78f392149c0f8185e07dc9a51286bf85</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a933475f97d6ab7bf834e4d07beda131b</anchor>
      <arglist>(Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a6622a6eae6f6fb4bc2511a9f2d7f0593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move</type>
      <name>move</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a1034fe1aa236bfa5bc2ae4adf3de8da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>af3cdd1192cfb8e70e53f36d03a20f1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveMsg</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>ab4535d31d36713218b22de49a1ecb2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aeb7ee6624bec58357e8fae54859c76c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>scaleNodeByDepth</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a686f8eba70fe8093c6f24eabace93f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>playgroundScaleX</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a15a299a658a5656b05e36ef100752399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>playgroundScaleY</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a366f2ef6324b7bfd4c04f235da9d077e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origDisplayWidth</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>af9f5b080a2f693930f895a0e99adfb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origDisplayHeight</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a1e9e54a292ca10e81e6b3972e9b5ebbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origIconSize</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>aa729b28341a19fc6683cb8aea89fef3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classBaseMobility.html</anchorfile>
      <anchor>a40070f59b11031830ba8055882ef43dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseModule</name>
    <filename>classBaseModule.html</filename>
    <base>cSimpleModule</base>
    <base>cListener</base>
  </compound>
  <compound kind="class">
    <name>BasePhyLayer</name>
    <filename>classBasePhyLayer.html</filename>
    <base>Veins::ChannelAccess</base>
    <base>DeciderToPhyInterface</base>
    <base>MacToPhyInterface</base>
    <member kind="function">
      <type></type>
      <name>BasePhyLayer</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a6b1702943ae38fac8dcfd82afd0424f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePhyLayer</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a0fc69907490ed2752d2a888ef26348ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ae32062e99cf8196496491bb6800ed3d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setUpControlInfo</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a39b6850ec657a0c898ccc59ca1ba9b4b</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a905b025f39422a9ec57b9349ad36269c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a5170b3aadae25dc6b9e61974076be04b</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a7620c7de01e2dede5a68f13fda69e0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a80855c8d3f55e6d4f8abaa66edd0264d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>aa662c2194a72e2c46f6b25e7e6901834</anchor>
      <arglist>(int newRadioChannel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a9d7df0ea2dd543f2722640716cda38e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a6e0968b1ab649992bad2e3e6e05d1e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a44a1a7e9bc420aa7b835c8a7687f97a5</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a42664d512b88bedf58b5d21adc180984</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a76d0386516d18d1cc64af5ef6fb315cd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a0e9f0ccf4ed1d8377aa3f00b931a3e71</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac2dce47fd96bb69e24977a7cd5f67a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>aa4c75db0828cf579907b1e9a9c683e99</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rescheduleMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac012473c1be0df5df5f901ad1a3e890e</anchor>
      <arglist>(cMessage *msg, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a81153199f268b4831f42b20b06959764</anchor>
      <arglist>(double amount, int activity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a08a74a5ac460912c7bd13ce8a2456d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a4be8fe4abf2c9705625f93114aa6d337</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>ad7c56c9ed2db85ecba91900c35e795a0</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelMobilityPtrType</type>
      <name>getMobilityModule</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a130bfd04f4e40b490929f99d96cc1aef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderToPhyInterface</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a945390696eba2d7cbee66a3a2e74ce5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyInterface</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>ad64ec5441297a309c39bae51cd72fcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>ProtocolIds</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac815f0d4eee015857055e715d67ea087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>GENERIC</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac815f0d4eee015857055e715d67ea087a896ce1408fae0c626b49bd3c29f20717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>AirFrameStates</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>START_RECEIVE</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1aa0cb17278ea70e7e327de30aad32e0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>RECEIVING</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1a2900d4f5f03ec09b83e5c24744924755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>END_RECEIVE</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1a8c8f8a59dc873e035f19750598ceb157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AnalogueModel * &gt;</type>
      <name>AnalogueModelList</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac8dca20c727bdb1494d97da1c64bb55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, cMsgPar &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>af29abf3259af16b051ce48b0db7a64c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>readPar</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a379b5527a61ac5dfe378691faca6c2d9</anchor>
      <arglist>(const char *parName, const T defaultValue)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a08704deaf03b73c8eda67cc60e670853</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a3880154c8db8b8efb5315cb6ef8f6c41</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Radio *</type>
      <name>initializeRadio</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a93b118fa0564e329eb2ff68279f4584d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a419df7f53684ee758de1dcabb959e10f</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a095d1b5fd25b9ada3ac86d3c9237c3f8</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a1e42622259807fe3cf06935e7a818ccf</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>adb6dcf56295ceb53b34e83eb409a40a2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishRadioSwitching</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ada6c556e50ead146f822dadf6ea2a472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>myProtocolId</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a3b24629e8306bac3186a94a3622ca5ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKnownProtocolId</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a6b5052a6a2515e016f1e2e934cf09642</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a8d6f371fa6ea6ca89cb78764a05f31dd</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a17b1d469775962d23835dd5f43a639ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControlMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a4cab267d310b5fd6cefe613fc8dfe71d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a17088ad93f59e143ff6c7ba866a31982</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a6866e3f79df84cdb5550a51d6502463f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameFirstReceive</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ad0e987003f09275647a060e8a72cc5fa</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameStartReceive</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a671f083680882230b754b7e9578e6274</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameReceiving</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a9dbbcf0004b22c622ec4b06a19b4f564</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameEndReceive</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a4f8fde562c0004b498fc3294c3f54c2f</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlMessageUp</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>aaa439e85a8bc20a39477055aecf04993</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacPktUp</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>af5ac9665c3f3eaee7846ef0ba141b858</anchor>
      <arglist>(cMessage *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageDown</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a1fe847ed3e50ccf3a3740234dfee42b1</anchor>
      <arglist>(AirFrame *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSelfMessage</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>aa59aef501cadd36c94d4f82efe9b64be</anchor>
      <arglist>(cMessage *msg, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>calculatePropagationDelay</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a01c12c70034ec0583ee5f4e1ac0f683b</anchor>
      <arglist>(const NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToChannel</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>ae370934ad7b1feacc1cb6bd6ad437198</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocolId</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>addc3dfa9056f0acafefacd34d5d059bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>thermalNoise</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>afedc2cd6f80601fb040b56256e6cc756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxTXPower</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a80fe7028b2fbf92f61dd30b79e30a86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a7eaa041636b623066b5abd87a38afa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordStats</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a71f6c8e91a8f597a5d213b30c64b0cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelInfo</type>
      <name>channelInfo</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a38d35bc99079eff49deb6c870b1175e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Radio *</type>
      <name>radio</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a6aefa7200582ec18d6ac5f8f8092a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider *</type>
      <name>decider</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a5be00b3a133596d8ed78a9f8e38973d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnalogueModelList</type>
      <name>analogueModels</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>abc00fc5777ef641f72b5a4d85bf65c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a49fcd06f6c27aab1d14d13eaecc09f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a334fbbb0a1608058c46906ef2c90045f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>aca9b66970dd836cc696dd0907c58598b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ab58c7430371f1ba135e0a641d150c1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>radioSwitchingOverTimer</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac28de586b21162c377a180233299a1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a2ce22bc20ab469e99352958face5468d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a48f5fc0fe990ee5dbe31911437a586f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ad1de573273df163a5fc2b8b537c65e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSendDirect</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a6d0796809ee0e3bca6532d29e2c6691c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a435c27e36989ef8b6e6dc068a3736e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a85d1389667af1253b9fb3acdcd120554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePropagationDelay</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a00c73e189cea1d023bd9600f34a89021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>ab9090e4cc34e9f33bad7fc8e15f06c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a0e35ef7396811a197d50d49d68369d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static short</type>
      <name>airFramePriority</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>ac68a290868512c992f8a49b6af7b6c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>add99c6c8d9983984e4b9ddbfcebb9b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getParametersFromXML</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>aa89a9272b99ab3005347301c2effc254</anchor>
      <arglist>(cXMLElement *xmlData, ParameterMap &amp;outputMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeAnalogueModels</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a8ea7353793eed2f1a7b0cd1caacd72e9</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeDecider</name>
      <anchorfile>classBasePhyLayer.html</anchorfile>
      <anchor>a9da4f8ffaa373a0de7895cbea524816b</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a94647bd7fd3cb6276450a17a2473f031</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BasePhyMessageKinds</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TX_OVER</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52ab00e54021af4a33a84ac61a7543c7528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RADIO_SWITCHING_OVER</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a876c7366bd2bcb675b41e60007831d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_SENSE_REQUEST</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52aa6ff58f5815b155504d37339ee5c7222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AIR_FRAME</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a96eafe94b4f472727793a10013af7671</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_PHY_KIND</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a25b918f3c2f7bd926610b544bc78497a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>a0dc69d65185a429fcd739d4eadedb504</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseWaveApplLayer</name>
    <filename>classBaseWaveApplLayer.html</filename>
    <base>BaseApplLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>WaveApplMessageKinds</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVICE_PROVIDER</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a9a9785163826105933e79fc32525cf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEND_BEACON_EVT</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a89f7cbe24e3e742076acd2aea394d8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseWaveApplLayer</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>acb0faac09ec7fdc1ba73ccb9b5ee40e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>aa6a5eb1c331615fa7d87bcec1d816f8c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>ac6dc138be8605ada8191478c1e5cb4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>ab403cdb2a546bada74a3df37b477f72c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a69055de1e5462e98e07880476c90e5a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a830e58e379655c6d24319c16f8db5e3d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>prepareWSM</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>aaa76362a567f160e008bf8a1dbde15d0</anchor>
      <arglist>(std::string name, int dataLengthBits, t_channel channel, int priority, int rcvId, int serial=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a3d6389feca9b74c86e5e0a82a7ffa4b2</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a6c6ab22ca68ba54da92b878131758bc2</anchor>
      <arglist>(WaveShortMessage *wsm)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a60322665b20fe28f586c1d090d3be2dd</anchor>
      <arglist>(WaveShortMessage *wsm)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a7e2f6b90747de344330137567d30fe65</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>beaconLengthBits</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a2254709e3a4adb669d0be38e578168bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>beaconPriority</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a29c46f1d7b7b318acda617192c11b7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendData</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a5a97137fd055fd8ec70609cdf6d2d673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendBeacons</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a46a0f0355edd6adf8578aee8e82e9e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>individualOffset</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a1fbb007c8d097f0835ab64d8d9711710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataLengthBits</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>af3b82dfc5a5b4640d1130385ff38bd4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dataOnSch</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a3cb7bca87c3ed7f4fd999f2c25821114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataPriority</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>aa64f5e93849af57871d115fa39bc358e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>curPosition</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a82273eabc911effa74638ef0104939f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySCH</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>ab2dabd99ddb3d7e5c5c760709be09650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myId</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>aecb7da475da7cab714cb3b9f26c27895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendBeaconEvt</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a167ca3ea974c9853e52e8e995c120d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WaveAppToMac1609_4Interface *</type>
      <name>myMac</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a88feeae30cb95aa4608a2e888329d093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classBaseWaveApplLayer.html</anchorfile>
      <anchor>a5a2010a07dea646f6d19cb09a8fa13e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseWorldUtility</name>
    <filename>classBaseWorldUtility.html</filename>
    <base>cSimpleModule</base>
    <member kind="function">
      <type></type>
      <name>BaseWorldUtility</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>aff195a9524d2d3973de0bdbe19ab5ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a08cd184861fa214245ba5c9928e5aefc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a179c8bf9d4613cbb1af0a85d779827a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a37a1abb90a220afdaf6dbdab58299e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a3c574ecd7a055ba2407f638ce548bc24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use2D</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a84c3d488e01d52be51c686e3fb206498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getUniqueAirFrameId</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a1c955c6c60dfa5b46a2bf683a20a84fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a84d040f815027b3098451b02733ac63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeIfNecessary</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>aabcceb57843568c213b0772b08971827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a74ba640d810a03334770d1f150fe1da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorusFlag</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>aa906ac76b1c5b51f6743104b532ed4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use2DFlag</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>abc092a88c21ecc008a7a32bc311201e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>airFrameId</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a490427de9d083bd510a4370002f70716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classBaseWorldUtility.html</anchorfile>
      <anchor>a3c5b996451b88c37022a191668d715a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIDemo</name>
    <filename>classbitcarTraCIDemo.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>ab10f0df39db32429e5851da7b2e28909</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a4c2549d0cf3ce26c4f0b68dce166623b</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a64f118a48726606c02d7fd82502cedff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>af2984eb6417ffa0ed330f0080bc12586</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>ad1cc4a5a0019cb3318e22a2ac3745e53</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupLowerLayer</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a807bdcf3760cc635d198c9959a4c512a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a1e270a399ab9590d5ec18faa6162aa1a</anchor>
      <arglist>(cMessage *apMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>aff15516dc1a5619112d642e8725c2529</anchor>
      <arglist>(cMessage *apMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMessage</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a69ddd211c7dd3280c8a44356c0b56f71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a07a89eebfe7a7583c2ae94e4408a9aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>abcf9255ee652c943a679889e233bfe7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a194dc7d665a8b9e25aefc2a08de6e6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>socket</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a9838a9fd5d2e1aa5a370681dd850b214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classbitcarTraCIDemo.html</anchorfile>
      <anchor>a0abc1e163f992d5af3534dae0b4a570c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIMobility</name>
    <filename>classbitcarTraCIMobility.html</filename>
    <base>VANETMobilityBase</base>
    <class kind="class">bitcarTraCIMobility::Statistics</class>
    <member kind="function">
      <type></type>
      <name>bitcarTraCIMobility</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a274ab15316ce67592399b110e62f6f3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a23bfd4b351042e4c4541aa23c9a63e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a7629206f93bada906d80bac5a7a8109c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialPosition</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a09182cea99d2dd0ba88ff223c23ece94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a337b81b819ad829ef94f7b86ad111ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a2f5c460dae3b1ce2696d10c3daa39441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a85dcc977d0a53323d32d5c99df036607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAcceleration</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a555928687e0843cd97bf1d9ba49e0b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAngularPosition</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ae5a36c4cb3656e82fbf2714753f0ca6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a3d97ea993180580db2b476ab75925788</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a881b7fc99b122f47645215153fa75601</anchor>
      <arglist>(std::string external_id, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double acceleration=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextPosition</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>afed2ba37769380075eac39eb9cd035a4</anchor>
      <arglist>(const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1, double acceleration=-1, bitcarTraCIScenarioManager::VehicleSignal signals=bitcarTraCIScenarioManager::VEH_SIGNAL_UNDEF)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a62b7d1132e2cb32df13c6199e6f1f7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a5dbdb0f680bf07db5d76683a3477bb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>aa326e7a11f0e07362b3c7f96be633b04</anchor>
      <arglist>(std::string external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a328d75886a5eea7c0bc855528380b085</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPosition</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ac80af92e13418ce3b27655435353b030</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRoadId</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a5834df0eab9122794d040afdd19b3dd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a58c71ee8c025bc4314d019c19bff427f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAcceleration</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>aad41c7d4b431e4cb65574597d00c1454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIScenarioManager::VehicleSignal</type>
      <name>getSignals</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a91998348607e2cd44749e303227a40a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAngleRad</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>add4c0a1bdba2a05c4a200e8a916a4f2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ace4fcc129e30ce36673773dea7666cd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a47ccab7a6caa6f5860531c4492575f21</anchor>
      <arglist>(int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ae8621f2a562aed471d559cb77d5c9980</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a05fe85f1511c8c8d778312428baf7ce0</anchor>
      <arglist>(std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a551b73c92f7f63a930e9207333649f26</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandParkVehicle</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ad6227f229435bda25ab2920929d91f3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a5d209e7dc8200514f682715ac56af148</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ad82f6cbf9d6f39a612fdf0595bb4846a</anchor>
      <arglist>(std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a980fcd8abce7c2a60e531747d02b0ea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>abd5263c95de5c3537c4c8794adb0f310</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a2c652c0665bcbfac79f24edf288d341c</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a64696d2459f5e3aeb8b321253e63ae6c</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a93846c7769e8c27e144a2abd1f3031df</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-bitcarTraCIScenarioManager::DEPART_NOW, double emitPosition=-bitcarTraCIScenarioManager::DEPART_POS_BASE, double emitSpeed=-bitcarTraCIScenarioManager::DEPART_SPEED_MAX, int8_t emitLane=-bitcarTraCIScenarioManager::DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ae070b16e080322567cbb807636f71b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>accidentCount</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ab452619fb54fc31a3a2bf2fe6bce3858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosXVec</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a068944955cb2f9027e99641d970ec954</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosYVec</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a81dd70b1a1fa2f6895dc8223f4b41a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentSpeedVec</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a8f2b77b8caf54c9b729cdd8c8c687d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentAccelerationVec</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>acda8fe6df8095e7b52ea8d899cef4c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Statistics</type>
      <name>statistics</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a904cfd0bef89cee8ce684ba7c662423a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a489686a7d3b43e2f21c7656597eb238b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a643176ac8e8b521f3a28eb3865461b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ad0136024c878f343b890da9ddca269b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>nextPos</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>aaa7bf1c90732316c12127169cb57b4dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>road_id</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ad5bbeb216f8e8139cef71a3367bd154f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a1e2f6281ac4a398321099c544863e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a2c01280599b4701c76bacb30744b52f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a2d55a447a2ffcc7a574f78bd3001a5db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCIScenarioManager::VehicleSignal</type>
      <name>signals</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ae6caa60d86c2e9440bb2aaa35ad9657b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startAccidentMsg</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>adb2704cb06ccf8668df4790c5d6b0384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopAccidentMsg</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>aafc0bcad5cda053b0f540611a0120553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>a5237ffa394b9bb45fe3b1bc11a2c2aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>last_speed</name>
      <anchorfile>classbitcarTraCIMobility.html</anchorfile>
      <anchor>ae828085d961a9021841ce65382e884c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIMobility::Statistics</name>
    <filename>classbitcarTraCIMobility_1_1Statistics.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a3eeac957f7ee8a638d42d94db5c67236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a8b00fc81f4dde811a45fd48c58425d6f</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalars</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a92eddf327cb77629bdbad3b09b66b5ff</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>firstRoadNumber</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>aaa3d376449304849b9b52529efac524e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>ac325e729a1e8727459629a3b33ea50f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>totalTime</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a0a9d6027f70ecbd1247a2cc1ae7f3d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a5ae2552803036e9d6f8b22b37f696632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>ae3496d1f4bfc970b996e3dd30c641167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a3e541b45a611e4fb680f361e7ef24175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDistance</name>
      <anchorfile>classbitcarTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a1c3e20c7bc973e6df5f4e0a32c5c1485</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIMobilityAccess</name>
    <filename>classbitcarTraCIMobilityAccess.html</filename>
    <base>VanetModuleAccess&lt; bitcarTraCIMobility &gt;</base>
    <member kind="function">
      <type></type>
      <name>bitcarTraCIMobilityAccess</name>
      <anchorfile>classbitcarTraCIMobilityAccess.html</anchorfile>
      <anchor>a49fc680939330a56ad63d7b5cc141727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIScenarioManager</name>
    <filename>classbitcarTraCIScenarioManager.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">bitcarTraCIScenarioManager::bitcarTraCIBuffer</class>
    <class kind="struct">bitcarTraCIScenarioManager::bitcarTraCICoord</class>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_UNDEF</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a7dc82d8b6fa42fa276f8ebe52a76e8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_NONE</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55abd08fe294654ce5f44b514c11fc83a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_RIGHT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a01703305d6e3fbc8ed3d5931e5c5ab65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_LEFT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55af277b4b8f753bba408671167a29066d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_EMERGENCY</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55adae0f4979b31502fb82b806eb046e657</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BRAKELIGHT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55ad3e1741b920b749bfe2f4c42f5755b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FRONTLIGHT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a9cbc6d1aef829723e06c2ffefe6e8b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FOGLIGHT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55aa2e9b78c1b1ce9a7ad018f64442cd40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_HIGHBEAM</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55abe5c4cd97dd6911d7c8a691ca8f926b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BACKDRIVE</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55ad6e484258595c61c1b8dfebdf751ba2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_WIPER</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55aaefc9d91ef375a6e66da2011c12e580a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_LEFT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a3d6aa66ee215708de704577ed296c395</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_RIGHT</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a49367e3fb7370be581d58e1d68d13e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_BLUE</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a787c581e3fbb12db881cbbbeb4ff2747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_RED</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a09b602aa3cba9ca197265669c5785155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_YELLOW</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3046960bc9ebaec8dcdceab8c8fe5d55a0861dcac7a013cdbf3ea6a599494fdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DepartDefs</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a07dcb08d22a371eb86e89f23ab6c9895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_NOW</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a07dcb08d22a371eb86e89f23ab6c9895a053d2cb0bc71288277acc8f86160e7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_LANE_BEST_FREE</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a07dcb08d22a371eb86e89f23ab6c9895a0e8ba9ec9804de2741a69bb6d261325c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_POS_BASE</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a07dcb08d22a371eb86e89f23ab6c9895a2d3de6e5098bd44d4062a4b119ffc305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a07dcb08d22a371eb86e89f23ab6c9895a57e4be59ade5caafce2c589188183694</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~bitcarTraCIScenarioManager</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aa73de42cf481cce28ef0fcf256fff5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a26e76d2e8614ead0f02a1b144e548878</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad4b496164f22cfd05ea93fe746b0bb2a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a3defdbf9069e5da720adc9d2007e4d00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aba751b3617cae7f8f0c72dcab6f49c72</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>afe3c8fd41f996093b5324043470b24e9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>acc27d215a082d65f98675ba736fa239b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; uint32_t, std::string &gt;</type>
      <name>commandGetVersion</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a16b8f3f8706f0e7709f8636b34b60761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a7cc35c110dfab41b47117904132e5c2f</anchor>
      <arglist>(std::string nodeId, int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ae7b35d5e53ce14e6ba8702a44fecfae5</anchor>
      <arglist>(std::string nodeId, double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>adb5474a950905fb9dcd212ae4a3cd56f</anchor>
      <arglist>(std::string nodeId, std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetVehicleParking</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a51bb02571c924ee905de638ee75c305c</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetEdgeId</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a089a50b671792977c342d9e2b1167473</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetCurrentEdgeOnRoute</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a91f767e46b12837a499b0707877a3aa6</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneId</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac0f8a6d1b75728eebd761294ce491f5c</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLanePosition</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a31a00e3f6e6a7538ce33b7a827426ecb</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPlannedEdgeIds</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a652ec9391b7d215ddc101aaaeae94cac</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetRouteId</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a397eb5a375d912da24b3bb9f712f9d36</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetRouteEdgeIds</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a50a95817f353aaa074840e719c2f24a6</anchor>
      <arglist>(std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a776770e087b0db0a17fac0769aa2a0d5</anchor>
      <arglist>(std::string nodeId, std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a0c500b72156aedb9f2a1e6c2723bb296</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a6a62df37c7cb00c793c2178782ac4fe2</anchor>
      <arglist>(std::string nodeId, std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetTrafficLightProgram</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a514684a0dfc99c4aaa59fdbee8dc39fd</anchor>
      <arglist>(std::string trafficLightId, std::string program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetTrafficLightPhaseIndex</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a953cd8226055c1ef984ffc0acbd346a0</anchor>
      <arglist>(std::string trafficLightId, int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad65887f3e7f95ff50e33f46f91aa06b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad1dff260bdde47dd6f53b142d8b48f0d</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a2b756481c94748ad10c6ad573062bf80</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a27b1f04b4d9972115927cb9dc045b0de</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandAddPolygon</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>abb865909320912cb694e999b960a2eff</anchor>
      <arglist>(std::string polyId, std::string polyType, const vanetTraCIColor &amp;color, bool filled, int32_t layer, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandRemovePolygon</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac7312c6e016ca7eeb6a0bfbdd3c176fe</anchor>
      <arglist>(std::string polyId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandAddPoi</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad9ea7156419eaed002587b2e063abd6f</anchor>
      <arglist>(std::string poiId, std::string poiType, const vanetTraCIColor &amp;color, int32_t layer, Coord pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandRemovePoi</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aa2b0f23550de61abb710b3df149cfd63</anchor>
      <arglist>(std::string poiId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetLaneIds</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad20f0c0e350b1cbf94d69e49e31fcb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetLaneShape</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a8e322a4b5732f0d6dd38838536e5b2ae</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneEdgeId</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ade0341ecdcad4efeb97281bdc0b49f9c</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneLength</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad1f2d9d1627017290464a9cdd64803b6</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneMaxSpeed</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a4a312f9be68a89609f73ac7fd4a4124a</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneMeanSpeed</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a2ab37bfb759383bc91e1092b5bc0dda6</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetJunctionIds</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac4bc23ef277172143798cd355904632d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>commandGetJunctionPosition</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aa826dc9e3e58c076bccacad4e71f30d2</anchor>
      <arglist>(std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>abd22015b6996adbecda8b85a0cf051c9</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-DEPART_NOW, double emitPosition=-DEPART_POS_BASE, double emitSpeed=-DEPART_SPEED_MAX, int8_t emitLane=-DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, cModule * &gt; &amp;</type>
      <name>getManagedHosts</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a01a1e373703f7aec14116b6c8e32ea0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>getCurrentTimeMs</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>af5c4a6d6417be0dfca303c2d28ad28f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeOneTimestep</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aac70d57a132cfda7752665d7112cbadf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a873c05d1baf24820224da8289449b18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>adac6e146cab9eb9de72b2700e285b1b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addModule</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac5b0b1b0e1d0d3cbd370f22bcde46483</anchor>
      <arglist>(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double acceleration=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getManagedModule</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a6f246c22e0afdece3336b103dc78f09d</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteModule</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a2f233dc51bf67be955730f0242bf8507</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isModuleUnequipped</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a4e0a92534d43520c69f1fb9baec8fe71</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInRegionOfInterest</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a8c3df5da544ca81c450be8a405e62603</anchor>
      <arglist>(const bitcarTraCICoord &amp;position, std::string road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bitcarTraCIBuffer</type>
      <name>querybitcarTraCI</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>adcffca987d4f11b5d01667f989326d39</anchor>
      <arglist>(uint8_t commandId, const bitcarTraCIBuffer &amp;buf=bitcarTraCIBuffer())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bitcarTraCIScenarioManager::bitcarTraCIBuffer</type>
      <name>querybitcarTraCIOptional</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a76aa3a4bb36a6108077f9fc2665745b7</anchor>
      <arglist>(uint8_t commandId, const bitcarTraCIBuffer &amp;buf, bool &amp;success, std::string *errorMsg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>makebitcarTraCICommand</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ab684505f6839c0e07c4ee39755060e14</anchor>
      <arglist>(uint8_t commandId, bitcarTraCIBuffer buf=bitcarTraCIBuffer())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendbitcarTraCIMessage</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a623c3cf4f9a38d9b6fa5bb99bc3a8d72</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>receivebitcarTraCIMessage</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac3e4c6dd700173bec27699adbedee37d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>genericGetString</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ad4efbca6c52fbe14e1ff3dfe0cad5e2c</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>genericGetCoord</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a86ac1e21d073e1e230464d263b3cc39f</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>genericGetDouble</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a2a6f6d84d0ee9833e2733422aa4f4974</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>genericGetStringList</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a13563ea164bf6cba4a0d530efadef268</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Coord &gt;</type>
      <name>genericGetCoordList</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac0f0e188770690fbe8c6a6f3a631572b</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>bitcarTraCI2omnet</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac3f3befe4473b01f14edeb8ac337f1f6</anchor>
      <arglist>(bitcarTraCICoord coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bitcarTraCICoord</type>
      <name>omnet2bitcarTraCI</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a98d6fc88344c7ea1d396e15fc3e7861c</anchor>
      <arglist>(Coord coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>bitcarTraCI2omnetAngle</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac1d3b1756e40808f3a3e44dff6e5fbf0</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>omnet2bitcarTraCIAngle</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a6dba376c5810d28a9f63f96c43c6c6f3</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToVehicleVariables</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>abc913cb17ebdb3ce996c3e8dc4525a4e</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromVehicleVariables</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a1005e912b303b95905df46b464f5dc23</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSimSubscription</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ab36b248543e72ea19ebaa321b80c9f12</anchor>
      <arglist>(std::string objectId, bitcarTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processVehicleSubscription</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a55c6496268ba5e0a52bac613ada0fc0b</anchor>
      <arglist>(std::string objectId, bitcarTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSubcriptionResult</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a9d03b13fa1764ddaeb5b4948e6b5ef5d</anchor>
      <arglist>(bitcarTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aa07edcf2c419f80e6c18837e72ad7732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>connectAt</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a6e450d46ebd343996743bf52aedf8db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstStepAt</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>aa9e2d74eb88c87106e1d08569c366eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a76c12c9eb875e766ab782c61a36378e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleType</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ae1d55dbff0f6efde52d13a68c1f61f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleName</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a4005050b631e5fca40a82cff774924ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleDisplayString</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ae3c9b4b3a4a4df962abce909c1788c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a9c09ec8363634a3b90f62ef6cc036bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a2b443056e003ccdbde3a733d5e597d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdown</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>add7985dd970b37223da1765add521725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>margin</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a28396501fb537a0ee62be92e2046f48c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>penetrationRate</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a1db4414181fa1da298b5dd1c180ede04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>roiRoads</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a21679956512f1bf9aacedcf4aec2b10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::pair&lt; bitcarTraCICoord, bitcarTraCICoord &gt; &gt;</type>
      <name>roiRects</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a1ad51d72f4561dd81a7e15d29633d7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>socketPtr</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ab3e5bf8880a40cdc7b16a1258b59b1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCICoord</type>
      <name>netbounds1</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a4f5eadb2b6f885aaf3fe7d3d61ebc0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCICoord</type>
      <name>netbounds2</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ab786a1fa5bd9d9218e010940e69e5b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextNodeVectorIndex</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a94a81dbdff67a169ebfc8b7a9ec6a663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>hosts</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>add8c1f5cbf60c293e17870bc1cfa8b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>unEquippedHosts</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a9f5a3877ba09e4d30cd3ca550dba3bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subscribedVehicles</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a21500342a922bc6e0beeee89c1f625bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>activeVehicleCount</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>ac55f289cf898f82dfdad5d56427c07c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdownTriggered</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a63a487c29976860ca6a453c05e0033ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectAndStartTrigger</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a1e18e04162b18046c7f5896ba1bf49b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>executeOneTimestepTrigger</name>
      <anchorfile>classbitcarTraCIScenarioManager.html</anchorfile>
      <anchor>a0bd9686449e93214bea3ff11c8546242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIScenarioManager::bitcarTraCIBuffer</name>
    <filename>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>bitcarTraCIBuffer</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a90ad97d8cd984761efdb8dbd32e768d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bitcarTraCIBuffer</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a9f53f5048ca4324b9ce1976ef22ee32e</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a9ffe431a97dd3cbef7b77e45d80934ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a4a12d48a3679ff98e5c9fdb7ec218af9</anchor>
      <arglist>(T inv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>acc35d59902b35125866d5ea4ae297408</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bitcarTraCIBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a0b18428ec36a4896aceca3a1ccc01093</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bitcarTraCIBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>ae9057b938af74ef8e4c6bf82d94cab31</anchor>
      <arglist>(const T &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>ad8c629c5e1c0b6032e8e29f46470db01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a827fbf3bf1d47d9e9ab196638196df1e</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a1fc35a73855a549a01601c015fb89540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>accfd57393c4e170b1ace777d8b4dc018</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hexStr</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>ac8fe157bcdb3421e13802dffdc977aeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>aee1105c30f48237a26fcc6d67d89c278</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a893820010047db60926cdcecbbc8385b</anchor>
      <arglist>(bitcarTraCICoord inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>ae30959be52d431da7d749c299df0fe9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bitcarTraCIScenarioManager::bitcarTraCICoord</type>
      <name>read</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a57e131b84feb99c0ac4a4654289b7d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a3e3a1f765c74f9de554de76e913d8dae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>buf</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>a77220e2f8ad054bf434fd80f719c4e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>buf_index</name>
      <anchorfile>classbitcarTraCIScenarioManager_1_1bitcarTraCIBuffer.html</anchorfile>
      <anchor>aac5ae8d8ac476c60bc78e270f5608e4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bitcarTraCIScenarioManager::bitcarTraCICoord</name>
    <filename>structbitcarTraCIScenarioManager_1_1bitcarTraCICoord.html</filename>
    <member kind="function">
      <type></type>
      <name>bitcarTraCICoord</name>
      <anchorfile>structbitcarTraCIScenarioManager_1_1bitcarTraCICoord.html</anchorfile>
      <anchor>a22421aeb0a455b426d2ebe85d4534509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bitcarTraCICoord</name>
      <anchorfile>structbitcarTraCIScenarioManager_1_1bitcarTraCICoord.html</anchorfile>
      <anchor>a867450d55771794db306d94aa47bef0e</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structbitcarTraCIScenarioManager_1_1bitcarTraCICoord.html</anchorfile>
      <anchor>af0c9818df1cb44f4dbe4f6490ca38822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structbitcarTraCIScenarioManager_1_1bitcarTraCICoord.html</anchorfile>
      <anchor>ad98ec5bda799fd0ac28325b33e5f0b1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIScenarioManagerAccess</name>
    <filename>classbitcarTraCIScenarioManagerAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>bitcarTraCIScenarioManagerAccess</name>
      <anchorfile>classbitcarTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>a62bd167e92ff71336dd9fd265f3ffeed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bitcarTraCIScenarioManager *</type>
      <name>get</name>
      <anchorfile>classbitcarTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>a3336dea26d268a6065a57d89e2a3e885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCIScenarioManager *</type>
      <name>o</name>
      <anchorfile>classbitcarTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>a33718b00281d4c23aabd0293bc20eaea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIScenarioManagerLaunchd</name>
    <filename>classbitcarTraCIScenarioManagerLaunchd.html</filename>
    <base>bitcarTraCIScenarioManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~bitcarTraCIScenarioManagerLaunchd</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a488f76190ffb9c3ccde0cc070c11b9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a2036f036e5e2d5909600996d4fa174ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a7b3ef461b171c5cc81fc0b850808b8fe</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a4a7ad1ca52c0ccf6b39b6b83b19e72f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>af721a4733ab1abafa6b396aa9fb116b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>launchConfig</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a8a90948a05246dd5a93aef3efaba75ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a505cc9120e8549d32c7f0872b6d78ccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCIScenarioManagerLaunchdAccess</name>
    <filename>classbitcarTraCIScenarioManagerLaunchdAccess.html</filename>
    <base>VanetModuleAccess&lt; bitcarTraCIScenarioManagerLaunchd &gt;</base>
    <member kind="function">
      <type></type>
      <name>bitcarTraCIScenarioManagerLaunchdAccess</name>
      <anchorfile>classbitcarTraCIScenarioManagerLaunchdAccess.html</anchorfile>
      <anchor>abbdb88cef46001eef9385a7f7a9941e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIScenarioManagerLaunchd *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bitcarTraCIScenarioManagerLaunchd *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitcarTraCITestApp</name>
    <filename>classbitcarTraCITestApp.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a39cab2d1f0c4c0212574f08303785489</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>af5ab0269c591aaad5d53b7fb0593fa21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a07fa3d9684f4b3b54a43842760f721dc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a9dbc80b1ae5c4137300d1775e6444c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a47d4343eabc23ebbc6a4ff3d44de0cb9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>ad3d6b5d8b550d07bb66a05b78eb054a9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a86370f798eb48f16932a3307188bb5a6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a87dd805d76bf24d22ae3080aa5e4a9b7</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a8e79bdba46b7e333957c6f90d1b8b374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>af512d4a02f725ce5798fe5489fcff6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitcarTraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a74022292c917b8de8a8dd2f5880402cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a0c124c7c4cdaf559694a2c9015aad896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>a5dd11f372daa5bd90d8831a326b6d612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classbitcarTraCITestApp.html</anchorfile>
      <anchor>ad3068580e42a207574d22c4f30831658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BorderMsg</name>
    <filename>classBorderMsg.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>BorderMsg</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a250635a0bec2f14b1855dd1b5c05d1c8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderMsg</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a892bfb522edc6ae696c0ecfe67bd5a61</anchor>
      <arglist>(const BorderMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BorderMsg</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a4232cee99cb0b133f0e18bb058c40393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BorderMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a32d8ad057ac6bf61c01f12a4f5f867f3</anchor>
      <arglist>(const BorderMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BorderMsg *</type>
      <name>dup</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>ac8c31b191b65d8d5b53293b500aa595a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>aa0c2031b3010d390ab5c7f36bf0f1ada</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a2026a051adaf6f7ae47fb4e05ae761db</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPolicy</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>aacd57bf5f4b451f2cd0dcb8e046003b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPolicy</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>aa0371a4891d2ea7511a349ca7cc08e74</anchor>
      <arglist>(int policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>ad8cf7509b53714e4e0212e137d371bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a2b86962a5fa313115446ae5739a094e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartPos</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>afc208cb998b157e7fbe712401c5f686a</anchor>
      <arglist>(const Coord &amp;startPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a101c3dea676ad7866d882b6c985b8962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>af7abd3055908df44d8f2c28c8a77d17e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDirection</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>abc409044ee39b6ff6fc3e896eae428c2</anchor>
      <arglist>(const Coord &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a845d32b381eeb4604d8e60bd7e0cbf7c</anchor>
      <arglist>(const BorderMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>policy_var</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a1b2ffb07fc0f8a4b28025fd1d3621938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>startPos_var</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>ae92683f5984d7b5abbd6cc2da2579c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>direction_var</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>aa76b9debb404c6b9aee8013be5fe0e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBorderMsg.html</anchorfile>
      <anchor>a6586c285a9c6d38b50ccd815839a6ebb</anchor>
      <arglist>(const BorderMsg &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BreakpointPathlossModel</name>
    <filename>classBreakpointPathlossModel.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>BreakpointPathlossModel</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a4d07c21c43a837163d3d5a4ebd6f533a</anchor>
      <arglist>(double L01, double L02, double alpha1, double alpha2, double breakpointDistance, double carrierFrequency, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a50fed0d02ee407b1ab602a6c203cfd83</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtDestination</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a40f8c0d27eba086bc3a2f6f65af1f37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtOrigin</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a1f36f2c1056bc9365838cc0d89d5e441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>aaf5084c5a5dc83b37a468e5813a8191d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a31580babd35b18cbd87a7ac30b71693f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01_real</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>abaedae8f705d49e1c7fc547eede38c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02_real</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>aea3fe4a5fdc2aead5a651791b07688d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha1</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a9308bf633a9048ae42b7b004d718606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha2</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>ab2b41fdd2300b115a75c9647a7cd7e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>breakpointDistance</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a8f5df99a4fac21e39f985b8af0d9412c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a15f631e677b586706c16f910187c5b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a06dc26cafc4157dabdf10303395f96be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a615b284b0cc9cc289daf530152cff657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>aa9f8dbeb8e7e0f3a9200652d1f81a88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pathlosses</name>
      <anchorfile>classBreakpointPathlossModel.html</anchorfile>
      <anchor>a0c6ce678120579025519343c8a0974c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo</name>
    <filename>classChannelInfo.html</filename>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">ChannelInfo::IntersectionIterator</class>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>ae6ff7ee6e01ca8bfbd16e9934edcbe4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelInfo</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a09eae7a1fb5c4f9caa47be6d9b547061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelInfo</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>aeff578010103ae398c157568eecbaef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAirFrame</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a922ab80fac41c9d89871080940e07cd5</anchor>
      <arglist>(AirFrame *a, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>removeAirFrame</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>af9ee0be843528ee913df218f73d4d713</anchor>
      <arglist>(AirFrame *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAirFrames</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a76e9891245a5df7dd6bfb14e99e343e5</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getEarliestInfoPoint</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a58f6c6cd7e2dbd61877c27076510ba21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRecording</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>abab4a17344f3b254693ed34309c6466f</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRecording</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a884277584d1abf73eaca5df0c61e08c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRecording</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a5b1b8d56aa2fa64b5d79c0cf5c3167a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelEmpty</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a5af012c57b6bb9930b1634138ab65bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; simtime_t, AirFrame * &gt;</type>
      <name>AirFrameTimePair</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>ae51fa470b3f5381d999c77190ccd44f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; AirFrameTimePair &gt;</type>
      <name>AirFrameTimeList</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a035fb2c30e213a68436d78776bb08dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, AirFrameTimeList &gt;</type>
      <name>AirFrameMatrix</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a7cf561db61870e6e49431440061ae624</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; const AirFrameMatrix, AirFrameMatrix::const_iterator, AirFrameTimeList::const_iterator &gt;</type>
      <name>ConstIntersectionIterator</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a0d01442390b9e8dd484e6f4d7975c14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, simtime_t &gt;</type>
      <name>AirFrameStartMap</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>aae7a390107aef628f7c9cbe5efbaeadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertNoIntersections</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a86eb4a8cae1a123e9125cd0e8977c548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getIntersections</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a683ab4280d9c20ad02bd1c080d71b6d1</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;outVector) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a2a4e738d7d51c1dc53ba7404b68103ec</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToInactives</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a002d7a0fff6734bdb6d8ddebf799f7f5</anchor>
      <arglist>(AirFrame *a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteAirFrame</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>aec072c13541b9a22bbdcc8e9103fe9e5</anchor>
      <arglist>(AirFrameMatrix &amp;airFrames, AirFrame *a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>findEarliestInfoPoint</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a627fbeddfec6f3ec1da17a91b97f1051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanInterval</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a1ffb197c5bf86824cd04313da5e9e4ed</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>canDiscardInterval</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>ab4da0befdce7f2b27ae4a61d66ec2167</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanFrom</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a3a3f57cc0461d0cb7b938feb58dc3947</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>activeAirFrames</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a2db96b70bb8678e3e4959985a7ef27a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>inactiveAirFrames</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>ac674b4797484960e332e260af4825c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameStartMap</type>
      <name>airFrameStarts</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a9c7678b4205557914b26e58edcdf44c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>earliestInfoPoint</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a747fb91cec51e11d6c13c895c1010c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>recordStartTime</name>
      <anchorfile>classChannelInfo.html</anchorfile>
      <anchor>a647dc636e9aa2f8a70ac99b604336cb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::BaseIntersectionIterator</name>
    <filename>classChannelInfo_1_1BaseIntersectionIterator.html</filename>
    <templarg>C</templarg>
    <templarg>ItMatrix</templarg>
    <templarg>ItList</templarg>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>ab9c2eba6be7c04585799320ee70eded6</anchor>
      <arglist>(C *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a2acff6a4c595060ffc74872cdc0be1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>C *</type>
      <name>intervals</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a21f4d4a8145bb7f921a55be0ec9ac33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a143c8ac6bba842cfee4036ce28cecbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>ac142323510df1ea0b1a51c216857a2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItMatrix</type>
      <name>endIt</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>ac3b367cf74f12531161bc05e25bbed5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItList</type>
      <name>startIt</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>aad1a3f8f1d790640f55f24993274a349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a4cb31a7b3d9f1547ecbe41d123e929b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::IntersectionIterator</name>
    <filename>classChannelInfo_1_1IntersectionIterator.html</filename>
    <base>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>classChannelInfo_1_1IntersectionIterator.html</anchorfile>
      <anchor>a77aafb5dafd8c49b09be14c63019ef28</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAirFrame</name>
      <anchorfile>classChannelInfo_1_1IntersectionIterator.html</anchorfile>
      <anchor>a6f09ba91d68c971a39fd2c5652e0e4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>ab9c2eba6be7c04585799320ee70eded6</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a2acff6a4c595060ffc74872cdc0be1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</type>
      <name>Base</name>
      <anchorfile>classChannelInfo_1_1IntersectionIterator.html</anchorfile>
      <anchor>a28991accf59caddba2e5cc1874ba7682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameMatrix *</type>
      <name>intervals</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a21f4d4a8145bb7f921a55be0ec9ac33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a143c8ac6bba842cfee4036ce28cecbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>ac142323510df1ea0b1a51c216857a2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameMatrix::iterator</type>
      <name>endIt</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>ac3b367cf74f12531161bc05e25bbed5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameTimeList::iterator</type>
      <name>startIt</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>aad1a3f8f1d790640f55f24993274a349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>classChannelInfo_1_1BaseIntersectionIterator.html</anchorfile>
      <anchor>a4cb31a7b3d9f1547ecbe41d123e929b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelSenseRequest</name>
    <filename>classChannelSenseRequest.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>ChannelSenseRequest</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a17c27bb95acf77cc347b3cdfe60102d3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelSenseRequest</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a5ba4620119467ef99ad1657ad37bd0da</anchor>
      <arglist>(const ChannelSenseRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelSenseRequest</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a3ccb634cea782197a2a22e8975ef5191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelSenseRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a9e1757fb45c30bd7a5c8c32aef70dba1</anchor>
      <arglist>(const ChannelSenseRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelSenseRequest *</type>
      <name>dup</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>ab81b7dc879dc6c2c793ae7bfae399454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>ad68b445d5a8c69a09c65cb11d411e691</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a644364dd659f75c361fa7a20a7c7c434</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSenseMode</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a27ef56313d2b2b273fba86467906518b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenseMode</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>aa42ba4a0c2754a1da0316374af3a5d81</anchor>
      <arglist>(int senseMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSenseTimeout</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a174933b0466807743cee69e497b39543</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenseTimeout</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>aaa2a3a31004b99ef172928a790158a6a</anchor>
      <arglist>(simtime_t senseTimeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState &amp;</type>
      <name>getResult</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>ac233fc2809e37c344bbdf44198da2912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ChannelState &amp;</type>
      <name>getResult</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>ad61ae58418171f8567b243875aded318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResult</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a0d14965927d61f2764b658bd3a8c3231</anchor>
      <arglist>(const ChannelState &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a508a0b3189aa8701c8e6b295fcf67f19</anchor>
      <arglist>(const ChannelSenseRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senseMode_var</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>ab24bad0e2c81643a3c8f74695dc2283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>senseTimeout_var</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>aa0833767f550b5a69983908cc3b5ecae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelState</type>
      <name>result_var</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>ad3f8efeabb242c5df4ef176e8060c25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChannelSenseRequest.html</anchorfile>
      <anchor>a165c7caa939a74b93900b462731f26a8</anchor>
      <arglist>(const ChannelSenseRequest &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelState</name>
    <filename>classChannelState.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelState</name>
      <anchorfile>classChannelState.html</anchorfile>
      <anchor>a60196f82a7cf53dde36d88843343a6db</anchor>
      <arglist>(bool isIdle=false, double rssi=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdle</name>
      <anchorfile>classChannelState.html</anchorfile>
      <anchor>ab09e4515d5428b1287a62ec1bd1b01fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRSSI</name>
      <anchorfile>classChannelState.html</anchorfile>
      <anchor>a74ccec73c5ab45677575e568d3a455fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classChannelState.html</anchorfile>
      <anchor>aa7125a711299c62119c5fe5bc3f43f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idle</name>
      <anchorfile>classChannelState.html</anchorfile>
      <anchor>a6ade0df6803fb49731266569e7c94df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>classChannelState.html</anchorfile>
      <anchor>abb965a7dd22a6000b4a1dc68e55152f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMapping</name>
    <filename>classConcatConstMapping.html</filename>
    <templarg></templarg>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a3eaa7d75fad245144e004160b15499f7</anchor>
      <arglist>(ConstMapping *refMapping, Iterator first, Iterator last, bool continueOutOfRange=true, Argument::mapped_type_cref oorValue=Argument::mapped_type(0), Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a66ebcfc32b9e6179a4d9bbf077300629</anchor>
      <arglist>(ConstMapping *refMapping, ConstMapping *other, bool continueOutOfRange=true, Argument::mapped_type_cref oorValue=Argument::mapped_type(0), Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMapping</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>ad9e4caf92010d92e76ed86a597e3399f</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Argument::mapped_type</type>
      <name>getValue</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a28448679df346f8baf0f889bc0ab522a</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>createConcatenatedMapping</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a575967e48547622110a29a7b90f3c71a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a417cebabd88daa682ea0f3cae877eae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a738035f30d7c365838469aa3eb7e7381</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>ad8c0293ec56947b986802fcb636e42b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getRefMapping</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>abcd3a9507ddf2e6e227fb0682f736b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a7cfc5de32a0d03abfeb9b77fdcf7a413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a4e057daa0a3726cafa70bac0e5393b26</anchor>
      <arglist>(const DimensionSet &amp;dimSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMapping</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>ada5e6c6293bc459edbe69d711eefc8b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>argument_value_t</type>
      <name>operator[]</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a9b0ba6e7aaa108549dcd71069fefe199</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const DimensionSet &amp;</type>
      <name>getDimensionSet</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>acc1559cf5741bec3aa6422e94c5b9cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>stream &amp;</type>
      <name>print</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a526e8d5b948e9b2ce9d729e66b162e13</anchor>
      <arglist>(stream &amp;out, argument_value_cref_t lTimeScale=argument_value_t(1000), argument_value_cref_t lLeftColScale=Argument::MappedOne, const std::string &amp;sTableHead=std::string(&quot;o\\ms&quot;), const Dimension *const pOnlyDim=NULL) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; Dimension, Argument::const_iterator &gt;</type>
      <name>DimIteratorPair</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>afddf6a03d86de6f473b3b36e9523412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>MappingSet</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a633e23b7b9cc932171a9242d286f0970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingSet</type>
      <name>mappings</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a0709d9769788a41c2bb43dbb62aea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>refMapping</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a86b5292b536c5392543dc355111b19e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>a9fe7cdfd0278ebb79d419fe6d4073a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument::mapped_type</type>
      <name>oorValue</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>aabd4c2441626a2cf4af7a727e78bedde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Operator</type>
      <name>op</name>
      <anchorfile>classConcatConstMapping.html</anchorfile>
      <anchor>af39cd5ee8c6ffea095d07d919162ea55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a009539b72014b7bed96402a5c244fca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type</type>
      <name>argument_value_t</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a5dac61c952f423e9a113ee90a4e0bdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type_cref</type>
      <name>argument_value_cref_t</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a136fb6397efc9ba6a16235fa95339db9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMappingIterator</name>
    <filename>classConcatConstMappingIterator.html</filename>
    <base>BaseFilteredIterator</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>classConcatConstMappingIterator.html</anchorfile>
      <anchor>ad12b11e0d0d30c51e75fefa7a31037fa</anchor>
      <arglist>(ConstMapping *baseMapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>classConcatConstMappingIterator.html</anchorfile>
      <anchor>adf03ef18a146cf084b5c3d21f765b031</anchor>
      <arglist>(ConstMapping *baseMapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcatConstMappingIterator</name>
      <anchorfile>classConcatConstMappingIterator.html</anchorfile>
      <anchor>a1c688f8cb08a686a0b7ae472b78f6add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>baseMapping</name>
      <anchorfile>classConcatConstMappingIterator.html</anchorfile>
      <anchor>a0106385bdcdcc52dcb340dff388c7e86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionManager</name>
    <filename>classConnectionManager.html</filename>
    <base>BaseConnectionManager</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>classConnectionManager.html</anchorfile>
      <anchor>abeb688210449aa6a62cb9cd76e5cfeaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstantSimpleConstMapping</name>
    <filename>classConstantSimpleConstMapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>ab15070ead8f2bf11b97432caece79c3f</anchor>
      <arglist>(const DimensionSet &amp;dims, argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>aefcb7fda17307a6362adcab3c288be39</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key, argument_value_cref_t val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>adb5da06631cb62326749f586fa29033b</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>a96ed56741bf27dcfecd59b68709a5ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>a63d0eab4f014a7d8094544c0dca5d7f7</anchor>
      <arglist>(argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>a63f15a3fb6da788dbaaeb8b1ee5470f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a70d0d044f36428965b77233bbf4c698b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>ab0dfc0c3ba9ba222176b29d88a4e6578</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a0794f7d9a8afe0dc17232211eb451302</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a2e89eb287b66b66bec570afa716a7e78</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a8ad8dfd538dabda7d637819a2f34a1b5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>acd1a6f80289031ea0f5ccc6b29cae9d5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a17d3c5e8c98e7451a844d59c95c7272a</anchor>
      <arglist>(const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a8555ecac0cfcfdcc07d540a640975607</anchor>
      <arglist>(const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>aca948c360cd24e21a92c80bf5f53cf16</anchor>
      <arglist>(const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>value</name>
      <anchorfile>classConstantSimpleConstMapping.html</anchorfile>
      <anchor>aa62373ce847f05e4d13c97ca420f3f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet</type>
      <name>keyEntries</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a022d4ae04338d12fad79f4e2f9b1f7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a4a48a5d4281c2bf8eda6b0cd96fb67e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a3804bf19eee40fe09c626b7ca9e0885e</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>aa6f392c0904f66eb264c597980873367</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, DimensionSet::const_iterator curDim, Argument &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstDelayedMapping</name>
    <filename>classConstDelayedMapping.html</filename>
    <base>BaseDelayedMapping&lt; ConstMapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstDelayedMapping</name>
      <anchorfile>classConstDelayedMapping.html</anchorfile>
      <anchor>a4942627acfe6611368e366610dcc39d2</anchor>
      <arglist>(ConstMapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstDelayedMapping</name>
      <anchorfile>classConstDelayedMapping.html</anchorfile>
      <anchor>ae4cd7b0ea626b8ebaed72f87724d8e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classConstDelayedMapping.html</anchorfile>
      <anchor>ab03b6e6623b416997b4467b7e14dce69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(ConstMapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>ad6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstInterpolateableIterator</name>
    <filename>classConstInterpolateableIterator.html</filename>
    <templarg>_Interpolator</templarg>
    <templarg>_IteratorType</templarg>
    <member kind="typedef">
      <type>_Interpolator</type>
      <name>interpolator_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a1ceb4238f825dc152217058c0c7dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a50b68c37524eff1e40fc9b9977476e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>ad73c5dcc647fa3b7a84763a954fe11bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a2c972215632186ddedcda88204012353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a0d498cb8110907ecc04a5a9a005db9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a5c3a2627837864de9aa91b7a8ba4c815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a11cdbe76ac12b7479f1c4697131f6dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a524823dbf762366cded5cfe2ccca2939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a7539b5f9b0b46a26a33d1f1c22845084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a7de2ff003436372e26b57596da13b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_IteratorType</type>
      <name>used_iterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>ad651c523db58df483cb6a3369406ef22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a5ed1c02edab5e7153ef4d29f26e57216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstInterpolateableIterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>af7376c0555d5afa5e51e5fef70d32d2b</anchor>
      <arglist>(const used_iterator &amp;first, const used_iterator &amp;last, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4cbe300c6f575e24a8ab9ab269cac8ff</anchor>
      <arglist>(const ConstInterpolateableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>ad149b5c37b429ccc1fc5615c217cd3de</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpToBegin</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a812d4bd2ab7b419deb933b8c472e1912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a0a190c448a5cfbcd3385c6ccd316542f</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aa9b9aaf1491ef6ef251bc7399aecdf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>key_type</type>
      <name>getNextPosition</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aa545c5da980cbc9a5889ac6cf42d7b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRange</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4eca971338ae67b5ee34503cbcf1f342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4906a4e7a03086a28d108fc262faa969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getValue</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>afd052facfd07e1a139a6da76d129917e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getNextValue</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aca4c6576c12ffd03107960a356e76326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>key_cref_type</type>
      <name>getPosition</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a2d8b162ab907fbc33e47db214f28518a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interpolator_type &amp;</type>
      <name>getInterpolator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a9e45b990b544290f7a0dd1a8155c4978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>first</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a3720bcb63a64de42e4b16cb86df2bb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>last</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a15720a496cb3f3942707583ef80db5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>right</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4bb5e64387644bd21ca8345e15f5bcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>key_type</type>
      <name>position</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a22d17fb7ce4b73648b28e62b34292382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const interpolator_type &amp;</type>
      <name>interpolate</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aac41169286738eeb6ef050a87eb1ced3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMapping</name>
    <filename>classConstMapping.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>afabbd15bb8f50e45901f99633d0a47c9</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a5ff3a15fe6d536fa7a26a3fe1ff1b274</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a951552e2e7f48717ed79d540af538d73</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a741e083fb18412a3d9cde7eac3dced10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>aedc3078350fcad21ac9c02d6f7245ad2</anchor>
      <arglist>(T v, unsigned int length) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>a3fcd3636b4a21f86cccb0d56373aa5a8</anchor>
      <arglist>(simtime_t_cref v, unsigned int length) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classConstMapping.html</anchorfile>
      <anchor>ac01413f3aae147d0c6b9cfcf411b610f</anchor>
      <arglist>(std::ostream &amp;out, const ConstMapping &amp;rMapToPrint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIterator</name>
    <filename>classConstMappingIterator.html</filename>
    <member kind="typedef">
      <type>Argument::mapped_type</type>
      <name>argument_value_t</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>ae00163bcffb33a9448f7ffb33d654417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type_cref</type>
      <name>argument_value_cref_t</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a4e604f871cbb503b4d4f791067dc282f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMappingIterator</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a44af24e1f1842d16c9b9f208f7946887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a1f4cae3b170754a76049b8e81b2e3c07</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>ae3cdbe2115d0e87af0da549b675f2bf8</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a6b6af19266855c21ce3e3449de3f0d6f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a607d741e2d841265851a85670f247c46</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>afdafa6870cd19b3d35674a7bc777585d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a4a6348a453418da95978e570fec046fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>ad4bac7233c154b7086c6124d2e21be49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>a047e853613d5a19ff34526d0cff8fcf9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classConstMappingIterator.html</anchorfile>
      <anchor>ad4419c259e747867f003d07d62d4259f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIteratorWrapper</name>
    <filename>classConstMappingIteratorWrapper.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingIteratorWrapper</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a10f8c5f502b9cd83e9a6fa2d85195184</anchor>
      <arglist>(ConstMappingIterator *it)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMappingIteratorWrapper</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a4d141200d6649997283e8c52447bfa49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>ab2f4649d596e15816b2503c6fd092b92</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a603cbcad1aa33945132a3b8e2cfb769e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a4864dc39a40cada6f4abde4fc6eea3b7</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a6e3de2e2477083e963498675ed8b78b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>ab96b7f5eca4759cdeaad879512340b93</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a01e885f408515be1170ce8af57de217b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a4a4bb9cfd56c7013bf5bd4347fef3293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>ab60f4f00ba7175122fe6afef43b7cfbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>aed031f6f66b8c703523fc41b0a7c2107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>a755c87e1eb464724fcc9e5908d25cfac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MappingIterator</name>
      <anchorfile>classMappingIterator.html</anchorfile>
      <anchor>afd541639ad951794e64291812bc1a1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *const</type>
      <name>iterator</name>
      <anchorfile>classConstMappingIteratorWrapper.html</anchorfile>
      <anchor>af2d62428852c6cefb80bd08c3aa565ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingWrapper</name>
    <filename>classConstMappingWrapper.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingWrapper</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>ae38ced1acdddd0231959fd66219b7bf2</anchor>
      <arglist>(const ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>ac5deda52edead17377c6c01a018baf62</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>ab5c7771bd13f8cdb93f5dce837fdffa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>ab6de270ec2325131f99174860f396025</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>a6706d0676194d24aa60059d93c8cbc44</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>a6a2c09d666b9e986798d0be48add4cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>a648971050f302ee9afd31ebd51d54698</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>a5290d7c6126897a26e810da626d115ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>a17b06a78a2258990893fddf79d9268a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>ab21dd4d22496e6b5dc34b8b6a55553b1</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>a4d721f5e319fdcf56b4285d1368795d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mapping</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>af41509fd27b48035334851487ca0599e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>a2a63bc33cabcddf8c0f5938afd2e3328</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>classConstMappingWrapper.html</anchorfile>
      <anchor>aa83200fa10c919296e8af734a71d282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterpolationMethod</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STEPS</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643a14b1d21bd98ca6e7e77dca120dd5eb0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEAREST</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643afc951c0875bda3e7b8f6a9f7d4e90d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINEAR</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643ac8a952576b8d13258ba0f3c0f1584f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ControlVanetRouting</name>
    <filename>classControlVanetRouting.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>ControlVanetRouting</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a221621fba73dc0eaede6fe786232413a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlVanetRouting</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a7a4778ce61180c0de55df4e3ae7ccb0a</anchor>
      <arglist>(const ControlVanetRouting &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlVanetRouting</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a0826de7b0806bca09809df0f9b6d66e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ControlVanetRouting &amp;</type>
      <name>operator=</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a07aadeddd7f72184eee6e8b5e7e853d0</anchor>
      <arglist>(const ControlVanetRouting &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlVanetRouting *</type>
      <name>dup</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a9a10ec5de320bcbe3364a4e9fc2e5279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a28263fb5fb2b2535ee135ddcd9913592</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>af020d8cde78cd56afedee9d1fcc57d59</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VanetAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>ad6d8d0a78b4f8f3f644ae467f6bec86b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VanetAddress &amp;</type>
      <name>getSrcAddress</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a41cedb5e0aeaeb58547c266726a752b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddress</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a728f69c9ac6819a6b8c30369df67cd21</anchor>
      <arglist>(const VanetAddress &amp;srcAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VanetAddress &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a5900964167124c8c6450aae39e3d0e9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VanetAddress &amp;</type>
      <name>getDestAddress</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a6af9d3b0f929caa9d4be1af3eb63355f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddress</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a805834878aff6d448fbae052fe8b5c58</anchor>
      <arglist>(const VanetAddress &amp;destAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptionCode</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>afff3e0a59327037794679ddde97557a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionCode</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a675d7c71238d830be07cb45ca8f41676</anchor>
      <arglist>(int optionCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a5d25a941b4d43e406c332e0e4c495602</anchor>
      <arglist>(const ControlVanetRouting &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VanetAddress</type>
      <name>srcAddress_var</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a2e6becdf313f6d43431e214998395b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VanetAddress</type>
      <name>destAddress_var</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a9be9c95560e3c664157b55acd422c582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>optionCode_var</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a476a56537c6cabafde3f0b0767260183</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classControlVanetRouting.html</anchorfile>
      <anchor>a700f5c7087bdb1044c9f950ccb4b1c39</anchor>
      <arglist>(const ControlVanetRouting &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>classCoord.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>add896c4f3fb15b4ad762b5270855345c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a93d47461a77c401891842045ff712f15</anchor>
      <arglist>(double x, double y, double z=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>aaa9f1d0acf5250162e417b61eb12a006</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a86994bfa7096155d951abb03dcf30bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a41a7f41a153a3fdbed9dea051f0ae559</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a378973a28985ee7cb441eaf2e70ed378</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a07c952bb96124ea08eeff7bba3de6072</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>adda0e91b0e155a08a50e733dbfdb8837</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a2cafece343439d415c4557167556ba69</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>ab6a7bfcc5c55e5d8edbc7c0cb5a11626</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a9245e5acb794d95128e191e6faef99d4</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>aaf6119bf8bc9953d561729314de8ed5e</anchor>
      <arglist>(const Coord &amp;b, const Coord &amp;size) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squareLength</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a278c018d6de54a020c39b3b1afaec50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>acc536671c07e1af44e6ad9676a6c39ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInBoundary</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a7a42e29d7a15ed0b53e47137549e00a6</anchor>
      <arglist>(const Coord &amp;lowerBound, const Coord &amp;upperBound) const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>min</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a0b27150571dfb315bea3e650ea2956a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>max</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>ac5a32e0e7a527085f63b7b3476ae47a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a0172a22ee75843a96e3a84ebc25f3de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>af6e543e0522076e717bae53102655b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a2bf056108a79437171f18490afbdce2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Coord</type>
      <name>ZERO</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a2d291cbb8e58af4ce8c68e9c8671b5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a93c1d69ee1ef5c0be5f31e9b55fafa84</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a4eb976e0a2def05ecb6464bd170b5fa9</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a0a956e1210813652ce2caa7529b3e0be</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator*</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a432afd497adcff7b20ca23af611ec919</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a310db4e85a0b20ec14725f49aae08cc3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a2dc488cbfa8e8256dfc22b4916b9ef9b</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a321e8d56735047b9e49f869fd8f23d3e</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider</name>
    <filename>classDecider.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a2039d051f59054d39d4a5e0b38f25086</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>ae8ada7aa9855a753d227547c6645fbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>classDecider.html</anchorfile>
      <anchor>a93548ff29f4d880ed488785509dd4dd9</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211p</name>
    <filename>classDecider80211p.html</filename>
    <base>BaseDecider</base>
    <member kind="enumeration">
      <type></type>
      <name>Decider80211ControlKinds</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTHING</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a4ef95cef9e5276bb69f181289d87465b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BITERROR</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a595d4bfa6bfb5e6d1f7429ae87f27232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_DECIDER_80211_CONTROL_KIND</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a8b6521705dd1c0284e213ecc2b56b21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RECWHILESEND</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a781ec72ca9ecc73779b9681bca987770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PACKET_OK_RESULT</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECODED</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62a57c51769b1d9cde91b15a1532ac3e05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_DECODED</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62a63130bce8cfb1de6a27c21d3ea954775</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COLLISION</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62a2f1dd001ad9934e5e1ded44c1c397c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider80211p</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a319d0bea7a920df6f7a7c70bcf2661ef</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, double ccaThreshold, double centerFrequency, int myIndex=-1, bool collectCollisionStatistics=false, bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a72b8fdcfd0e5380592d4771739c88f53</anchor>
      <arglist>(std::string myPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cca</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>aeba984a7f23ef26ce8b22b0bfef88947</anchor>
      <arglist>(simtime_t_cref, AirFrame *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSignalState</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a6ba46e0992f59bc2100ab1b38c5c3d8e</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider80211p</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>adaa8c9ca10cb1ffc4625f8f436ff841c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrequency</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a05c2fcbb2f8b131ed7e43586f0e8c27d</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCCAThreshold</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a8f815fab2dbc152cc6cd5700276276f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a4c22f9e527f35e07963fb24e1babd6f5</anchor>
      <arglist>(double ccaThreshold_dBm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>af06ba4862697730ee05b65f6bf90279b</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a57a6f772fe548a81a5d1eac1dc599544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>checkIfSignalOk</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a01349c12df6c01678d1e25553b754819</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a2a8f4a380e5a2ba44c36e43cc2033270</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ac39637b3c4cfad57ba0b4518fea264d9</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>enum PACKET_OK_RESULT</type>
      <name>packetOk</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a25ca0927f831000b88741dc0db84246c</anchor>
      <arglist>(double snirMin, double snrMin, int lengthMPDU, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a09e54d78f37b5e61aa100ea5b9f3083f</anchor>
      <arglist>(simtime_t_cref min, simtime_t_cref max)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateSinrAndSnrMapping</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>aed94d240800692fe3a7c604a6d11e54e</anchor>
      <arglist>(AirFrame *frame, Mapping **sinrMap, Mapping **snrMap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>calculateNoiseRSSIMapping</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>af3174316d16de21ba92ee86ec5cb50cb</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>aab3907b37bd0779d82550e4016925a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ccaThreshold</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ad26aa09da1e692f14363560fda826a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFrequency</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a63166f2df7290bd1dca9bc8eb1adec07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBusyTime</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>acd7272bc23a89d2ebeeab47c8ca416bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStartTime</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ab3d29f6e5748b9674359b7757efa91ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrame *</type>
      <name>curSyncFrame</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>af8be928f6037ca7a06cb5776703c52b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPath</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a041c8d9549e5639205a7d4b6a7c800f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider80211pToPhy80211pInterface *</type>
      <name>phy11p</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>ad8a330871b158a8fd4cc4ce99be2ded9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; AirFrame *, int &gt;</type>
      <name>signalStates</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a11184426be32a5830853612faf0e917d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collectCollisionStats</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a3e139ef56bba67ee2679fa2b3e395cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisions</name>
      <anchorfile>classDecider80211p.html</anchorfile>
      <anchor>a292a195d8db63436b0943940499dd576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211pToPhy80211pInterface</name>
    <filename>classDecider80211pToPhy80211pInterface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider80211pToPhy80211pInterface</name>
      <anchorfile>classDecider80211pToPhy80211pInterface.html</anchorfile>
      <anchor>ac376bd7fb61c3665f5d3d2f6ed68e4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>classDecider80211pToPhy80211pInterface.html</anchorfile>
      <anchor>a71c8cb40450b065178bd9715b9f890ca</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult</name>
    <filename>classDeciderResult.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderResult</name>
      <anchorfile>classDeciderResult.html</anchorfile>
      <anchor>a8d682a73b124b89f30442a205c060061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeciderResult</name>
      <anchorfile>classDeciderResult.html</anchorfile>
      <anchor>a86937859a140dbe670d6fa3a2f6f839a</anchor>
      <arglist>(bool isCorrect=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSignalCorrect</name>
      <anchorfile>classDeciderResult.html</anchorfile>
      <anchor>aa0ff5bc718c64668cb1ce09c2c7dba80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isCorrect</name>
      <anchorfile>classDeciderResult.html</anchorfile>
      <anchor>a73068fc2669c331401e00fd985ced574</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult80211</name>
    <filename>classDeciderResult80211.html</filename>
    <base>DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResult80211</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>a8d0d0f24e611838ee3fca9d5d416b0a9</anchor>
      <arglist>(bool isCorrect, double bitrate, double snr, double recvPower_dBm=0, bool collision=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>a514a242a3b67f14f7536b6d59e26a7ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSnr</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>a2a5d1c65094164e0fad38927a14a4fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollision</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>a8328c1dbb88c9dc557a10212e05354c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRecvPower_dBm</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>aa025b7812e8d9f910a3b07a2a39b7ac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>ab80f1803479db0321ff8532c9bed815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>a1fe1171bdbc17bfca48bcf700472375d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>recvPower_dBm</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>a7de96c409fbf693e2a173bd99b2992c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collision</name>
      <anchorfile>classDeciderResult80211.html</anchorfile>
      <anchor>ab0609e76b827854ea829835397004fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderToPhyInterface</name>
    <filename>classDeciderToPhyInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>aa7af5edbbc50269a93c10bd682aa79f6</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a2c55926187883df5bc322c947d317534</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a319e413b963f03ff218b0d0024fb66b9</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a3c0676323e402449d0972890c6a14df3</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a73660771f127a990489fb04da07ea39e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>af85151048dba05ec27e378000fd95403</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rescheduleMessage</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a223fb24be9268abba32e90181fa248b9</anchor>
      <arglist>(cMessage *msg, simtime_t_cref t)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a1ee7d31b5bf0cda9e543ac91b3aaecc5</anchor>
      <arglist>(double amount, int activity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a38a43555cea487af37053906bdfbf906</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a9183eb9c635a185f18da631f2d2d9f1c</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classDeciderToPhyInterface.html</anchorfile>
      <anchor>a4183289df127440df1c6ec97af1e02f8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DelayedMapping</name>
    <filename>classDelayedMapping.html</filename>
    <base>BaseDelayedMapping&lt; Mapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>DelayedMapping</name>
      <anchorfile>classDelayedMapping.html</anchorfile>
      <anchor>a253e7a1fed320ca2531272c0fa4d529d</anchor>
      <arglist>(Mapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DelayedMapping</name>
      <anchorfile>classDelayedMapping.html</anchorfile>
      <anchor>a764ddc58c30df062647b07282a235363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classDelayedMapping.html</anchorfile>
      <anchor>a27c3282471353c1e6def96b4e1604c56</anchor>
      <arglist>(const Argument &amp;pos, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classDelayedMapping.html</anchorfile>
      <anchor>ae298d25469c44c9cad54b33e8a787637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classDelayedMapping.html</anchorfile>
      <anchor>a52ea3c1399aaecb055d63c535925bc33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classDelayedMapping.html</anchorfile>
      <anchor>a4dcb7018c79d6db7f0dc884dcabbcec1</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(Mapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>ad6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>afcd49c5a61e13dfa6041531540a252be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>mapping</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>classBaseDelayedMapping.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dimension</name>
    <filename>classDimension.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>DimensionIDMap</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a98893d7be4182e964c9c3e495fed3cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DimensionIDMap::key_type</type>
      <name>DimensionNameType</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a110a42d6dac62cbbf05514781be20bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DimensionIDMap::mapped_type</type>
      <name>DimensionIdType</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>ad9ba8fa6cca0539358c5351eec142132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>aa61dad15f33b6c3d09028ba9e545aa70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>aab6f22bcb151f1b29ece09e500643fc3</anchor>
      <arglist>(const DimensionNameType &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>aa28efdf18dbf57fdc444f2dd75f3da36</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a3ecf516080e05e566b995ceec18681e4</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a28bb1ac7d3b0ed4e8fd43c54203c552b</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a7b87afee490115d91184cadb4dbd19fb</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a63668e024e4a1ba8ac2d819bdf01de23</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a17b7c615400bc79a9e7fcc40f17914dc</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionNameType</type>
      <name>getName</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a722a82180c4e8ea5bf2a4a34898a841d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DimensionIdType</type>
      <name>getID</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a920a9f94db7163fa08ae0f00956d95e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>time_static</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a0ebe0eeec14af70b3f75f675c3eb7a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>frequency_static</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>aad8d4dbdfadd58664a90f34ce4d8154e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>time</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a16cb1f186dd3f48d33a4aebe948001d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>frequency</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>ad4360e7d88c881d06ee61033ad99d66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; DimensionIdType, DimensionNameType &gt;</type>
      <name>DimensionNameMap</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a8bac5d3aa88306fbd0192d13b80ed668</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIDMap &amp;</type>
      <name>dimensionIDs</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>ada939a13a34a9c28edff67670caf873d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionNameMap &amp;</type>
      <name>dimensionNames</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a5dd35619b73de635a0a57aca248af68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIdType &amp;</type>
      <name>nextFreeID</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a7b9273f9c3c429aa1cc924964645936e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getDimensionID</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a33426bf3820f16042adcb24948592877</anchor>
      <arglist>(const DimensionNameType &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionIdType</type>
      <name>id</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>a4d051377fa3482bdb1f6463eaded749e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDimension.html</anchorfile>
      <anchor>aa6723258d45f8e2d57a861db96d05a43</anchor>
      <arglist>(std::ostream &amp;out, const Dimension &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DimensionSet</name>
    <filename>classDimensionSet.html</filename>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a09645917a6984ef63aea0f3428fb97e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a743d9c2b59961b111abb268aa4258b06</anchor>
      <arglist>(const DimensionSet::value_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a3a857486e570401c8a748f90a9a63f8f</anchor>
      <arglist>(const DimensionSet::value_type &amp;d1, const DimensionSet::value_type &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a8891447188b7e386f82e536546756157</anchor>
      <arglist>(const DimensionSet::value_type &amp;d1, const DimensionSet::value_type &amp;d2, const DimensionSet::value_type &amp;d3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubSet</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>aae6d8ce3a87e3e1571b97c92f11363fb</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRealSubSet</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>af3c9b9a85688a4f1ef8caa3b21bf7423</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a397190b81dbfde450e4fe1e47633fb39</anchor>
      <arglist>(const DimensionSet::value_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDimension</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a015cb6fa6c77b26b8c7b1e65827b8342</anchor>
      <arglist>(const DimensionSet::value_type &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>a3e0b9829cd18a28c2dce2bcb37e9c207</anchor>
      <arglist>(const DimensionSet &amp;o)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeDomain</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>abf3b99a319deca6efc123ec52d77d867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeFreqDomain</name>
      <anchorfile>classDimensionSet.html</anchorfile>
      <anchor>ac3f34a560d6c4ad5dc8d72dc69359b77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawAmount</name>
    <filename>classDrawAmount.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PowerType</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CURRENT</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4a016388dc7648bad664202c766d5fb922</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4ad8fe7930899c36833e603cd89446d86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawAmount</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>a29f037ed6bda2e8aad742a9fb9cfec07</anchor>
      <arglist>(int type=CURRENT, double value=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DrawAmount</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>a8de3758a91834c1149836ff1d9502cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>a8cf70f5a3603f1c6e2936cfa4acdc1b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>ac3d6a9f36fb6f7d3141d4d28f64cf701</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>a7fffdcf0b57e6b1609f16351e9d4dad0</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>a8e411a80838eea09c6b38bc232e902ff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>ad7d65a7c37b7f2b4b48de40fd4e6bc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value</name>
      <anchorfile>classDrawAmount.html</anchorfile>
      <anchor>a5e5e81c528b00da622e79a04d603d4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMapping</name>
    <filename>classFilledUpMapping.html</filename>
    <base>MultiDimMapping&lt; Linear &gt;</base>
    <member kind="typedef">
      <type>std::set&lt; argument_value_t &gt;</type>
      <name>KeySet</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a58651c85d6c379da4e22810a0f7f18ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Dimension, KeySet &gt;</type>
      <name>KeyMap</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a6b714062e32fe2c679b17c0ca7ee2c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>aa090d76ebccf9be3283594989b528ba7</anchor>
      <arglist>(const ConstMapping *source, const DimensionSet &amp;dims, const KeyMap &amp;rkeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilledUpMapping</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a3dc004029a03460606f140613322f33f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a115d30d5ca3f2f0acb43beb86a498332</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a13d1a4a5fbf6e7a1915b010d63ffc4d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>ac05ee0f09361957877cde397b66b028b</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ae6bc0b889d690c6f0993d0f03a0b159b</anchor>
      <arglist>(const DimensionSet &amp;myDims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a684348697ba51462eccf00c92f99ea64</anchor>
      <arglist>(const DimensionSet &amp;myDims, argument_value_cref_t oorv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a21647d49bf4759d7e1eac552fa518b43</anchor>
      <arglist>(const MultiDimMapping&lt; Linear &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const MultiDimMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>adf3d7e794c6e10795a4fa18d6e3b67d0</anchor>
      <arglist>(const MultiDimMapping&lt; Linear &gt; &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>aa9694225933d71570d8575dbbad1e55f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>af3aab4125df7b412bc7096779593f473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a524f27f6b8f01dc973dbe54f0f9c5ed2</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a7b50181a1d5e38902c6468bc739f6aa7</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>getDimension</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a85e1d7321d200c9505d25419dcfc4783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>acdf62aed4b8a469e63c036e75567c2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>aa659ff5ecd1020261cbd39d136ea1f57</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillRefIfNecessary</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>aa6a4087b7ecb1be68dade630c328ccc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a50e5f9b1fe7975287f2c18020a0a8353</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, const KeyMap &amp;rkeys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createSubSignal</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a46a248189b439d4a682b8fb78e9c0fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a9d4b17004ec39759f5876865a27a4f04</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>aee38eb77b429791423a13e020a3b15fd</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a3ac6685b718a771032556e192752c528</anchor>
      <arglist>(const MultiDimMapping&lt; Linear &gt; &amp;o, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mapped_type</type>
      <name>createSubSignal</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a1fbdfd6bd7d903fdd388556ead454461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySubMappings</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>adbef2e27d79c3323d48e4c7a731b8274</anchor>
      <arglist>(const MultiDimMapping &amp;o)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>fillRef</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>a2771812d5f5398944fd9ac80e3d5f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyMap &amp;</type>
      <name>keys</name>
      <anchorfile>classFilledUpMapping.html</anchorfile>
      <anchor>aa7dcdf39affa7efc2db8e67e4ca595eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>outOfRangeMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a50d98bf7c2b8070242694fda40ca49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingWrapper *</type>
      <name>wrappedOORMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ac0623ee0b39d257c2283d4ab6ca9fcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a3109620ad45efea2104ebc7fa80662f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ae9678ee0ab7315c97b0748f793acaaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a45aeec7eead2c432c971ca02fcdb0c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Linear&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a681c187c017568b30ab1f955205642ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a2f7fa4bf02e759ad62d0f546add33ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ac667e856842caea12a716fe6e4468b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a6b0c6123bcf332b028075bbb947bd51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>aa4958aa116b6ce5b1b93cc1b2c1431a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a93d02248ea48308e7ce69761186aa7b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMappingIterator</name>
    <filename>classFilledUpMappingIterator.html</filename>
    <base>MultiDimMappingIterator&lt; Linear &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>classFilledUpMappingIterator.html</anchorfile>
      <anchor>afde5d08a387ba90e46518a7e8c87fec3</anchor>
      <arglist>(FilledUpMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>classFilledUpMappingIterator.html</anchorfile>
      <anchor>a007146e1e1a7612a1f10cc5d20b1a03c</anchor>
      <arglist>(FilledUpMapping &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classFilledUpMappingIterator.html</anchorfile>
      <anchor>acbc14ef74831e90fbb6ea7c31264667d</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a60281ab679beb5b3aff42d24d3d7bb09</anchor>
      <arglist>(MultiDimMapping&lt; Linear &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a07b68601d82a9250a0a588be293c1527</anchor>
      <arglist>(MultiDimMapping&lt; Linear &gt; &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMappingIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>aa90d2e657fa6b0e773eec7c2fa713c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a71f35cd0d6fabecb65019466018c51ca</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a3a3b5ddc5aa1636772b9a89c085acdfc</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a8928195a1fe4bb3af81d3ffe2391827e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ae4f87a308ad4648d289f1f66d8da772a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a89318443b1c2944e453df221ebdd2d3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a6b780009865b8643c7587c2833ee2fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a3a28409c944c35a15d0353abd689273d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ab41125ce8959de6fafb3347a7691ca52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a99bbed82612268040bb8f5162871fb48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Linear&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a1b55be43fd47c1879a3761d88a389cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ab54b5dafe1ca46dc46aaa15e734330ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>add0146735b031a0bad279b4652b6b4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a926bab0adcc3f7fd731e4e0c6a391881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a48c928d79af27bc468eb50cc24d15a38</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a37918121567f5a283b209113b2d4983a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a1eb04551f2a3ae22f0eae4844f14ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MultiDimMapping&lt; Linear &gt; &amp;</type>
      <name>mapping</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a77251b9d1da4418ccb2903fc94c7fcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a01dc79b6fe25cb048651ae8870e3d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>subMapping</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>aceffeb12d2e2bc67226d32ee4206fa40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>subIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ac2c7a223c07841c72d0ff860b0513e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>afa4ac8d36d24e411a3edce590b3c21a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ae3c745c1fea3a1bcd5694b5e1a692297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilteredMappingIterator</name>
    <filename>classFilteredMappingIterator.html</filename>
    <base>BaseFilteredIterator&lt; MappingIterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilteredMappingIterator</name>
      <anchorfile>classFilteredMappingIterator.html</anchorfile>
      <anchor>aa239f06958c35671f5f407224758b61c</anchor>
      <arglist>(MappingIterator *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilteredMappingIterator</name>
      <anchorfile>classFilteredMappingIterator.html</anchorfile>
      <anchor>adebf25df38a744978796c3754df312d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classFilteredMappingIterator.html</anchorfile>
      <anchor>ac13e829a51e0065ab435f51af0e0eb9e</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a25ac1815f0f271b16081ac946b3dafbd</anchor>
      <arglist>(MappingIterator *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseFilteredIterator</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>aea198a80ef62879176936c11a1d677d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a8fcdb15b385b6002fccb23fda1b05bec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a946f4502219bdeaf9a7bb82beb4aa1b3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>aa988f218dbea7d9dd9b78950f071951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a71f991a67d882d0ecc82ebdc47112f73</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>abbf0aa24021e5cf581e7b9109ae39650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a3ce64085acaddb83c3ba1ff609f13e46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a3ecf227a5674b9334de5da528d020807</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a76e879408ec7305bc5785be4cf8befa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>aa26459d30e85ab6d4497fd92f2eb6f14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>MappingIterator::argument_value_t</type>
      <name>argument_value_t</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a37be87cd4c1a250782d6d7b4758ffe15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MappingIterator::argument_value_cref_t</type>
      <name>argument_value_cref_t</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a8044e0808bc668aba7894fdf64a96ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>origIterator</name>
      <anchorfile>classBaseFilteredIterator.html</anchorfile>
      <anchor>a7522be7db740698ef7e270677d9b0f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindModule</name>
    <filename>classFindModule.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findSubModule</name>
      <anchorfile>classFindModule.html</anchorfile>
      <anchor>a661c335281d62d8df4affc46cc4fff9f</anchor>
      <arglist>(const cModule *const top)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findGlobalModule</name>
      <anchorfile>classFindModule.html</anchorfile>
      <anchor>a36e4632a6c8c7dbdc177639957a8e62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModule *const</type>
      <name>findHost</name>
      <anchorfile>classFindModule.html</anchorfile>
      <anchor>ad213402248cfa94efe6513d4944a44b3</anchor>
      <arglist>(cModule *const m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const cModule *const</type>
      <name>findHost</name>
      <anchorfile>classFindModule.html</anchorfile>
      <anchor>a226400f40a7cccd96c04df0504e89460</anchor>
      <arglist>(const cModule *const m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>classFWMath.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>a2867eea5a97b7685de513a989046f699</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>a76f6d077fea756cc254c9405d0b51708</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>modulo</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>adfee479fcdbaba84bd4cfa57cdacf97e</anchor>
      <arglist>(double a, double n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>a38d2500887b49de2a2b5f8610f7ba6d1</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>a4d2b3271455f9f914bd85c0e22064c09</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>aa9f55c74f3cb5eb99d5ff3d00ca3d281</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>ad5b2d4a46bf7af77e9cc0070b6a82c18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>floorToZero</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>adb95c6d5b092b752dba10eddac28055d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>a7fd5acab90d26f509178dbda7935adcf</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>af308407856d9835b103f2421e373ee28</anchor>
      <arglist>(double dBm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mW2dBm</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>af1390153a78142efb6af6225034f954f</anchor>
      <arglist>(double mW)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalWirelessLinkInspector_Vanet</name>
    <filename>classGlobalWirelessLinkInspector__Vanet.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">GlobalWirelessLinkInspector_Vanet::Link</class>
    <class kind="class">GlobalWirelessLinkInspector_Vanet::ProtocolRoutingData</class>
    <member kind="function">
      <type></type>
      <name>GlobalWirelessLinkInspector_Vanet</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a67ad0810886e16cf82b6e5b146f54571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalWirelessLinkInspector_Vanet</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a374d2904380a915ef9ab91b5dbc02192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a72d59d10c09e387d23f7e31a5d716748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>addfc6e84236ec3c66dda801c6d3bcb32</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isActive</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a07c3822c9eb0c81b5206617a3beac61f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isActiveLocator</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a45f8fcbd073ba9ac7d942cc9e72cf7fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLinkCost</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>aa587cbc3116a3f4fdadf2aebb0a2bef0</anchor>
      <arglist>(const VanetAddress &amp;org, const VanetAddress &amp;dest, const Link &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getLinkCost</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a87b95f1e754a8ae4c3c050e14466fe66</anchor>
      <arglist>(const VanetAddress &amp;org, const VanetAddress &amp;dest, Link &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getCostPath</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a44ed33d684a6aca8e3d293b37ee4c16c</anchor>
      <arglist>(const std::vector&lt; VanetAddress &gt; &amp;, Link &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getWorst</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>aaadb8b2e5087425bce4c8923b6dc5dff</anchor>
      <arglist>(const std::vector&lt; VanetAddress &gt; &amp;, Link &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>initRoutingProtocol</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>ab631592ebed1f9ae27230e8061bd159d</anchor>
      <arglist>(cModule *, bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getRoute</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a17c2db07c1db404b4aaad2795acb8b8a</anchor>
      <arglist>(const VanetAddress &amp;src, const VanetAddress &amp;dest, std::vector&lt; VanetAddress &gt; &amp;route)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getRouteWithLocator</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>ae1afde5f6a61c3b302774fb2ee4fd700</anchor>
      <arglist>(const VanetAddress &amp;src, const VanetAddress &amp;dest, std::vector&lt; VanetAddress &gt; &amp;route)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setRoute</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a9e820fbbd4deee9eadd76b4f272c7fd1</anchor>
      <arglist>(const cModule *, const VanetAddress &amp;, const VanetAddress &amp;dest, const VanetAddress &amp;gw, const bool &amp;erase)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initRoutingTables</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a5d5f6a7e560ddd9621829310d2331e01</anchor>
      <arglist>(const cModule *, const VanetAddress &amp;, bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLocatorInfo</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a624be1ad46c4419f76bde776fa73517c</anchor>
      <arglist>(VanetAddress, VanetAddress)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getLocatorInfo</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>ad503d46a5fa3bbfdfa71988a9e2e6d76</anchor>
      <arglist>(VanetAddress, VanetAddress &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getNumNodes</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>aa2d46983c030e85e9f9b159acf347827</anchor>
      <arglist>(VanetAddress, int &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>areNeighbour</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a58d772a30ae51d271fd0a323cb2cb449</anchor>
      <arglist>(const VanetAddress &amp;node1, const VanetAddress &amp;node2, bool &amp;areN)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setQueueSize</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a4b93ddc813e4bee1ffa14ee07aa03a64</anchor>
      <arglist>(const VanetAddress &amp;node, const uint64_t &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getQueueSize</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a29bc74c35851b02cc43e01fc6d958bba</anchor>
      <arglist>(const VanetAddress &amp;node, uint64_t &amp;)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; VanetAddress, VanetAddress &gt;</type>
      <name>RouteMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a6ea23510dfdbbc81b3789fce0e06eed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; ProtocolRoutingData &gt;</type>
      <name>ProtocolsRoutes</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a8e679b689312eb600103c2206200a653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; VanetAddress, ProtocolsRoutes &gt;</type>
      <name>GlobalRouteMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a573b4c5d03f0f42d0132a2294f24622e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; VanetAddress, Link &gt;</type>
      <name>NodeLinkCost</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a77c07001c630bec4bf66f46f5a7d16c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; VanetAddress, NodeLinkCost * &gt;</type>
      <name>CostMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a47ca3d150eca381adf3f813191855304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; VanetAddress, VanetAddress &gt;</type>
      <name>LocatorMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a18e49f23735a428abfc0a5a41d961abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LocatorMap::iterator</type>
      <name>LocatorIteartor</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a653725aa7d1f52588fe8a7d8380d71da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; VanetAddress, uint64_t &gt;</type>
      <name>QueueSize</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a1f15d7a58fc1c57ce861d3ae8abe7b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static GlobalRouteMap *</type>
      <name>globalRouteMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a927eb5ea4fd74a568f0790366b4a8d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static CostMap *</type>
      <name>costMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>afdba3dcdad07bf8b58b1baa761fcd664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static LocatorMap *</type>
      <name>globalLocatorMap</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a83d70bb8ec212cdb67ca7b6715cf4366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static QueueSize *</type>
      <name>queueSize</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet.html</anchorfile>
      <anchor>a917be340d3c9c84a8a1dc17eb0eaf5ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalWirelessLinkInspector_Vanet::Link</name>
    <filename>classGlobalWirelessLinkInspector__Vanet_1_1Link.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>costEtt</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet_1_1Link.html</anchorfile>
      <anchor>a7cd410209a2b8ea1565555b3962aec2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>costEtx</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet_1_1Link.html</anchorfile>
      <anchor>abe7226243dbdaf5783a2c28244640b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>snr</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet_1_1Link.html</anchorfile>
      <anchor>abcbb36e816172fad46cc224a833af5a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalWirelessLinkInspector_Vanet::ProtocolRoutingData</name>
    <filename>classGlobalWirelessLinkInspector__Vanet_1_1ProtocolRoutingData.html</filename>
    <member kind="variable">
      <type>cModule *</type>
      <name>mod</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet_1_1ProtocolRoutingData.html</anchorfile>
      <anchor>a664e70066e4501fbb298dae6fcedca7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RouteMap *</type>
      <name>routesVector</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet_1_1ProtocolRoutingData.html</anchorfile>
      <anchor>ab3b5bada86e46b8aa1a1d0eda5046792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isProactive</name>
      <anchorfile>classGlobalWirelessLinkInspector__Vanet_1_1ProtocolRoutingData.html</anchorfile>
      <anchor>ac096f5d02203b3e5a1fab25b8a656925</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HostState</name>
    <filename>classHostState.html</filename>
    <base>cObject</base>
    <member kind="enumeration">
      <type></type>
      <name>States</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACTIVE</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca24022de9465df959797f9b000cb87ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca1a8705dd49a3297fc8512a1ac63b78e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BROKEN</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3caad59622a148c4a5f0db2fd6c9fc8640d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLEEP</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca7270c313de38886faaab80c7dd9b9864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OFF</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca7c7320a0c872c90c3a26adfa4eb48412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostState</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a9826824b5332180e2bedd17929b8f64d</anchor>
      <arglist>(States state=ACTIVE)</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>get</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a3167de707748fd5280fce231d6cbcf90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a403e773f87d00a6c66f3f017441de752</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a3b7466f384edafc0214e39265e27fef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>States</type>
      <name>state</name>
      <anchorfile>classHostState.html</anchorfile>
      <anchor>a891b154c7213fb04e5f3d42fdc22b0d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableIterator</name>
    <filename>classInterpolateableIterator.html</filename>
    <templarg></templarg>
    <base>ConstInterpolateableIterator&lt; TInterpolator, TInterpolator::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>InterpolateableIterator</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>a293e156dd92c02e9795456cdf10da596</anchor>
      <arglist>(container_type &amp;cont, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>ac9ff6164dadb0782ba712d238fc5fa86</anchor>
      <arglist>(mapped_cref_type value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstInterpolateableIterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>af7376c0555d5afa5e51e5fef70d32d2b</anchor>
      <arglist>(const used_iterator &amp;first, const used_iterator &amp;last, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4cbe300c6f575e24a8ab9ab269cac8ff</anchor>
      <arglist>(const ConstInterpolateableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>ad149b5c37b429ccc1fc5615c217cd3de</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpToBegin</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a812d4bd2ab7b419deb933b8c472e1912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a0a190c448a5cfbcd3385c6ccd316542f</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aa9b9aaf1491ef6ef251bc7399aecdf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>key_type</type>
      <name>getNextPosition</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aa545c5da980cbc9a5889ac6cf42d7b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRange</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4eca971338ae67b5ee34503cbcf1f342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4906a4e7a03086a28d108fc262faa969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getValue</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>afd052facfd07e1a139a6da76d129917e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getNextValue</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aca4c6576c12ffd03107960a356e76326</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>key_cref_type</type>
      <name>getPosition</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a2d8b162ab907fbc33e47db214f28518a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const interpolator_type &amp;</type>
      <name>getInterpolator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a9e45b990b544290f7a0dd1a8155c4978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConstInterpolateableIterator&lt; TInterpolator, typename TInterpolator::iterator &gt;</type>
      <name>base_class_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>ab07de05ce33b5f79338b2f5e218eeae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>a505921570c714a08939e703212d827e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>aa306fd3c4d8c41c1385214120dd89f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>ac2ae0b3bac1aefdf810e89053f02c26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>ab277c7071b789b77db6c83bbfcfc73f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>a12a29f9eab93da3e4f23625dc4960b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>add69459cec530aaa14cedf90d90716df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>a6653fb735749f37a30af97972ccd9a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>af76b6af4717a8419ba2b81e890e47b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>ad5fdac01d126b7b8ecad075787fab475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>a8b00771eedb6b1a9dffc453064834adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>a28eb737c6b8db4dba638e6ad8246346b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>container_type &amp;</type>
      <name>cont</name>
      <anchorfile>classInterpolateableIterator.html</anchorfile>
      <anchor>af9666580c89cb80eddb2f56dae42f4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>first</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a3720bcb63a64de42e4b16cb86df2bb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>last</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a15720a496cb3f3942707583ef80db5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>right</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a4bb5e64387644bd21ca8345e15f5bcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>key_type</type>
      <name>position</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a22d17fb7ce4b73648b28e62b34292382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const interpolator_type &amp;</type>
      <name>interpolate</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>aac41169286738eeb6ef050a87eb1ced3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator</type>
      <name>interpolator_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a1ceb4238f825dc152217058c0c7dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a50b68c37524eff1e40fc9b9977476e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>ad73c5dcc647fa3b7a84763a954fe11bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a2c972215632186ddedcda88204012353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a0d498cb8110907ecc04a5a9a005db9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a5c3a2627837864de9aa91b7a8ba4c815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a11cdbe76ac12b7479f1c4697131f6dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a524823dbf762366cded5cfe2ccca2939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a7539b5f9b0b46a26a33d1f1c22845084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a7de2ff003436372e26b57596da13b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator::iterator</type>
      <name>used_iterator</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>ad651c523db58df483cb6a3369406ef22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classConstInterpolateableIterator.html</anchorfile>
      <anchor>a5ed1c02edab5e7153ef4d29f26e57216</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableMap</name>
    <filename>classInterpolateableMap.html</filename>
    <templarg>TInterpolator</templarg>
    <templarg>TContainer</templarg>
    <member kind="typedef">
      <type>TContainer</type>
      <name>container_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a217448304edf64b46dd8a6450ee6ae0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator</type>
      <name>interpolator_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a4e2dca36f33ea59492d63df8a3b3e8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type</type>
      <name>base_class_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a96883c206968b6fab765146d045232c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a38d70c0bfa85e67af22ae4562ca18279</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>ac22ce1e261decb81e3bdf3514739bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>ab0e9881a19ace90b9c51c963cecaab6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a7b31595ca7453acefd843882f7c26114</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>ac08e49dfa56e60af0723e27e97eb3543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a4c406f0681ae69646e492c3131786189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>af0d2068655034aa04a27d211e5371caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a9bc116f88a742364c74978f5451dc3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolateableIterator&lt; TInterpolator &gt;</type>
      <name>iterator_intpl</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a8dc26216c7b857ed3d95c1c1ad71653a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstInterpolateableIterator&lt; TInterpolator &gt;</type>
      <name>const_iterator_intpl</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a52de9937ce05597df151f9bf27673994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>ace7661da5574910780ae447e25166448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a5c76bbc893b2e8aa705f35e418a4ffb4</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a766980ed7805b730b0f1903eeb14793f</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getIntplValue</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a1548366830c2159110c902750646e6f5</anchor>
      <arglist>(key_cref_type pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator_intpl</type>
      <name>findIntpl</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>aa643292fee63e1ffde54ba2315ac22ca</anchor>
      <arglist>(key_cref_type pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator_intpl</type>
      <name>beginIntpl</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>ab83c65fc629eb8c3319a2915577ba6e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator_intpl</type>
      <name>findIntpl</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a9a6df4d973cec89c8f68b1c26c62ccdb</anchor>
      <arglist>(key_cref_type pos) __attribute__((noinline))</arglist>
    </member>
    <member kind="function">
      <type>iterator_intpl</type>
      <name>beginIntpl</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>a03130591ac495322129d1430f0243de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_type</type>
      <name>interpolate</name>
      <anchorfile>classInterpolateableMap.html</anchorfile>
      <anchor>aba1c44886e1f41cdd93da4f815faaeb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated</name>
    <filename>classInterpolated.html</filename>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a207d72329531eebb671b8cea5ab97b70</anchor>
      <arglist>(value_cref_type v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a5bc92404ea98f1d8c353a378410be2d9</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>operator*</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a53c90a1d6e549581c19e53ef1f65440f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_ptr_type</type>
      <name>operator-&gt;</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>afb3e2c2374f4711a181d1139e4ab4266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>aa79ee9b9410d2c1477bf8cc296a4a418</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a50f7e4a2eb744d4cc2248d04d213541c</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>isInterpolated</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a6b2dcc90823cd33ba7e61f68521bc8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a5ec4d0c5b3342f331ea4b1dd2bc43e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const value_type &amp;</type>
      <name>value_cref_type</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a756b43519b8caf161667b2f95fddddc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type &amp;</type>
      <name>value_ref_type</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>ae30aa0fd552a7f6a8e85daaccec05635</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type *</type>
      <name>value_ptr_type</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>af784a6d2f1a39319ca4606a38fa0c0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a767a013b8c29f231984ac735b4b59955</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>classInterpolated.html</anchorfile>
      <anchor>a1443df9b2916a20ef54693bd489e10c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated&lt; Mapping * &gt;</name>
    <filename>classInterpolated_3_01Mapping_01_5_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>ae6dbef7dabca0ce3f6f3110b28b48c8e</anchor>
      <arglist>(const LinearIntplMapping &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a95f58fb7ed93ec9a752d2d85581796a1</anchor>
      <arglist>(value_type v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>abcc2242b37e937bac5261d8cc21ba969</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Interpolated&lt; value_type &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a874d4789884a8df189e48b1b127363f8</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>operator*</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a2e84fa1860da47f333628f4cab75c376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_ptr_type</type>
      <name>operator-&gt;</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a4e9ca385dff76dca305c1d17c6a77f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a8fa16c929197e0a3f0a1439fea227962</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a7820435c4be5899c98725451d1297a6b</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInterpolated</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a5f5b0e3a8adb3c2ec8b4178476334cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Mapping *</type>
      <name>value_type</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>abfe0e5f0e7bda34ffb30a8bc0a73afa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const value_type &amp;</type>
      <name>value_cref_type</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a105b8f3df84e235b9d97c061d8cf2807</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type &amp;</type>
      <name>value_ref_type</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>ac6fe46e95755e3b9d07e443a4c8d0f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type *</type>
      <name>value_ptr_type</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>ae69d4f775ded2f2a35789c55875da7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearIntplMapping</type>
      <name>mapping</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a41f35d1266c83a26a22d6d0b411ec34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a35663ec8d3ab796e7ad7b20a2526bebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPointer</name>
      <anchorfile>classInterpolated_3_01Mapping_01_5_01_4.html</anchorfile>
      <anchor>a34000edebc6bbcca908e4cf61f0256d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolatorBase</name>
    <filename>classInterpolatorBase.html</filename>
    <templarg>_ContainerType</templarg>
    <member kind="typedef">
      <type>_ContainerType</type>
      <name>storage_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a5425b9d0d46fc00e73bfbfd5dac2235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type</type>
      <name>container_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a08ed542e8cf2d5d5db6a57853d99b395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a77ef89f853cd60547a36139edcc08e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>adc214ec8fb530ba3366e27ed0562afe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a86d79e0651ad28e573d9e459431d1d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>aacd78d74d033b98dab7e6e4a4ff37827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a2a4373ff4faec82f586e83ef61e49ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>afebb8b6a1cee5e65401bcae5fb664bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a728b368da1a67c20b07538eb2a2841ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PairLess&lt; pair_type, key_type &gt;</type>
      <name>comparator_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a0d624c60eda67b0801122c3803a9fc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; mapped_type &gt;</type>
      <name>interpolated</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a809a32fb20618d965208bd82424bb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a3ad648d39fbf37047d763dccbb94adf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ac60b7bfe1d54bb98e6bd9fc86046f8a7</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatorBase</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>abbba9006a470a5d2838b2c8cd2227423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>continueAtOutOfRange</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a418f7310b70491f3151af9c629de1731</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>af2aaa8a601ff4b04f34578b6e3d9d793</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ad595dcb21de2a3342353a6d537a817e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ad20a467fabf3bf4173251d6f3c6a7deb</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a8cf11628ee68fe8a058021afeb63ac75</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>mapped_cref_type</type>
      <name>getOutOfRangeVal</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a1f80f85cc052c18230de63753ef0455c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>comparator_type</type>
      <name>comp</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a833e51f2e6ce34330574ea3850b906db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>interpolated</type>
      <name>asInterpolated</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ae79c26e2532175da7eaf9b8183c7cfe9</anchor>
      <arglist>(mapped_cref_type rVal, bool bIsOutOfRange, bool bIsInterpolated=true) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ae1e39c73d7d763baea464c1eec0a8b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>outOfRangeVal</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a33d2db2305227e4b7fe5e2ec7e800b80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IVANETMobility</name>
    <filename>classIVANETMobility.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>classIVANETMobility.html</anchorfile>
      <anchor>a60409f49fede450da1679e1967c59acc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classIVANETMobility.html</anchorfile>
      <anchor>a1897093db8fb226ce875472611cf934d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Coord</type>
      <name>getCurrentAcceleration</name>
      <anchorfile>classIVANETMobility.html</anchorfile>
      <anchor>ab0ea1afcff0067f461930f24a5b24a81</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Coord</type>
      <name>getCurrentAngularPosition</name>
      <anchorfile>classIVANETMobility.html</anchorfile>
      <anchor>a408663c43f50ca1beacb7c6cd7f183c6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFading</name>
    <filename>classJakesFading.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>JakesFading</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>a8086f34c9ff99c62e99b976082abd40c</anchor>
      <arglist>(int fadingPaths, simtime_t_cref delayRMS, double carrierFrequency, simtime_t_cref interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JakesFading</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>a44991f849a6d094ad73f66063eab8ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>ae02fbdbf7ef6db9b78a3416076074190</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fadingPaths</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>ad28b3b2fd11307bf33869c5bbdd27a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>angleOfArrival</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>a7f9a358fb5cdfd19e6d1e7c97627ad4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t *</type>
      <name>delay</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>a2f0c52cb4f441a2abba9aec17194fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>a8c91a22de8e520176877f7421d033ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>interval</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>aa15d56a2dadede1a0432103d60d6d927</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>JakesFadingMapping</name>
      <anchorfile>classJakesFading.html</anchorfile>
      <anchor>a512ebf4ce5a76e1580f7058c9fd49d90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFadingMapping</name>
    <filename>classJakesFadingMapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>JakesFadingMapping</name>
      <anchorfile>classJakesFadingMapping.html</anchorfile>
      <anchor>a5feea6585c074e1dab16486600db7a25</anchor>
      <arglist>(JakesFading *model, double relSpeed, const Argument &amp;start, const Argument &amp;interval, const Argument &amp;end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classJakesFadingMapping.html</anchorfile>
      <anchor>a23e8978d7aab4509f846ac6a8044de19</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classJakesFadingMapping.html</anchorfile>
      <anchor>ab8c347fa961711d3fd2c86b425cddc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JakesFading *</type>
      <name>model</name>
      <anchorfile>classJakesFadingMapping.html</anchorfile>
      <anchor>afe3bf29047cfa0f35c20926441261738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>relSpeed</name>
      <anchorfile>classJakesFadingMapping.html</anchorfile>
      <anchor>a02aab24700471b25a801010842d54cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>classJakesFadingMapping.html</anchorfile>
      <anchor>a52281acdf3981141a525adb9e18792e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LAddress</name>
    <filename>classLAddress.html</filename>
    <member kind="typedef">
      <type>long</type>
      <name>L2Type</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>aea56b60dcb5ae8c2bde465271daf7210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>L3Type</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>ad85cd9e8d9e7e9cd5d02dd740c4a12a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL2Broadcast</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>a3890f1c7314c5695e32252468e6bd5a5</anchor>
      <arglist>(const L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL3Broadcast</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>a97a5c1c1f73f4255cabc4e292c4ad503</anchor>
      <arglist>(const L3Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L2Type</type>
      <name>L2BROADCAST</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>a9f975ad0433f1fb8a01164f266a41f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L2Type</type>
      <name>L2NULL</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>a6db1e8dbd0d23dec49ce7b59f5c15976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L3Type</type>
      <name>L3BROADCAST</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>a11d63e8d897e072ed94da77028d38f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L3Type</type>
      <name>L3NULL</name>
      <anchorfile>classLAddress.html</anchorfile>
      <anchor>a629f951ff7bc5f42e945bbc5573c4a0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear</name>
    <filename>classLinear.html</filename>
    <templarg>_ContainerType</templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>ae4aff7c07b3e286d4231b3528e20f534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a9b58190e85080e5f0625129ac36d625d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a015cf391305098dc6b77a24d650901c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a36d310d8c19c1213acd89410f44eb452</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>ad160f7737fb0fb36c93371fdd1dabafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a751115e8a051cbc3a73402ddd21dc646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a8e8da73cf46884662fd5e34aefb768f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a1d942a4028e62e8244e4fe0444083088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a7b8513e26af82a2c8828da7142885a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>acd86c11e235767ca73e44c429be39f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>af09c69fdb1436d1e6287ead51b4eec6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a9b1f8c82b49868ba0c535d63452367fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a5d56885bbe8346505f27dcf8a244fbdf</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Linear</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>aa0cef4541cdfd89031f31144307f8eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a1927a59614f2880683c9ee3795ab59fd</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a0945731f864d171dbf23386f301b9345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static mapped_type</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a6bc0698641121198130b488f54692c3f</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static mapped_type</type>
      <name>linearInterpolation</name>
      <anchorfile>classLinear.html</anchorfile>
      <anchor>a427fcfc748f399f9ff8a17fb794ce82f</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1, mapped_cref_type v0, mapped_cref_type v1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</name>
    <filename>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</filename>
    <base>InterpolatorBase&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a4040145fe6161ede2994bd6762a1d533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ac7116a5748d75ea3105be24501b9ec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>aa50b0bf0efe24b268bd2d1338f3d1ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ab59de965f056c3e07cf77dceadd2ea55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a35b6316a117349e57e2b9d66851d2f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a95f8cc4fc9eac2410529e020c445c495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ad633b9d04356417275b775ea432dbc21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a3c815e58c3878a834078d9dd9a13b4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a1d23ddc7054d05e1318a3f29f1c7ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>aff04706e49346c00d4fe1148eda956d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a12116f0bfeffd29c01086e2fdf9ef36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Argument::mapped_type, Mapping * &gt;</type>
      <name>storage_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a5425b9d0d46fc00e73bfbfd5dac2235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type</type>
      <name>container_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a08ed542e8cf2d5d5db6a57853d99b395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a77ef89f853cd60547a36139edcc08e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>adc214ec8fb530ba3366e27ed0562afe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a86d79e0651ad28e573d9e459431d1d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>aacd78d74d033b98dab7e6e4a4ff37827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a2a4373ff4faec82f586e83ef61e49ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>afebb8b6a1cee5e65401bcae5fb664bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a728b368da1a67c20b07538eb2a2841ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PairLess&lt; pair_type, key_type &gt;</type>
      <name>comparator_type</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a0d624c60eda67b0801122c3803a9fc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; mapped_type &gt;</type>
      <name>interpolated</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a809a32fb20618d965208bd82424bb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>acad49038d3a32b0595949750b846866c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a003c98781f6a5cb06766457bd2b2900e</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Linear</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a0d87ce7b1faa7d5301ae55df19014929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ae9b11d23c7aa15f1f4f182caa81ce74b</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a3ad648d39fbf37047d763dccbb94adf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ac60b7bfe1d54bb98e6bd9fc86046f8a7</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatorBase</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>abbba9006a470a5d2838b2c8cd2227423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>continueAtOutOfRange</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a418f7310b70491f3151af9c629de1731</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>af2aaa8a601ff4b04f34578b6e3d9d793</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ad595dcb21de2a3342353a6d537a817e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a8cf11628ee68fe8a058021afeb63ac75</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>mapped_cref_type</type>
      <name>getOutOfRangeVal</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a1f80f85cc052c18230de63753ef0455c</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</type>
      <name>base_class_type</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a31035d6e59ff98439fc3470be035f74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConstMapping::argument_value_t</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>classLinear_3_01std_1_1map_3_01Argument_1_1mapped__type_00_01Mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>aab6548d5edb2e331e905f569d0e6cf0a</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1)</arglist>
    </member>
    <member kind="variable">
      <type>comparator_type</type>
      <name>comp</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a833e51f2e6ce34330574ea3850b906db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>interpolated</type>
      <name>asInterpolated</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ae79c26e2532175da7eaf9b8183c7cfe9</anchor>
      <arglist>(mapped_cref_type rVal, bool bIsOutOfRange, bool bIsInterpolated=true) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>ae1e39c73d7d763baea464c1eec0a8b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>outOfRangeVal</name>
      <anchorfile>classInterpolatorBase.html</anchorfile>
      <anchor>a33d2db2305227e4b7fe5e2ec7e800b80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMapping</name>
    <filename>classLinearIntplMapping.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMapping</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>a6cd4807affa51b25bf4dbad38b0ccc35</anchor>
      <arglist>(const ConstMapping *const left=NULL, const ConstMapping *const right=NULL, argument_value_cref_t f=Argument::MappedZero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>adeef3fecfcb6b2551ee205e6e1e69166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>a8711b30cf4ab9148864caa503240adb4</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>a3a3735ea665eb5d05d8f8d5fc29f408d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>ad0da987f0b7bd22db5a18ca2558533a4</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>a8d7ca5d97f319d6f971564f5fd1dc94e</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>left</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>afafb880ac49c9f688a51b880cd421786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>right</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>a4a77750e0d7b50c0c18b0b55f4d0baff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>factor</name>
      <anchorfile>classLinearIntplMapping.html</anchorfile>
      <anchor>a77ebd0c5378c9b518e317578c1b4a936</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMappingIterator</name>
    <filename>classLinearIntplMappingIterator.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMappingIterator</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>ae9431327ab0c4c20b29950cef7af45fc</anchor>
      <arglist>(ConstMappingIterator *leftIt, ConstMappingIterator *rightIt, argument_value_cref_t f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearIntplMappingIterator</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>ae6640d047e2f8fbf1990d07f901d5dd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>afd257e5e5a70bf27869aac0ce2de9114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a43bdceb0dade66a9d763a1a7f9e34119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>ac53a581da221a4467b11d731c6363ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a3e091971d2bb7c505071812fce9e4376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a7d03bb45b115f011b4a1175f67506211</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a4815486cedcd67fad5fe08d86867f527</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>aba27952eacf852f6098aa05bc7bc3c8d</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a431ef331baaeb739d6b7255ccca98fe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>ab8aba8a0341ee7e0731da138486fae36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>af0420a645633bd90a0f7775f2c6f527b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>leftIt</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a45afec325d2566593b51e75ca04b3d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>rightIt</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a39075af633fbfe901e92bde9d2db2fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>factor</name>
      <anchorfile>classLinearIntplMappingIterator.html</anchorfile>
      <anchor>a79eddacf96dbc6279bee80b3c915132f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearVANETMobility</name>
    <filename>classLinearVANETMobility.html</filename>
    <base>MovingVANETMobilityBase</base>
    <member kind="function">
      <type></type>
      <name>LinearVANETMobility</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>ac1bbf4d321f7cdb873f88d34ac9f4fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>ae3184efbf04fc98d2e4fc411a57bd7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a1dfa051a52c81e14b79c89575198b7c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAcceleration</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a33f8708f60da1705ad05fb1d3df771f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAngularPosition</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>af733ab96951b3782a69681b1f70ab227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>af5cfc357681d291827b7d595acbeacf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>a1caba3a2606b1f1fd668ae060d75d10b</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>ac9d2fc17511a73f947b15128da3951b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MovingVANETMobilityBase</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a601bde8c80d60f261afc893f480e4051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MovingVANETMobilityBase</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a33414c4432f30fcac3906895b7d2cef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a77dbfc21afd058e91e97158acc328ac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a6f959de10ea22efdb0494166f1423e5e</anchor>
      <arglist>(cMessage *message)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleUpdate</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a1434b95700ab2a8a46b5161167299a09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveAndUpdate</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a0a0c1493bb35efa774b9d53be80fb2c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialPosition</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a7376383146963beeb85d6bbb3bfc6a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>a9ac422b0265c438bd964a4af3c9089e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>a8f6af7b4876de37e4085d97c1b19fd58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>ad73127dd2aabaefde747fe5d3b3ce3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>angularPosition</name>
      <anchorfile>classLinearVANETMobility.html</anchorfile>
      <anchor>ade74ccdbcb1a0a63f83970ea2a287782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveTimer</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a33f80de5cdbfd4cd6135eed268e31047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a8544b23147fcd0b3308cee68114d92c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a5de1c4fb3b81241b97f3c45d6c86ecce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastSpeed</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>ac4fb1fcc58ad2df3ab4bfe7889eb2da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastAcceleration</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>aea49f1f776a9e5428fb66fcb102187c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastAngularPosition</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>aa86efb3b359fceb47b598b5257be3767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a6aca21240aeec0a536358bb78858f334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nextChange</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>ab99a782157735ca43174bb65eaa8048b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSegmentsVANETMobilityBase</name>
    <filename>classLineSegmentsVANETMobilityBase.html</filename>
    <base>MovingVANETMobilityBase</base>
    <member kind="function">
      <type></type>
      <name>LineSegmentsVANETMobilityBase</name>
      <anchorfile>classLineSegmentsVANETMobilityBase.html</anchorfile>
      <anchor>ad402ae90c95e9b151e62d92c90a58c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>classLineSegmentsVANETMobilityBase.html</anchorfile>
      <anchor>a6a5c497c433f01e496c2b313ef9e4aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classLineSegmentsVANETMobilityBase.html</anchorfile>
      <anchor>ada050a7676da3a8bd326769ca47d1d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>classLineSegmentsVANETMobilityBase.html</anchorfile>
      <anchor>af7a0a3df50018693c836d3447d79dbf2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a5cfabacd6272e91bbdb19d2ead848dd4</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a906e870e4301176731856d52e2c37532</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPosition</name>
      <anchorfile>classLineSegmentsVANETMobilityBase.html</anchorfile>
      <anchor>a8d77d8b63ae4c09f18878ee79cc1600c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogNormalShadowing</name>
    <filename>classLogNormalShadowing.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>LogNormalShadowing</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>a50187c1c7d025725f8fcba3afd01e076</anchor>
      <arglist>(double mean, double stdDev, simtime_t_cref interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogNormalShadowing</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>a1562003748d366431fb43497a711d6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>abecf1f338dc41facc038dbcd8a863ccd</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomLogNormalGain</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>ab81e4e559d16d59321fe0dced4a45806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mean</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>aee67e375c4b7d3c77626db7cade7dc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stdDev</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>aca2682f5148bf872b64cb1dd6495829b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>interval</name>
      <anchorfile>classLogNormalShadowing.html</anchorfile>
      <anchor>a7b8e51fa4f9b3e1369cc9f882eef22ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac1609_4</name>
    <filename>classMac1609__4.html</filename>
    <base>BaseMacLayer</base>
    <base>WaveAppToMac1609_4Interface</base>
    <class kind="class">Mac1609_4::EDCA</class>
    <member kind="enumeration">
      <type></type>
      <name>t_access_category</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_BK</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2af695584c0b18e078223c0ef37300d7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_BE</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2a9ecadf9d2e758c47d63f946763be1769</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_VI</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2a5a0d5c48abfa9f387d8d20caf7813be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_VO</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2a045c33e07a10288c28820266e7bd5609</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mac1609_4</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a0f1db11ef138c86619532e8daf187720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeServiceChannel</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a245aaca6cf34abba6f207a8a4347a272</anchor>
      <arglist>(int channelNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTxPower</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>acffe82751c83884858fef19af65b60a2</anchor>
      <arglist>(double txPower_mW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMCS</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>afdc6ce954965812b89c8daed1f0aa876</anchor>
      <arglist>(enum PHY_MCS mcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a6255d9c021bb8061459356644b0d5c55</anchor>
      <arglist>(double ccaThreshold_dBm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WaveAppToMac1609_4Interface</name>
      <anchorfile>classWaveAppToMac1609__4Interface.html</anchorfile>
      <anchor>a8f76e18acdb28159af05e6f1ae156e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a898fd0c2fee5cc98d17cac36368133a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a0ad9618ca8e21b55ba5834d264bc5e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a2909c6cda932d7e69db061969744ac70</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>ac93bf319ea2065fd7e8c041697e49919</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aa3be1bf4f5bae024352a2dd328630fed</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a551d295ebf0b23896f4d272e3db3961d</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>acd9a4c2d76215c064e5ce9dbc717c280</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setActiveChannel</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aae66bc58b1e0a8bb64accea786b20756</anchor>
      <arglist>(t_channel state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeLeftInSlot</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a85b16cc9c45d0a2ca674f2ee069a0b39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeLeftTillGuardOver</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a41a9c4025c9840048f72a0d758230af8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>guardActive</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a621bca21c2e13d7312361fd86d648a2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSignal</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a077b6bebe9a8f8d2a6fcce31c6af86a7</anchor>
      <arglist>(Mac80211Pkt *mac, simtime_t startTime, double frequency, uint64_t datarate, double txPower_mW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Signal *</type>
      <name>createSignal</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aa19fc16c9c52fbe7a896f725cc8a7883</anchor>
      <arglist>(simtime_t start, simtime_t length, double power, uint64_t bitrate, double frequency)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>t_access_category</type>
      <name>mapPriority</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>ab9af38c017be622de450cec6aeab649c</anchor>
      <arglist>(int prio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelBusy</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a9f2753889d64a26c7b2cad5d0698573e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelBusySelf</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a67e75c8cc468f946f320b82d346a157b</anchor>
      <arglist>(bool generateTxOp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelIdle</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a1c6717faaa6b882f1d68153a4a22ae62</anchor>
      <arglist>(bool afterSwitch=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setParametersForBitrate</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a30fbd72a0e286f24dd07bbd14b5c043b</anchor>
      <arglist>(uint64_t bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>getFrameDuration</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>abce6dae1623dde7c27d61a7e433c89a0</anchor>
      <arglist>(int payloadLengthBits, enum PHY_MCS mcs=MCS_DEFAULT) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nextChannelSwitch</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aaa14c46dac7942bdc20a0994254bf7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nextMacEvent</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a58ee6fc69df74cc438a2430232e1aa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastIdle</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a343e6979db2dc3bf055c735cd85ca35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastBusy</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>ac1ee54cb2b396a173697300ea8c52d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_channel</type>
      <name>activeChannel</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a5cb56d2693ddba67eccd99c7c97bcfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_access_category</type>
      <name>lastAC</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a89becf9ddec1491311a2f34c98d9f238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, double &gt;</type>
      <name>frequency</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a7165e727fefefce4b8c511bae86992fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a260353a2e9314987a7627e6dc62f9f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSCH</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a6dc35ed931af0c3234fccbeb34c19449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySCH</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aaa9b5c49afd5c5209dfc6a8ddb66bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; t_channel, EDCA * &gt;</type>
      <name>myEDCA</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a4a6f40d8c74555698700d96f0f936cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idleChannel</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a2f9281812e0647ef557a98e37ba6b199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsReceivedPackets</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>ab00c4fd0a2e9d2f5b9a0a24b3b7c3ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsReceivedBroadcasts</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>ad21f14ef01c0c637663d5aa71b04e8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSentPackets</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a644442457fb78ab8af8f8783f5741769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsTXRXLostPackets</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aa178645ccccb38ddd433a3f3562a2ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSNIRLostPackets</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a673c557c0be2621d0db6804e9477e486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsDroppedPackets</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a0ce51b3f24d069c17456f205f7bf505f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumTooLittleTime</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a2fd24f63561e5537924afca373a32fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumInternalContention</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aea096de5e89047c661f55e5b5b419ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumBackoff</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a590a7ab360ba581bdefaf7d03918a1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSlotsBackoff</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aabe3de7563e21195ac6a583630c73d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>statsTotalBusyTime</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a023fd759fac09ecda9cd25e41944334c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMacAddress</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aa379acd97ed72946d97e318113d83ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a89fbb81fdfe80a5ae118c8d39c750b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>bitrate</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a757da05fed90732015c52315bde3ffb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>n_dbps</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a63a98bca030a95f14ed2f56482159fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myId</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a7b67a422ce0f507e3b415a5cb689ef43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mac80211pToPhy11pInterface *</type>
      <name>phy11p</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>aa797b2dc32579c2aea6e6be8241682eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simsignal_t</type>
      <name>sigChannelBusy</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>af7ae6f46b80c803c77d5599b3a4659c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simsignal_t</type>
      <name>sigCollision</name>
      <anchorfile>classMac1609__4.html</anchorfile>
      <anchor>a0d329ec01d92cd95d05573fbb84c8df1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac1609_4::EDCA</name>
    <filename>classMac1609__4_1_1EDCA.html</filename>
    <class kind="class">Mac1609_4::EDCA::EDCAQueue</class>
    <member kind="function">
      <type></type>
      <name>EDCA</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>afc1892b3a95d98d9b41e99d60de438a3</anchor>
      <arglist>(t_channel channelType, int maxQueueLength=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createQueue</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a056a8566b9d7d881bc5b106cfd82ac71</anchor>
      <arglist>(int aifsn, int cwMin, int cwMax, t_access_category)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queuePacket</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>ab6bd1d6758ea4ba621d93d07c479431d</anchor>
      <arglist>(t_access_category AC, WaveShortMessage *cmsg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backoff</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>ab94c6c328029a01f40832b54ddc757ad</anchor>
      <arglist>(t_access_category ac)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>startContent</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a5a4e0df1a7ab5239ce63125322a8a889</anchor>
      <arglist>(simtime_t idleSince, bool guardActive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopContent</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a1ae6241b22b64c5f0bd51a288e05c53a</anchor>
      <arglist>(bool allowBackoff, bool generateTxOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postTransmit</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a378c2cb7b226501ee33fbefbed1cded7</anchor>
      <arglist>(t_access_category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revokeTxOPs</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>ae04062ff3bd85df50a5067324c419e98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanUp</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a1d3f59cc6488e4aa8cbd0f58d2cb34ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WaveShortMessage *</type>
      <name>initiateTransmit</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a49d443ea798288eca3f6ee2aad537e20</anchor>
      <arglist>(simtime_t idleSince)</arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; t_access_category, EDCAQueue &gt;</type>
      <name>myQueues</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a505d6b6ee4cfee3d8f94b1cb37fa8424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numQueues</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>aebd9709df95d172724b3d054f4a908c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>maxQueueSize</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a414a96e8ee08d2338be8d3d87d327ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastStart</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a27fb605ffa37e23c64007b76a4c27111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_channel</type>
      <name>channelType</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a0f1c7d8635f2859a4c3f1404deb224fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsNumInternalContention</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a856a0c0c2659e1e0019cc485950bc793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsNumBackoff</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a8cf2e47d5c7eb8b4e07a05574728386f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsSlotsBackoff</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>a90e175f5528e11762dacd400ba62aa62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myId</name>
      <anchorfile>classMac1609__4_1_1EDCA.html</anchorfile>
      <anchor>ae86ed83198522b2d1fd392d990f074d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac1609_4::EDCA::EDCAQueue</name>
    <filename>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</filename>
    <member kind="function">
      <type></type>
      <name>EDCAQueue</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>a59ff6ecede6d3e55381ed2002ebd1be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EDCAQueue</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>ad2f01c281a4b2bc25e2e7827f6f32dfe</anchor>
      <arglist>(int aifsn, int cwMin, int cwMax, t_access_category ac)</arglist>
    </member>
    <member kind="variable">
      <type>std::queue&lt; WaveShortMessage * &gt;</type>
      <name>queue</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>a438592247d29082a7d625f28dde8298e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>aifsn</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>af5d57035671b18fe5efa0ac701d2d41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwMin</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>a3e608ec0d7c61588240b7bf143567d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwMax</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>a55fe1534f0762fa50f80793accc4e399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwCur</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>a49f3d85b4a8a2378692a5ea1ab1098b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentBackoff</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>a13dfc70f4e6bc92d5d6091230f661e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>txOP</name>
      <anchorfile>classMac1609__4_1_1EDCA_1_1EDCAQueue.html</anchorfile>
      <anchor>ac221fa69ef9728273f0407e5bf774db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211Pkt</name>
    <filename>classMac80211Pkt.html</filename>
    <base>MacPkt</base>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>acb1acab70511a8f72c91126f9fdfc208</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>abe7c0c369090d23061c5cf2f37acc209</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211Pkt</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ae9e07f9d3a3a0cfa7baf6bf8e28f65d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mac80211Pkt &amp;</type>
      <name>operator=</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ad331807f8af5caaffb5b5907bb11eeaf</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>dup</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a776e1a1cbb1ffe3ab3de3021c98dcf73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a1144a74898858f49dad6127b7e8be378</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>aaad500fa35ddd6977afa79bb7be354e3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress3</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a23a4ef5064f02ab3baeb6c981112bd62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress3</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a5b6cc41b76ca9a12d3b1a26603dfca19</anchor>
      <arglist>(int address3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress4</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>adc552c838cf52c72aaff37535e8201cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress4</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a6f480b4dbfb1fa3cb505c9ef3b46171e</anchor>
      <arglist>(int address4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFragmentation</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a22e372ef8e329454b1cd5efcd87bb379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentation</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ae2a1e6629066ce50b36aba3f2c507dfc</anchor>
      <arglist>(int fragmentation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInformationDS</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a0fe52502bb84646b6b8847502654565e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInformationDS</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a8c75609ba1415669c33ee6b9b8f6b193</anchor>
      <arglist>(int informationDS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSequenceControl</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ae7d0482b082ff80790aefcf31fd59654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceControl</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>adbca0d4e46baf13fca1dc387ac6eb920</anchor>
      <arglist>(int sequenceControl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRetry</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ad3617893f55f3c590c5a959a4e124890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetry</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a589e9b54ec5f59bda2947a6efe4ad501</anchor>
      <arglist>(bool retry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a09e39966710115add8cdc1b774313570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>aabdb5fec5f203e9ba50a01d14cd7b023</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a1f24bd362499c0ebe6528eff055ca57c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>adc3e316e7e97db79eb6f1a3772b9ef7d</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacPkt</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>aee59ef903831b032bb47e54f34466c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MacPkt &amp;</type>
      <name>operator=</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a681e8e899f966bbf57abc045ea336d04</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a54bad417fd6840a8a7bd7e829c0a8244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a564ac532b26d7fac11bdde0f129bbc01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a72fd30a2a508d10258c3fddd7167549d</anchor>
      <arglist>(const LAddress::L2Type &amp;destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a0d65290bfc1bf7687cf53faa80ae9bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a41095230d3e3609da8bf11489c1e3868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>adbb8351e4adc8c8bc3d8147a80d9917f</anchor>
      <arglist>(const LAddress::L2Type &amp;srcAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getSequenceId</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a0439f6a29f8d1888c6d45ed6841d3fdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceId</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a3396b26a60e9c6564717a308835bc31a</anchor>
      <arglist>(long sequenceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ac28b8ac3d496ad7e1b880ccda716d5cc</anchor>
      <arglist>(const Mac80211Pkt &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>ab0f0ba5f0db2897fc765c2e36c52eb06</anchor>
      <arglist>(const MacPkt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address3_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>af7f74328cdd7f690d057fa3f5e9a733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address4_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ac2a02bf19c58439b1424760faa4f8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fragmentation_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a64030e6443cf9d6e4aad55cc32ab89da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>informationDS_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>ad84dd60877536e0c74274979ab20c868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sequenceControl_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a2aedb86f996b4a010e796041b8b45d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>retry_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a99d65c9640bc92440527ae4ae3b19e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a915c6675d8a8ea72deea2192b3c51172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>destAddr_var</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>ad34a8033f7ac0f3e7dfe5d19bdc430dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>srcAddr_var</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a7f1a956c653e6c0f51cfc2956224a514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>sequenceId_var</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>ad90102f16b2ac313c6967ca8e8a08cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMac80211Pkt.html</anchorfile>
      <anchor>a82252c64f823185043ecd5085da70a6c</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211pToPhy11pInterface</name>
    <filename>classMac80211pToPhy11pInterface.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>BasePhyMessageKinds</name>
      <anchorfile>classMac80211pToPhy11pInterface.html</anchorfile>
      <anchor>a22f71b541e700f61333fcadd25145607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_IDLE</name>
      <anchorfile>classMac80211pToPhy11pInterface.html</anchorfile>
      <anchor>a22f71b541e700f61333fcadd25145607a0abe83e48054b6d1c24e150f131251b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_BUSY</name>
      <anchorfile>classMac80211pToPhy11pInterface.html</anchorfile>
      <anchor>a22f71b541e700f61333fcadd25145607aeebb40f1f66fb962f7cc5e3b398cc424</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeListeningFrequency</name>
      <anchorfile>classMac80211pToPhy11pInterface.html</anchorfile>
      <anchor>a91d9c16438fc0ec7c0e3b4907f178d4d</anchor>
      <arglist>(double freq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classMac80211pToPhy11pInterface.html</anchorfile>
      <anchor>a2c5ef6853f92d28a7ccb30e9ebdab460</anchor>
      <arglist>(double ccaThreshold_dBm)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211pToPhy11pInterface</name>
      <anchorfile>classMac80211pToPhy11pInterface.html</anchorfile>
      <anchor>a8403db10cea6032fae6725e63c013880</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacPkt</name>
    <filename>classMacPkt.html</filename>
    <base>cPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>dup</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>aa69f340785a86e94ab9f0a50d3877819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>aef7e817d2be4e94a533a89e5b6d78c59</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>aa028fb1b5ccd6142b2078843531e48d9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMacPkt.html</anchorfile>
      <anchor>a43007ce645a8100e47fe3fd3d84e5caa</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToNetwControlInfo</name>
    <filename>classMacToNetwControlInfo.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>MacToNetwControlInfo</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a64db17e5d3c98005d3116db08853960d</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop, double ber=0, double rssi=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToNetwControlInfo</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a9399aa277ab5647efe0576a2651eb2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>affe2b8ca5fb613155ffa6818dd5338ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>ac893214f0521cb356739841c63f1c498</anchor>
      <arglist>(double ber)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getLastHopMac</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a308453ed9a395b5150618bca3294d0b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHopMac</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a789cde71306e4d00c552c502a09e9a12</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double</type>
      <name>getRSSI</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>aa5a3ee1ad3f78209ab7ce2798252e813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRSSI</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>ac912ee19746ecde01512876568c95839</anchor>
      <arglist>(double _rssi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>ab441b40ab3bd8077f452ff1bacbc4da9</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddress</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a94a1bdc4327f5fdefd1b6b8112d21dc4</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddressFromControlInfo</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a3749066e121d0e912e6aeb92dd8a480c</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitErrorRate</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a0be178839f0e97e8695e5915e84b6dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>lastHopMac</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a69d09f2d4b0f7603b5cfa0bd8efafe61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>classMacToNetwControlInfo.html</anchorfile>
      <anchor>a5cfb3c928d4706098e74ac8e1dc95b7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyControlInfo</name>
    <filename>classMacToPhyControlInfo.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>MacToPhyControlInfo</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>acde623038e9b9a2b756e48cb5b393d8a</anchor>
      <arglist>(Signal *signal=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyControlInfo</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>ad4a56f10fab531b0076aadb0904175b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignal</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>a37b1b75e5bc8026af8d3de5bb3b318ab</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function">
      <type>Signal *</type>
      <name>retrieveSignal</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>a5e04d8d4088109ccccb7c3fcdae526a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>aba344dd933a50dceb1fe5e80ffecebe5</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *const</type>
      <name>getSignal</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>a5b414803a71b46b62ae03022edb71a3c</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *const</type>
      <name>getSignalFromControlInfo</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>a2f42fccc127d84cf6853058f501da3ec</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal *</type>
      <name>signal</name>
      <anchorfile>classMacToPhyControlInfo.html</anchorfile>
      <anchor>a05a564d743e50aa370ee796ee932c8a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyInterface</name>
    <filename>classMacToPhyInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a8447e9cc66ba633aa11a59387cce477c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>ad25abbad9aa16bdbf24bf1dd582b1c6f</anchor>
      <arglist>(int rs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a24e146616912b4a59df91a12b81a38cf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>adf27aa5a5e5cbee6f8be1ec58cb9306f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a2e770727361fe1774b88d5667b89417e</anchor>
      <arglist>(int newRadioChannel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>a868ebc7745779bec659390fccd2113af</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>classMacToPhyInterface.html</anchorfile>
      <anchor>ad0c647cc4ae7515324d687a1f31ca6c8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mapping</name>
    <filename>classMapping.html</filename>
    <base>ConstMapping</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>ab8906dfac661d5c6a0a35cf1744f06ed</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>ab78335a7a119893d1e04495f7f587ca3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>a8723ba0f78d2f259f1f150c9db346cb2</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classMapping.html</anchorfile>
      <anchor>a95f064bd4bc5a22aef1cf0e4a6052ec7</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingIterator</name>
    <filename>classMappingIterator.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classMappingIterator.html</anchorfile>
      <anchor>a68c80b10de257d7cfd68f49bfd6a2cbe</anchor>
      <arglist>(argument_value_cref_t value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingUtils</name>
    <filename>classMappingUtils.html</filename>
    <member kind="typedef">
      <type>std::list&lt; const ConstMapping * &gt;</type>
      <name>MappingBuffer</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>ad235ea24201e93c2b28a1c65c2f4fa6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a0c61c76ba04339162563339b23bf42e9</anchor>
      <arglist>(const DimensionSet &amp;domain=DimensionSet(Dimension::time), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>acca15c41da58e61619e67d1ec1538a9e</anchor>
      <arglist>(Mapping::argument_value_cref_t outOfRangeValue, const DimensionSet &amp;domain=DimensionSet(Dimension::time), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a45c56f1ea72b2f8b278d1016ac6228df</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, const Argument &amp;intvlStart, const Argument &amp;intvlEnd, Operator op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a2864c33a93f9ce23403d0c84ca9a19e2</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Operator op, Mapping::argument_value_cref_t outOfRangeVal=Argument::MappedZero, bool contOutOfRange=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a11550dc6dc55beb5a14def9ffb501a40</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a0d8bf65254d099c87948c1c300986696</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a37d38fd0a9593e6f055ac8d90758965e</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>ad5ccda215590380a9798e4dd51ede69c</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>aab8b49872f55a0162ee1c25f0f4af5b1</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a372c8f56f2e7f5dc0ce06daf4e0db128</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a217539e608efcc8ccf7766c9b9733a17</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a2cf2fb8da23ea9c12f9946559fe954c8</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMax</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>afbe1a1e1d2becd66d2c0d5a8ac42b478</anchor>
      <arglist>(const ConstMapping &amp;m, Argument::mapped_type_cref cRetNotFound=cMaxNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMax</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>ac9d1a808dbca5da873af58f1da4cbcf4</anchor>
      <arglist>(const ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max, Argument::mapped_type_cref cRetNotFound=cMaxNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMin</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a5d9c4e3dcaddccfa65f21212d0fee2cf</anchor>
      <arglist>(const ConstMapping &amp;m, Argument::mapped_type_cref cRetNotFound=cMinNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMin</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>adb9e9ced268b9a5d1d4f6d34738654aa</anchor>
      <arglist>(const ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max, Argument::mapped_type_cref cRetNotFound=cMinNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDiscontinuity</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>af1b74160ce464f825e0715f1fc656f5f</anchor>
      <arglist>(Mapping *m, const Argument &amp;pos, Argument::mapped_type_cref value, simtime_t_cref limitTime, Argument::mapped_type_cref limitValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>pre</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a2cf7c04c0adea7f6e9fe49101b0197c3</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>post</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a31183e79401391df3e2d250846ae8d0e</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Argument::mapped_type</type>
      <name>cMinNotFound</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a3db893e8948a5af5fe947fb0740d86ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Argument::mapped_type</type>
      <name>cMaxNotFound</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a2a3f154e68d94b4b5a5ed580bb3e756f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const ConstMapping *const</type>
      <name>createCompatibleMapping</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a6d524e08add1a4a02d7e37425783b094</anchor>
      <arglist>(const ConstMapping &amp;src, const ConstMapping &amp;dst)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>iterateToNext</name>
      <anchorfile>classMappingUtils.html</anchorfile>
      <anchor>a6a768601098bcb0d998be2c742126433</anchor>
      <arglist>(ConstMappingIterator *it1, ConstMappingIterator *it2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshControlInfo</name>
    <filename>classMeshControlInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>MeshControlInfo</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a3535397d80b679787596c165d3ede4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshControlInfo</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>abe4ed6fe09af63cd7c71b05604562d41</anchor>
      <arglist>(const MeshControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshControlInfo</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>aee894091637d0c45a601f6924780ea2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MeshControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a6bf7f0c20b12f3d680d14cbc3c899a8c</anchor>
      <arglist>(const MeshControlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MeshControlInfo *</type>
      <name>dup</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>aeddb26a989afca605923473485831487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a9bb8f1237901a21cd75c3888025be7a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a0809c5a762371a53c23336092ca8f6f7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInputId</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a49c45e274db124ad5bea48deaf97cf61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputId</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>ac23380da3924913f6da1f39ca80f3c03</anchor>
      <arglist>(int inputId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPreviousFix</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a3a3271daa08dd9bc60bca7b12139bcc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreviousFix</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>ad71b4dcad2141826be0e99a505a2e504</anchor>
      <arglist>(bool previousFix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxHopCollaborative</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a9f9bd0af0103dfcf32198eca4cc6bb22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxHopCollaborative</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a74ce3323304a618d9013cbf7b85cd9c9</anchor>
      <arglist>(int maxHopCollaborative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollaborativeFeedback</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a6daf01cea2f5b922f14df8092276f8e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollaborativeFeedback</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a7d78a50938b0cd2cab6a2fc65399637b</anchor>
      <arglist>(bool collaborativeFeedback)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>ae3630ffb027d762b17d61bb27f260267</anchor>
      <arglist>(const MeshControlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inputId_var</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a7782ebdccad222d9210d58139f662b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>previousFix_var</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a1923f9f13b7980c81ecb95fd72f8d729</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxHopCollaborative_var</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a0024000ddbd10625e3665851c9c89b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collaborativeFeedback_var</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a837d48af125b09af47d2cc25a0963c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMeshControlInfo.html</anchorfile>
      <anchor>a9cc241de1cb6e38c14138693a91af9da</anchor>
      <arglist>(const MeshControlInfo &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Move</name>
    <filename>classMove.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>Move</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a4b1acc3a67d30c385ad9a6000526393a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Move</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a233b069152737d031dec49095115cd44</anchor>
      <arglist>(const Move &amp;mSrc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a3db12757bf11ac7f025b2496d09e4941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>af80f74d5fc42ec7fcedf9940c9d01655</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>aeab90c9059a2c9214e491a58833b3c3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getStartTime</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a64e0b58f28e14c338c64548f6559c08f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a385a1d6229f2490fdbe26f9266f29188</anchor>
      <arglist>(const Coord &amp;startPos, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>ab8205e35a3bb42f18da9a3ff7df19c7c</anchor>
      <arglist>(const Coord &amp;startPos)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a13cf0bb336db329a2033506d739c834f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectionByVector</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a1700ddcd2a41917a29747abaf2aee294</anchor>
      <arglist>(const Coord &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectionByTarget</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>ab9947e462db3ca2ce5d21015770655c0</anchor>
      <arglist>(const Coord &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a170899b061efdeb55ead25e17bd88b8d</anchor>
      <arglist>(simtime_t_cref actualTime=simTime()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getCurrentPosition</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>ae3bceb166e7924c6ea1620b633b1192d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a0287300e9580229fdd0c4c2c13e9527d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>startPos</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a84550b4f702ceed03c516754d17950f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastPos</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>af933f6fb06f158e628d5b11c839ebbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>acffecfba78dc80213910498f1afd7cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>direction</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>a727f186f109f662811b76aa19dcb58da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classMove.html</anchorfile>
      <anchor>ac84984d8a41ce30da0a32b049ff07552</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MovingVANETMobilityBase</name>
    <filename>classMovingVANETMobilityBase.html</filename>
    <base>VANETMobilityBase</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classMovingVANETMobilityBase.html</anchorfile>
      <anchor>a94a8afb001f68754e8a6427a3aa2dcc8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMapping</name>
    <filename>classMultiDimMapping.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ae6bc0b889d690c6f0993d0f03a0b159b</anchor>
      <arglist>(const DimensionSet &amp;myDims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a684348697ba51462eccf00c92f99ea64</anchor>
      <arglist>(const DimensionSet &amp;myDims, argument_value_cref_t oorv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a21647d49bf4759d7e1eac552fa518b43</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const MultiDimMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>adf3d7e794c6e10795a4fa18d6e3b67d0</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>aa9694225933d71570d8575dbbad1e55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>af3aab4125df7b412bc7096779593f473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a524f27f6b8f01dc973dbe54f0f9c5ed2</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a7b50181a1d5e38902c6468bc739f6aa7</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a903bef6518f96f54537beed48002b5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a2aa6a9a6b64954e20c6ee15f4bfb9925</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>getDimension</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a85e1d7321d200c9505d25419dcfc4783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a681c187c017568b30ab1f955205642ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a2f7fa4bf02e759ad62d0f546add33ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ac667e856842caea12a716fe6e4468b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a6b0c6123bcf332b028075bbb947bd51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>aa4958aa116b6ce5b1b93cc1b2c1431a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a93d02248ea48308e7ce69761186aa7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a9d4b17004ec39759f5876865a27a4f04</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>aee38eb77b429791423a13e020a3b15fd</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a3ac6685b718a771032556e192752c528</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mapped_type</type>
      <name>createSubSignal</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a1fbdfd6bd7d903fdd388556ead454461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySubMappings</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>adbef2e27d79c3323d48e4c7a731b8274</anchor>
      <arglist>(const MultiDimMapping &amp;o)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>outOfRangeMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a50d98bf7c2b8070242694fda40ca49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingWrapper *</type>
      <name>wrappedOORMapping</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ac0623ee0b39d257c2283d4ab6ca9fcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a3109620ad45efea2104ebc7fa80662f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>ae9678ee0ab7315c97b0748f793acaaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a45aeec7eead2c432c971ca02fcdb0c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>MultiDimMappingIterator&lt; Interpolator &gt;</name>
      <anchorfile>classMultiDimMapping.html</anchorfile>
      <anchor>a6314bc1334b489fad95fbc1affbdb57f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMappingIterator</name>
    <filename>classMultiDimMappingIterator.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a60281ab679beb5b3aff42d24d3d7bb09</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a07b68601d82a9250a0a588be293c1527</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMappingIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>aa90d2e657fa6b0e773eec7c2fa713c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a71f35cd0d6fabecb65019466018c51ca</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a3a3b5ddc5aa1636772b9a89c085acdfc</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a8928195a1fe4bb3af81d3ffe2391827e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ae4f87a308ad4648d289f1f66d8da772a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a89318443b1c2944e453df221ebdd2d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a6b780009865b8643c7587c2833ee2fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a3a28409c944c35a15d0353abd689273d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ab41125ce8959de6fafb3347a7691ca52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a99bbed82612268040bb8f5162871fb48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>af1b499c6d24b81cee68e09ad224087c9</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a1b55be43fd47c1879a3761d88a389cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ab54b5dafe1ca46dc46aaa15e734330ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>add0146735b031a0bad279b4652b6b4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a926bab0adcc3f7fd731e4e0c6a391881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a48c928d79af27bc468eb50cc24d15a38</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a37918121567f5a283b209113b2d4983a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a1eb04551f2a3ae22f0eae4844f14ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MultiDimMapping&lt; Interpolator &gt; &amp;</type>
      <name>mapping</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a77251b9d1da4418ccb2903fc94c7fcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>a01dc79b6fe25cb048651ae8870e3d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>subMapping</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>aceffeb12d2e2bc67226d32ee4206fa40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>subIterator</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ac2c7a223c07841c72d0ff860b0513e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>afa4ac8d36d24e411a3edce590b3c21a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>classMultiDimMappingIterator.html</anchorfile>
      <anchor>ae3c745c1fea3a1bcd5694b5e1a692297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Nearest</name>
    <filename>classNearest.html</filename>
    <templarg></templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a9739a423107cd104922bb74e2d385f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>af99ff5ca2d3827ae2be76eab3266fc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a079c6e4fa3a064c59abe1f1e5bebd41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a02dec03a3e49f970334f391a8f8811e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>aeae2c2c12934d612d4d26339f298db31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>ad06e5aaeb684694d3ad67da420282895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a002a2b67afd3e41c4cf614ce17fb4a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a58deee496d9901fb9c862d2e145053fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>acba3659c2c6c8ba7ee3c364ae2ed6c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a92aa015cd152a9ade4654926edb4d019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a00f85b45b973057c33a65465bd880739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a25cc387b45db91c99522dacd3442c196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a0dc55fc986dc4e6168470e46f366fbec</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Nearest</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>ad11370045045fdcbe8ddf653afb89d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a97a548579fe73c473c843a883629efa6</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>classNearest.html</anchorfile>
      <anchor>a66bbd6c5c5d772f74ccdf02804780953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetwToMacControlInfo</name>
    <filename>classNetwToMacControlInfo.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>NetwToMacControlInfo</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>a0168cc7c80b267f832f7395b31f64f4e</anchor>
      <arglist>(const LAddress::L2Type &amp;addr=LAddress::L2NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetwToMacControlInfo</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>a8408a34b9eb11023c61673c5e6cb84ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getNextHopMac</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>af99bf29fa34adcb49a6f53f8c94d43fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getDest</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>a19518c8f5ccf35d44a2813a922e214ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopMac</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>ad3884a518785e93c963552dea18e5909</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>ad9984137a14e4f79e8c3d764a52eaaa0</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>a4a0d5e1cdc823606fab99b915a96263e</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pDestAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getDestFromControlInfo</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>add42e098a1af72c3fbc8be746d04b27f</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>nextHopMac</name>
      <anchorfile>classNetwToMacControlInfo.html</anchorfile>
      <anchor>aa7e33f761452ceb1451769d7c59da91a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NextSmaller</name>
    <filename>classNextSmaller.html</filename>
    <templarg></templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a8c5692345e6644703fe7269de2dab1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a41d8e27717f519902cf3fd846a2c7b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>ac905a5f3ac8d2ad7e86a3d6e68c86564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>aa2541c173414345b17d45e90f23f1b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a51d29aa5d6ba9527e78f6d2ebc9b1fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>ac9bc4d5af5a87581a9dfd82587b0a402</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a060d2af8ab5e5574b1ba41483798c561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a53795d841ed9efed5b6c86562f5408be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a55f6473c02dbec1fa65572b395e713c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a27bd4c4217c213db7950cde753d6a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>adb043b816c9b3bc8caaf97d8e1936129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>aa9014184f871c5105d4f73bf0be4fac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a87a70bc7144eec945007d4017a4105c6</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NextSmaller</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a0ccaac4c2bd885be8d35115eab819195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>a3dae081c993095eaedbdb40af0b3a749</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>ac240448bfa4fd4a033d5d393a5332e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>classNextSmaller.html</anchorfile>
      <anchor>aac2ca2e53a30e482d97621fc9b62ddbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry</name>
    <filename>classNicEntry.html</filename>
    <base>cObject</base>
    <class kind="class">NicEntry::NicEntryComparator</class>
    <member kind="typedef">
      <type>std::map&lt; const NicEntry *, cGate *, NicEntryComparator &gt;</type>
      <name>GateList</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a209882de7781ff52db0ae559c1654e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a59345a3d9d2a9c6b85ff968e87cf7552</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntry</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>afd3d4871304939e9dcbfda49b3ca4585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a32a71bf1823d8ca0d51fd1cbb67072fe</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a0cce4edbe3eb6036ded986482de3de48</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function">
      <type>const GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a731c307d3c7d07c50c5b663192682a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a32f9544fbf045d921b0fb7f1c6f51f9a</anchor>
      <arglist>(const NicEntry *other)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a009149376663e2250c24634879038f7a</anchor>
      <arglist>(const NicEntry *to)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a587d8ee15931df8209b6429b8f81a190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>nicPtr</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>af7819e950101d5062b713eb4c182e34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>af474d9b383b959daecdecce577edcee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a2c78b2c598d5fa3d44080f682adb8d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChannelAccess *</type>
      <name>chAccess</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a8494481fbac4b6efb1166986a18edf58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>af0a6ff3792dac4c0a956b1a16392cf18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateList</type>
      <name>outConns</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a66b957327e66c042028f7b38e4bd0b46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry::NicEntryComparator</name>
    <filename>classNicEntry_1_1NicEntryComparator.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classNicEntry_1_1NicEntryComparator.html</anchorfile>
      <anchor>a47c8b8f85f6d1b71cc9fd5c039e0fa5f</anchor>
      <arglist>(const NicEntry *nic1, const NicEntry *nic2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDebug</name>
    <filename>classNicEntryDebug.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDebug</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a8a318f2611c8fcf9a495525a910f40b6</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDebug</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a23514a51dfbdba46bf20b2f005a34214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>af97ebc8c81c1f7d8094344d2f7fb6a17</anchor>
      <arglist>(NicEntry *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a837ccd605ce3df345fcf3f5787673fac</anchor>
      <arglist>(NicEntry *other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>GateStack</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>acb03289d82cdd4035567f3fbc8117105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestInGate</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>aa028678e801ba669ad47a6588b2ad90a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestOutGate</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>ad601c375fa2fd737f88b3a475a06ff45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>collectGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>ae4c6e480d8b2f3fc4199a7a8314ab2df</anchor>
      <arglist>(const char *pattern, GateStack &amp;gates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectFreeGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>aac3b943e56b211541596a73f6437608a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inCnt</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>ac676487d56ac68916121ce8e52465205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outCnt</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>af1bf7c23c872e6838f8111cf58e4839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checkFreeGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a2aa0dd90daecf5469bc9c8b53b21579c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeInGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>ae2e64139016744d1c8a59c4d9f6b009f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeOutGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a0564884c56d1bcda68b8797a5bd60af0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDirect</name>
    <filename>classNicEntryDirect.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDirect</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a264c9a96612b45f99eb5a1de1dd2b7fb</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDirect</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a21eb6f7a68d1dc62b30934651b569ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a56d5f3eb121f931265299294660d70e9</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a4629b3bf3dc1836590016164bd245149</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NistErrorRate</name>
    <filename>classNistErrorRate.html</filename>
    <member kind="function">
      <type></type>
      <name>NistErrorRate</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>aa481af6d7089b110a529357eb7d9e50d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getChunkSuccessRate</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>a25b315284a666a5065540f8f1da1cbe5</anchor>
      <arglist>(unsigned int datarate, enum Bandwidth bw, double snr_mW, uint32_t nbits)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>calculatePe</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>aa2df206d0e5cc31a3c3587438c7d5b74</anchor>
      <arglist>(double p, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getBpskBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>a18175d82399d69438e554cb95c7604a3</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getQpskBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>ab94ccc90f9c0e35de2dd00563f0e5032</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>get16QamBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>a1808f09736f8a581305d5ff4a58e2555</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>get64QamBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>aeeb73f566759330ab5b9f3c39beb1b86</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFecBpskBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>a03eb0d0c7cc0a63f450ea688ddb65117</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFecQpskBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>a5814e5bd473a3127bf659d82edfd97fa</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFec16QamBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>a457f142bf69a3b9d28e8a5a37e48f1a7</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFec64QamBer</name>
      <anchorfile>classNistErrorRate.html</anchorfile>
      <anchor>ac41a5562bd3d9b5b50352301af0f1189</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoNextIteratorException</name>
    <filename>classNoNextIteratorException.html</filename>
  </compound>
  <compound kind="class">
    <name>PairLess</name>
    <filename>classPairLess.html</filename>
    <templarg>Pair</templarg>
    <templarg>Key</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classPairLess.html</anchorfile>
      <anchor>a6b33ccdc9efb6d9c56d78a881002fc49</anchor>
      <arglist>(const Pair &amp;p, const Key &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classPairLess.html</anchorfile>
      <anchor>a1471222ba1517ac3ea7a1a25a07891b9</anchor>
      <arglist>(const Key &amp;v, const Pair &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classPairLess.html</anchorfile>
      <anchor>a57c0f285d2b3a63be1d78ca33e0a7ff7</anchor>
      <arglist>(const Pair &amp;left, const Pair &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassedMessage</name>
    <filename>classPassedMessage.html</filename>
    <base>cObject</base>
    <member kind="enumeration">
      <type></type>
      <name>gates_t</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UPPER_DATA</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6adf76d3ca7bb9a62bed70965639d59859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UPPER_CONTROL</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6aea991e99dac6c91c9e3e89f902f1075d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOWER_DATA</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6a97265ac51f333c88508670c5d3f5ded9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOWER_CONTROL</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6afb379d2a15495f1ef2f290dc9ac97299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>direction_t</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a11c83e74aa007c495b32ec3ed4953a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INCOMING</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a11c83e74aa007c495b32ec3ed4953a50a43c42d4afa45cd04736e0d59167260a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OUTGOING</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a11c83e74aa007c495b32ec3ed4953a50a862e80d4bad52c451a413eef983c16ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>gateToString</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a0f73ac5c7a0ae569ed1fa432a7a58048</anchor>
      <arglist>(gates_t g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fromModule</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a6c340595cb29a4e8a4c55ea0503dffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gates_t</type>
      <name>gateType</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a41f11b3139f3552cf2de3bb648c1ff55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>direction_t</type>
      <name>direction</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>af55219a6ed1e656af091cb7583467f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>kind</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>ab4e2bf6d2317196af7e9c98ed2c406a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>classPassedMessage.html</anchorfile>
      <anchor>a8a4eb44ad1e43205d1881fec0c00a6d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PERModel</name>
    <filename>classPERModel.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>PERModel</name>
      <anchorfile>classPERModel.html</anchorfile>
      <anchor>a18f4f1553b984e711602679b49fc434c</anchor>
      <arglist>(double per)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classPERModel.html</anchorfile>
      <anchor>ab571e93f422b0e6a299cee2c2b886bc0</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>packetErrorRate</name>
      <anchorfile>classPERModel.html</anchorfile>
      <anchor>a32ced82d925f432ef880595a3d202be8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyControlMessage</name>
    <filename>classPhyControlMessage.html</filename>
    <base>cMessage</base>
    <member kind="function">
      <type></type>
      <name>PhyControlMessage</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a4fb5fd0bb2375626b7025b639671e6b1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhyControlMessage</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>aa086361e719389d3656936122df3d130</anchor>
      <arglist>(const PhyControlMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyControlMessage</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a4c3be6b77926135df6f6e1f494709f60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhyControlMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>ade08e3a2c0130d36b121bcecadeff6ea</anchor>
      <arglist>(const PhyControlMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PhyControlMessage *</type>
      <name>dup</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a7e27241e946cccb10a4f2bcb5460d220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a119c428cba20e50d32f4cc3068758454</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a338cee606f2e8954deb11ec324dd0dc6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMcs</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a5c0e12fc7deb76e7e4bf718a511df35b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMcs</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>ac91c0729e06e793cd4ad5653eeccdaea</anchor>
      <arglist>(int mcs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTxPower_mW</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>acaa5b5657ca6e79214a54310a5771dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTxPower_mW</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a0e6705c1d59baf2847925d2c1d049c23</anchor>
      <arglist>(double txPower_mW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>ad8c0557ae1ecfca72d7b4d6986fb29d5</anchor>
      <arglist>(const PhyControlMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mcs_var</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a57fab08495e7daa1c48ca87e8100b5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower_mW_var</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a0b697fc5d171d8efdbc8c8eb1a717f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPhyControlMessage.html</anchorfile>
      <anchor>a9d45a1687ec7a88628df85b5af382017</anchor>
      <arglist>(const PhyControlMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayer80211p</name>
    <filename>classPhyLayer80211p.html</filename>
    <base>BasePhyLayer</base>
    <base>Mac80211pToPhy11pInterface</base>
    <base>Decider80211pToPhy80211pInterface</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>aa3a10ad37436ef978aa9a0874b0da561</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a20bce554b4dcfdb201a7f601e0c34db3</anchor>
      <arglist>(double ccaThreshold_dBm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCCAThreshold</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>ac968284a581471b8a4af04051b0adf68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>ProtocolIds</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a0b31d34140510efcba712787ae1098fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>IEEE_80211</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a0b31d34140510efcba712787ae1098fdac392785e7abffc6438a0495eaa738128</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>aa9c19a4e9aec074db1585455a7474a6a</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeSimplePathlossModel</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a1694c2434fb374bcbbe3ea7b6aea68e8</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeLogNormalShadowing</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a2d543b7a53f299c25c07a4fc3829e80a</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeJakesFading</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a311114a09e1d5f2c8e23d2a523a9735e</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>initializeBreakpointPathlossModel</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a87d6370515d5d7867abb5105c2095a76</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeSimpleObstacleShadowing</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>adfe098a981b32aa82c0cf369bdca29b3</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>initializePERModel</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>aa8d28b20b02c1fe2356202ba40032c38</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeTwoRayInterferenceModel</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a6e9fb3fba8e61140d9c54529ccf1dd89</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>aba4ff7d43c6ee3c6fa550722db94aa86</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>initializeDecider80211p</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a91727110b53120bd4f008b59ffba2b8f</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a88a501014c135335bf1e51ac3d92d845</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeListeningFrequency</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a4b14cc407ce1b09717a090313f557c59</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a6ab453897d17cd1dab056d03594dbb72</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a250e8e0c898c3f861a9132fce82393f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ccaThreshold</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>a3b5a663176db6818ba855efe56566e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collectCollisionStatistics</name>
      <anchorfile>classPhyLayer80211p.html</anchorfile>
      <anchor>af8af5327666bb71acb07ef15e0dec4ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyToMacControlInfo</name>
    <filename>classPhyToMacControlInfo.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>PhyToMacControlInfo</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>a8e9300c49e9f955c4b5333da109143d4</anchor>
      <arglist>(DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyToMacControlInfo</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>a5b56a9f0cf2b87496f6d19df98216bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DeciderResult *</type>
      <name>getDeciderResult</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>a695fcb4091796018a3315486acafc9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>a86ea1dc0f0abd29f5057e09ce1aee7be</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *const</type>
      <name>getDeciderResult</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>a4da6e96b8aa05a9af2aa5b46317231cd</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *const</type>
      <name>getDeciderResultFromControlInfo</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>aa55bf39f48866ffd4c5facd708a3a2ce</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderResult *</type>
      <name>result</name>
      <anchorfile>classPhyToMacControlInfo.html</anchorfile>
      <anchor>a1dc106d6290a2f4f18b4281e14077545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel</name>
    <filename>classRadioStateAnalogueModel.html</filename>
    <base>AnalogueModel</base>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <member kind="function">
      <type></type>
      <name>RadioStateAnalogueModel</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a722dae61250442ba49917eceff0bdb74</anchor>
      <arglist>(Argument::mapped_type_cref initValue, bool currentlyTracking=false, simtime_t_cref initTime=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RadioStateAnalogueModel</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>ac076409f51f9df8493e3cccf03428445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a5373d679bc62e9da7130d93f531adbbf</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a9a3457871c28e3e86759f70a9def9f28</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanUpUntil</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a8034e0bc85edc2debfcacacafc86cefb</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRecvEntry</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>ad80154bcc09f8db0e08efb2efd75872c</anchor>
      <arglist>(simtime_t_cref time, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>currentlyTracking</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a576c1bc7398c256153ac9e22bbc84f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ListEntry &gt;</type>
      <name>radioStateAttenuation</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a45c2c59a03f370e0814e69e51d4ade18</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMMapping</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>a6ec9262901fa86ea2ef6d08fc9410144</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>classRadioStateAnalogueModel.html</anchorfile>
      <anchor>ab901736afc45f0b8dbe019c39356aa09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel::ListEntry</name>
    <filename>classRadioStateAnalogueModel_1_1ListEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>ListEntry</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a103b5e4c79f39b84b58341464a697d8b</anchor>
      <arglist>(simtime_t_cref time, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListEntry</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a4c4e280062255215558b3a610a109600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getTime</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a9f9c8dc6262a26e2875eac5b7ced2626</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a498d467b4ad9223646bf3c78ee2626b7</anchor>
      <arglist>(simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>Argument::mapped_type</type>
      <name>getValue</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>aa2bf26ee7c3020227eff858132485eef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>aa15158ad239ac703da7d93c77ac35e68</anchor>
      <arglist>(Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; simtime_t, Argument::mapped_type &gt;</type>
      <name>basicTimestamp</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a9d66461184f2716ac7d3fb5810d998d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a2871467101970cb463d69dc27772994a</anchor>
      <arglist>(const ListEntry &amp;e, simtime_t_cref t)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a17dd091fbb3d71bcb53c2324f25a695f</anchor>
      <arglist>(simtime_t_cref t, const ListEntry &amp;e)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classRadioStateAnalogueModel_1_1ListEntry.html</anchorfile>
      <anchor>a96ad143c7a58ddc09f6f2feaa41fea8c</anchor>
      <arglist>(const ListEntry &amp;left, const ListEntry &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIDemo</name>
    <filename>classrbvtrTraCIDemo.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a5fe9429af233653661e54dc9f4b730be</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a5f44bc02809d65af3737e16f229e9787</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>ac80e28b617449e669acfd4f655dbb3e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>affef28984f25bf04773c4c6f4e920add</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a65fb0aa2ffd645cfda0680aa1e552e61</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupLowerLayer</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>ad4568f3eee92e41a88c0118441cd8270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>af6ab2c337b947b9d71fc79072942974c</anchor>
      <arglist>(cMessage *apMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a211a9e305ace49c7619f419dd1fc35c2</anchor>
      <arglist>(cMessage *apMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMessage</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a02b3f9bfee9c2f0364601692ad0b5657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>af760a26f300efe34e36abb291c7b6f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a15011c824e7d9bb3e6410d2dbca7cc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a66428ddac915189a52b704d6b402c5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UDPSocket</type>
      <name>socket</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a0b7b5399af6ba11e269e611ac34266ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classrbvtrTraCIDemo.html</anchorfile>
      <anchor>a0345950521b84361d9cf0fac93397cec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIMobility</name>
    <filename>classrbvtrTraCIMobility.html</filename>
    <base>VANETMobilityBase</base>
    <class kind="class">rbvtrTraCIMobility::Statistics</class>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCIMobility</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>abdf019195dcce0873c3d1934bd6e82fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>abcaa4ee37d52f16bb5c01ce5c78d4aa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7afefefc582b1613ba4f8bb92dd54ed8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialPosition</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>ab8124785e1ebf93c09af55e7c4221f5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a3ab1549af5bd920907c45f4614fc08a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>af5d57fcafe80e5c0b47cc41d8075c69d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>acb9dd7730be45ec000356c4d0907b94b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAcceleration</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a6311e60fdfb739a4b8ea090cf30a3c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentAngularPosition</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>addec8d6624c191ef1677c3f86be2196a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7fdd031eba6925ec8488f4f2c2662e73</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>ae7efe9f3631241d2af68836e4977e77d</anchor>
      <arglist>(std::string external_id, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double acceleration=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextPosition</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7ae7d24f270a7f5446144b0411838116</anchor>
      <arglist>(const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1, double acceleration=-1, rbvtrTraCIScenarioManager::VehicleSignal signals=rbvtrTraCIScenarioManager::VEH_SIGNAL_UNDEF)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>ac9e82256bb899c6eff1dba3fa13cc3a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a1415a5859afee65eb5e599d459f0abde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>aae34dc18aeb788d5e4076a78702a1377</anchor>
      <arglist>(std::string external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a381ba0a4c690daa09076f13a44a8280c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPosition</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a99829f56811d91ccae5cbe8cf65c8f44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRoadId</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a22a012ac7c8abdb0bb2ceca4897329da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a2adb6afe6925861e1ccead5b299cae4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAcceleration</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a1d4a94bb1e05710f8fef405492120f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIScenarioManager::VehicleSignal</type>
      <name>getSignals</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a344ec38d8935e45cf499946378a7247e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAngleRad</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7e82abadb06f6b7396ca29490fb24c22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7b8f7ca1940a1b0be9691e03de9fc938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a84b3666577cc54aee647c3d9ae9ba468</anchor>
      <arglist>(int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a3e3632c9a06173c33630f67371d811c7</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a60e1003e62be387deb0c5b37cd1d2577</anchor>
      <arglist>(std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>aabadc669628e6b27e4e4839a0a9ef1fe</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandParkVehicle</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a6761ed4ac165ac0362237437dc943042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7e0eba29eb1a0f398ed0c28866c20f6c</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a6c0f4230d03b04e3d795ecfab7931caf</anchor>
      <arglist>(std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a03a7eb1d3bc533d9ac71db555e88c502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a2aa1451c167b6968b59291f7d8ad1726</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a510133703981fc3fda5c4d5293d313f8</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>af2bd5d96a96614959b0688418a0620a3</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a02078303243de0f26a2cadb38cfcbcc0</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-rbvtrTraCIScenarioManager::DEPART_NOW, double emitPosition=-rbvtrTraCIScenarioManager::DEPART_POS_BASE, double emitSpeed=-rbvtrTraCIScenarioManager::DEPART_SPEED_MAX, int8_t emitLane=-rbvtrTraCIScenarioManager::DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a7cc5ec6afb7d8c44458a46c15245e9ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>accidentCount</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a0a262fe583b1238d3310deacaa6e6f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosXVec</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a15ce735e2cdc9968aa9891814413f4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosYVec</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a32bb998e309df1bc089d222a37d2f65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentSpeedVec</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a83b81aac3075b14ca0ea9a4617f6d5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentAccelerationVec</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>aa61544173991dfe7e9ebffe65bd23aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Statistics</type>
      <name>statistics</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>aa48908d1bd7a22173c1c6cbec2354637</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a3208b35a5546378c967ff796a263b059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a6404a21e3d172a8b38b7bd1a01e74146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a9ac730a4d33f587639738ac3a94e0e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>nextPos</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a3e8400fc9bc9e0469d89ff3a89d94e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>road_id</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a1a63055bcf2a407940331a739f1363bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a6706bfd8c40613a054dbf35fbeb48538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>af80c0520b4a56a1aad20f7105feb157c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>aed59eab05d0fe664c0cd2f2396ea1058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCIScenarioManager::VehicleSignal</type>
      <name>signals</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a485f2df764fc300db4607124ff324de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startAccidentMsg</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>abb0444982ec95bbaf9ec26c12094e993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopAccidentMsg</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a6627228c88e374d726bb8d519f9943f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a310229a1066a1627bea1952845230016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>last_speed</name>
      <anchorfile>classrbvtrTraCIMobility.html</anchorfile>
      <anchor>a522ca7f90fb5e3f551055c4e509da3fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIMobility::Statistics</name>
    <filename>classrbvtrTraCIMobility_1_1Statistics.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a3a32784e38fe205a0a21f71efb315a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a3af5bf49f2db57495dce1ee6ddd6c7a7</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalars</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a15cf8be85755c6c497a6ca5e34fad887</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>firstRoadNumber</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a577fcbf18affd2812c8dab26ac453b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a652dc527522a1d47f60cd647bf86f73a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>totalTime</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>aca6ff524ce54bfb037244fe7416f4f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>aed39ebcf3036fea47cf547605283cab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>afb40b061e97a5c53cccaaaf501af6fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>ae161e8edbdf24ae503d57f41d1c133e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDistance</name>
      <anchorfile>classrbvtrTraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a486ec0ca93d7c80a9043161c7ae5d866</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIMobilityAccess</name>
    <filename>classrbvtrTraCIMobilityAccess.html</filename>
    <base>VanetModuleAccess&lt; rbvtrTraCIMobility &gt;</base>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCIMobilityAccess</name>
      <anchorfile>classrbvtrTraCIMobilityAccess.html</anchorfile>
      <anchor>a84b3b9a47e2baa14cb8e3b73a382dc32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIScenarioManager</name>
    <filename>classrbvtrTraCIScenarioManager.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">rbvtrTraCIScenarioManager::rbvtrTraCIBuffer</class>
    <class kind="struct">rbvtrTraCIScenarioManager::rbvtrTraCICoord</class>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_UNDEF</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a58bad941408094ca31b73493fe84d6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_NONE</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a0f3a1d509e4bf018f19a98d5c690662f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_RIGHT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93ad4da7c5c25fe531cd2f9dd98d4be3eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_LEFT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a64f8ef8c5513186ce6fc4dd6ca370ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_EMERGENCY</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a268c1ce2c3d37ba64cb0e12858209b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BRAKELIGHT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a355cbb265bc8a86a17fc1fd16d09fc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FRONTLIGHT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a8667de037f400fd13c2671183ed9716a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FOGLIGHT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a55f0e0ce695278e8c8ff94fe7daeedfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_HIGHBEAM</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93aadec43a7be378975c4fa1088236f7377</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BACKDRIVE</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93ad7141a085ab62a4bebf018d1424c0120</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_WIPER</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a5f3f725faa36fb1ef7278b2f5ea5f36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_LEFT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a449c15040afecc49168891c499771083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_RIGHT</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93abfd568eae2b677e2a2636baac1fc43ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_BLUE</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93ac1949e56ae3ef9759587d327250eb18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_RED</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93a47a03e12683a8ee311d93688cbf4ab8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_YELLOW</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae499db3006265cf4c83d1d62dbee9d93aeb9ffb321ddd807730fd814391389b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DepartDefs</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac91c60a99d2047d1222702fd5e0a383b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_NOW</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac91c60a99d2047d1222702fd5e0a383babd015889d70535cb401e0323e08b8a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_LANE_BEST_FREE</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac91c60a99d2047d1222702fd5e0a383baf5818c6c8951e589d4627a1bd223e98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_POS_BASE</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac91c60a99d2047d1222702fd5e0a383ba6d4d71c21790cbe2fe4cd7a4c05612fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac91c60a99d2047d1222702fd5e0a383ba922a6055ade4f5d4255527df3bea654e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~rbvtrTraCIScenarioManager</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a68be1b17b82926b493edbc2826d5ec10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ad363289c704fffbbd985775e8b861bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a50ea06df88373a96395628176fee8fd7</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae068883eca88685def1f4f92f5b255d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a0ec501366ca1a43092e0bf606635c4d6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a2477ae0d47190f6d17d4df78cd0477db</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ab70265cee569047cc674b391f1dc9240</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; uint32_t, std::string &gt;</type>
      <name>commandGetVersion</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a5ed2e1c19fcb0c2708e6647f5fd5f49d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a85cf5b3beaebf81283665aa7c2a1c8e2</anchor>
      <arglist>(std::string nodeId, int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>addc1f4564caf43b651e9ecc367fc254e</anchor>
      <arglist>(std::string nodeId, double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a2a7bca7bf85ccf8f29af2207d5b5a7eb</anchor>
      <arglist>(std::string nodeId, std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetVehicleParking</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>afc2283249a4a36c5b40ceb6e16df66e9</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetEdgeId</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac3997346793701a1653031ee78431099</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetCurrentEdgeOnRoute</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a3c391c3838cd4916c96d95ff5db3caaa</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneId</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>acb5d7f984f9c6a9b988b82ccb895714d</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLanePosition</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a5dbbdd7724066c66eaf13c18357e11f0</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPlannedEdgeIds</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a9a8591c7b59f9a8c81b82845080abea6</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetRouteId</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>affb357c5202f9c1440518a27d0434f1c</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetRouteEdgeIds</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ad9f69cc4636821cc26b3adb0e0152a62</anchor>
      <arglist>(std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a30544968527f313eac95e7d3fbe15f7a</anchor>
      <arglist>(std::string nodeId, std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a453a7b6c0247ff0efbb87708e66bb074</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a493ec1441ac69c65a33aff83025dd795</anchor>
      <arglist>(std::string nodeId, std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetTrafficLightProgram</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a3046f2f4ffb37a1fdc3c7cd3fad15781</anchor>
      <arglist>(std::string trafficLightId, std::string program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetTrafficLightPhaseIndex</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a27870674838b03ad7b5ea68acf38c4ab</anchor>
      <arglist>(std::string trafficLightId, int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a92cfebdacf11bb801b7c288f08081463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>acdb00000294b06b1bb417e494b64ec2a</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a6e5fc76c7d84dd3e05b8798882a6b4ca</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a0220ce2435d0a0fdc9ff5cbd14e13f4c</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandAddPolygon</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aca724338e136d0e4c2a6c069b05ad29c</anchor>
      <arglist>(std::string polyId, std::string polyType, const vanetTraCIColor &amp;color, bool filled, int32_t layer, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandRemovePolygon</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a801651108ded7b4d49fa7009709d177b</anchor>
      <arglist>(std::string polyId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandAddPoi</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>abcffda23b7fb3c7ec4da3f93b0b297d0</anchor>
      <arglist>(std::string poiId, std::string poiType, const vanetTraCIColor &amp;color, int32_t layer, Coord pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandRemovePoi</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a9396baba3a9e62f56da777aa9f4de011</anchor>
      <arglist>(std::string poiId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetLaneIds</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a4b8f630186193ba43064424972b1b18a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetLaneShape</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aba23bc298c6bfd9ebe2a1e63fb47415c</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneEdgeId</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a1fea33928bbc711efbaba13127f863a7</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneLength</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>adb836c32e21bd793e8c7ebf47df6651c</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneMaxSpeed</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aaeda41d7fbe8d37b9d63c3a649bc3535</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneMeanSpeed</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a8e11e8dab42ca89aa52035dba93eddef</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetJunctionIds</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a3d33e2be7db173a4503bb6cbaae0aab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>commandGetJunctionPosition</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aee16e8b48276f5a665d4707cc335247b</anchor>
      <arglist>(std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a8453ade6ca00ba9d2a590c78fd0363aa</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-DEPART_NOW, double emitPosition=-DEPART_POS_BASE, double emitSpeed=-DEPART_SPEED_MAX, int8_t emitLane=-DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, cModule * &gt; &amp;</type>
      <name>getManagedHosts</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aae258fca5d59b7a9df576a59df9fb818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>getCurrentTimeMs</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a3520a2a97158d44551d9105802ff1801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeOneTimestep</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a66ddf721c56f977a200c21f6867afd29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>afe8acaf5b6d47a8cd903d4f71acec983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>af4c73d6f0656b48ba00df32ff07e7fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addModule</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a3f92aa3a6fc2289a11ed4e6f42c28cf3</anchor>
      <arglist>(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double acceleration=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getManagedModule</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac43208267eb4d1314c7e824752268f40</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteModule</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae97323dd2440a1577df487d5973adedf</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isModuleUnequipped</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a5f038d4a2734978667c88bbde0a117c9</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInRegionOfInterest</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a66605603d3103e787fa1361652e28214</anchor>
      <arglist>(const rbvtrTraCICoord &amp;position, std::string road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>rbvtrTraCIBuffer</type>
      <name>queryrbvtrTraCI</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a4bcebda3180ca56ec1d8de6b9dc800df</anchor>
      <arglist>(uint8_t commandId, const rbvtrTraCIBuffer &amp;buf=rbvtrTraCIBuffer())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>rbvtrTraCIScenarioManager::rbvtrTraCIBuffer</type>
      <name>queryrbvtrTraCIOptional</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a798184b713c53bb4c425cc9eb11ff660</anchor>
      <arglist>(uint8_t commandId, const rbvtrTraCIBuffer &amp;buf, bool &amp;success, std::string *errorMsg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>makerbvtrTraCICommand</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a7772826e5043c911fce8a5500f9dd838</anchor>
      <arglist>(uint8_t commandId, rbvtrTraCIBuffer buf=rbvtrTraCIBuffer())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendrbvtrTraCIMessage</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a2ad44bdea0ec0a993be74ac8325a9d0c</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>receiverbvtrTraCIMessage</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a7d825c533b96fc83aa779844963b9dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>genericGetString</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aff5d6735a0a584f56e9edb7676b6ec23</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>genericGetCoord</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aea18eff577bb9038f265f61c5f7567ae</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>genericGetDouble</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a0982a82c366a1069abbd21a13c653cee</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>genericGetStringList</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a27261e7565f98f18e15ca815c7285c88</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Coord &gt;</type>
      <name>genericGetCoordList</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ad51f0d1d5e90c4e0324743107e4ef97e</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>rbvtrTraCI2omnet</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a590421787ba6679d0a7e35e7f3840e07</anchor>
      <arglist>(rbvtrTraCICoord coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>rbvtrTraCICoord</type>
      <name>omnet2rbvtrTraCI</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a16f36acfcd7987c591f8ec85c5b5dcd0</anchor>
      <arglist>(Coord coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>rbvtrTraCI2omnetAngle</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a327727542aebbcf7af4799930ee9832d</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>omnet2rbvtrTraCIAngle</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aac78c03b1f53869919dbffce78c212cc</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToVehicleVariables</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a53d84f38904ba4358cfe7c179b5a0c2e</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromVehicleVariables</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a8b1dbfc698d7a3203b11342baee28a50</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSimSubscription</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a4a32ef3d1c8aa2680a3201dc6c71b6f7</anchor>
      <arglist>(std::string objectId, rbvtrTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processVehicleSubscription</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a03f77f2b9af16c2281b7b9ee72e2773b</anchor>
      <arglist>(std::string objectId, rbvtrTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSubcriptionResult</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a8ac85037db20e68fd23c37e317544b10</anchor>
      <arglist>(rbvtrTraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a6ccc5bd891cca8263051e0ee691d66e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>connectAt</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a1c6746ec90242fc3e9e31d1de0e60bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstStepAt</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>abf15c3a79bdf0a573d555f3c6ce25f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a421e4c6e0361767c374417f6b4825705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleType</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a67fd6424f590fa5ac34a73d48b3c9ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleName</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a4fbe2ad6d71906c8b5b597dcf29cf0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleDisplayString</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a9bc554b5d92449e6a424e00c99408cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a1b5a5b1b43bef36a1bba7c7fa540efaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a7e07cc065b9eeea79c89c1a9ac93f15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdown</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a1b3e56d15ce24e2849c46dc763403e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>margin</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a66a2e9d1a4eef332df43e41bbf0f1813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>penetrationRate</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ac068d8f6bb551b3a7e741dd988b1a93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>roiRoads</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a7d584a6b3087a6a1c38501a71bdcb830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::pair&lt; rbvtrTraCICoord, rbvtrTraCICoord &gt; &gt;</type>
      <name>roiRects</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>abb095704a1e6a13c227a1683c3e08de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>socketPtr</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae3069fd300881794d31ec21505738f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCICoord</type>
      <name>netbounds1</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a79c7196087d041c98814742ca08e704f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCICoord</type>
      <name>netbounds2</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ace7af0d0082e46f874f8a9f3deb832d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextNodeVectorIndex</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a6f76e8d51071bca9a9c8c9723a8ecf24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>hosts</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>af84e2f0c67dc7106ed46b7fd8024732d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>unEquippedHosts</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae4c9406f0bfff1de8de6f86216e483c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subscribedVehicles</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>aaf22b56126d92158c63e5de872cb51ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>activeVehicleCount</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a1568e379898be6f32feae173b5b4fea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdownTriggered</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ab7001c6d9dd9c1533402a7d5fa1f39bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectAndStartTrigger</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>a9dff425f6458719e6f7f4b6476770328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>executeOneTimestepTrigger</name>
      <anchorfile>classrbvtrTraCIScenarioManager.html</anchorfile>
      <anchor>ae700af7ed8825071ad7a58b85667d8d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIScenarioManager::rbvtrTraCIBuffer</name>
    <filename>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCIBuffer</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>ab5c04a3627e83f2e6714a517d0bf76ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCIBuffer</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>aa44d2dc5056df6a532d9c67267b52995</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a7d8ce4fc7c250c2d99fa6d29b8e26b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a8d0e8fd76dc9e08f71b7396d0bbf9c7b</anchor>
      <arglist>(T inv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>ae191b31da694dc957aa369ea0b3216dc</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>rbvtrTraCIBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>afe57112206d738ec5ee9e2e9cc8030ca</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>rbvtrTraCIBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>afaa45b6dca53b805030787c071ad9567</anchor>
      <arglist>(const T &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a2c2dda6d5f7999f24884ce36dd8c793f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>aab536bcdfa64cf09b8eb1dc9f1e8e4a3</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>ad09670ec731f41a3487e196505a429fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a97c46dc0f15a37160d110e9ce8ddb806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hexStr</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>aee47f6abf9664ea5c89daf4fc4435029</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a2ee03697567a952d016e87bf8ae6bf07</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a3011665c9a60fc71dda572ec5e9a3059</anchor>
      <arglist>(rbvtrTraCICoord inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a429209b1d0cc86b371848cdfc536a0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rbvtrTraCIScenarioManager::rbvtrTraCICoord</type>
      <name>read</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>af140003d7349f06f5f3304cb57041f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a03ec60999cfad16f355ec2a0a341a5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>buf</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>ac22d443eafff1986b3d5d2fbf6a3e0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>buf_index</name>
      <anchorfile>classrbvtrTraCIScenarioManager_1_1rbvtrTraCIBuffer.html</anchorfile>
      <anchor>a75b7dacdbeb988f71d461c36fc757dd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rbvtrTraCIScenarioManager::rbvtrTraCICoord</name>
    <filename>structrbvtrTraCIScenarioManager_1_1rbvtrTraCICoord.html</filename>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCICoord</name>
      <anchorfile>structrbvtrTraCIScenarioManager_1_1rbvtrTraCICoord.html</anchorfile>
      <anchor>ad8d81d5c3e778fdae5a7f00304965794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCICoord</name>
      <anchorfile>structrbvtrTraCIScenarioManager_1_1rbvtrTraCICoord.html</anchorfile>
      <anchor>ab2be5ecef8f6df8c3ef6eb230e97b139</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structrbvtrTraCIScenarioManager_1_1rbvtrTraCICoord.html</anchorfile>
      <anchor>af0fa4fe39fc7a5d45b4563e6cae11250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structrbvtrTraCIScenarioManager_1_1rbvtrTraCICoord.html</anchorfile>
      <anchor>a0d11fea9db65687306c9386d0551da9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIScenarioManagerAccess</name>
    <filename>classrbvtrTraCIScenarioManagerAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCIScenarioManagerAccess</name>
      <anchorfile>classrbvtrTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>a2956c1df1612b8ba3a97f25076720d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rbvtrTraCIScenarioManager *</type>
      <name>get</name>
      <anchorfile>classrbvtrTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>aa490c3699ad787aef4e65bf04ae55727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCIScenarioManager *</type>
      <name>o</name>
      <anchorfile>classrbvtrTraCIScenarioManagerAccess.html</anchorfile>
      <anchor>aff71c095ba737c8c3457fe4caa92285a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIScenarioManagerLaunchd</name>
    <filename>classrbvtrTraCIScenarioManagerLaunchd.html</filename>
    <base>rbvtrTraCIScenarioManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~rbvtrTraCIScenarioManagerLaunchd</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a909fabffdd27d03a5c6ecfdc6c323984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a54adb82fbe715029b82f541115bf2c3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a627c4a9503aa7a79aea7642de2655010</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>aff007a8e8d2838c6dcb1dea78eddc7f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a79dca534041145175d3c143cd2d807a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>launchConfig</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a74fa79e85a1b91ed4fab6658fae53710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>aa9038e3946a87cd59bcaeeb7c0bbfa21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCIScenarioManagerLaunchdAccess</name>
    <filename>classrbvtrTraCIScenarioManagerLaunchdAccess.html</filename>
    <base>VanetModuleAccess&lt; rbvtrTraCIScenarioManagerLaunchd &gt;</base>
    <member kind="function">
      <type></type>
      <name>rbvtrTraCIScenarioManagerLaunchdAccess</name>
      <anchorfile>classrbvtrTraCIScenarioManagerLaunchdAccess.html</anchorfile>
      <anchor>abbe932632e85800f2bd88c9c61fac7d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIScenarioManagerLaunchd *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual rbvtrTraCIScenarioManagerLaunchd *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbvtrTraCITestApp</name>
    <filename>classrbvtrTraCITestApp.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a7b14685b67d5206fdb4c70d9d268e306</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>ad5b2983c880bae3800b1a9139e2c88a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>ac242b1a9be669cb5ec7bd89c819d83b0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>ae0edcffe75aa2c12dbb6c3222aabd7c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a353b0b52c4a9b59beb1f94f3cc158612</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>af9a183d219e46d3a0142e4dfcdecbf7e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a2955eb74f37ac8d62035c2582b9abdb2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a8b45ed12a8338af3948c50462fb2ee5f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>aa1c016813fcaf0e1b9f84daba086cb25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a4ebe06ba5671c213a2869fc47dabaf07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbvtrTraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>aa473784c8651fa7aafe285bd460ecc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a5d931fff3e85fed3149c80101d8ffb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a553ab24e469bf35ab721e735a5d88ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classrbvtrTraCITestApp.html</anchorfile>
      <anchor>a5dab3475ebf43d48679d4723dfd59df9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMConstMappingIterator</name>
    <filename>classRSAMConstMappingIterator.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a88568a19f3ddbae8645fdabffc2dc2a5</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t_cref signalStart, simtime_t_cref signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSAMConstMappingIterator</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a94df8b87b252de13463b326c7d77e3cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a3740e6b65c335fcde632e296b56070de</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextPosition</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a082fa16cd2eaa7ac2dd0b16b66660317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a3a34a4fb1e22f7e0bbac13e21d08415e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a7694574b32a82ddbfa3e86bed32be016</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a919ae04b93ed239dc2f5566a383f28d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a7dd83432a7cd3ff5d1f827cb34f61a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a1a5d0e40bb42450fb2158e6172cc27d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>af465b20a9a50c6640289e7f53f26134d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a35441df57b5a398c15aefd4696ac9e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a59275f8855f0bda32e25116da54dcd2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateToOverZeroSwitches</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a8387043b9b90a5ea75d3d968cbb87f10</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; RadioStateAnalogueModel::ListEntry &gt;</type>
      <name>CurrList</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>ab27af19743434c8f938fa12240ce2b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>aad2e47c90690500114b0715ac93fdea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CurrList::const_iterator</type>
      <name>it</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a611fd29b7a53da28738c0871132fcc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a9039bc33a7d35f7fefa980d1bc48ad5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a926d1e5571f715a515233de3f245dea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a44e62faddab1436a85e70e80d00080ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>classRSAMConstMappingIterator.html</anchorfile>
      <anchor>a1f51b46c71a890d8331afb993bf1cc54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMMapping</name>
    <filename>classRSAMMapping.html</filename>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>RSAMMapping</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>acec9b66637a97c81d45a073f622bf9ee</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t_cref signalStart, simtime_t_cref signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSAMMapping</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>a91e61fbd18ee4bc68238fc13faa48c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>adfde2753ba641cbdafbd95fc914034e6</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>a0c4471fe51b34fab8f93b644326c1862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>a79e3de9b0f3220b01dd28346e51ae019</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>a7b47c38b2b2c98e251db268c9fe4ce6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>a1e968e40c9c6d55ef033aea16dc7cc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>a83073d619992a38be77157eeaa8de677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>classRSAMMapping.html</anchorfile>
      <anchor>ac4a1ed01e6319d66ada6b7bab12ce93f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Signal</name>
    <filename>classSignal.html</filename>
    <member kind="typedef">
      <type>ConcatConstMapping&lt; std::multiplies&lt; double &gt; &gt;</type>
      <name>MultipliedMapping</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a484a5f8dfebfd933edcb1a55770df0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>ConstMappingList</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a463671c45cf3099eb81d8840c86a27b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a0da19733584d5de330474ee32b6bc186</anchor>
      <arglist>(simtime_t_cref start=-1.0, simtime_t_cref length=-1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a079cc6bee7380f5744001d5f26505b2c</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Signal &amp;</type>
      <name>operator=</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>aa9c8501095ecc3fb4a60f4f0e2007138</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Signal</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>ae7a1d116cda63e790bf9aab549d57d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingStart</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a0d2a31d69d90186d6f0ba17719f3a9e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSendingEnd</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a65d72906b81304dd63f93408ba8f4b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionStart</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a7c4710243cf87caf7dfc9f313e2619b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionEnd</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a2875223239e124d85949e1116cc12ae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a22f7cede842dbfe895cd8aedf708402f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getPropagationDelay</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a815379c4c75ace99ad262d4abc651f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationDelay</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a2864ac2fa780e25223db94ba3d36b8e9</anchor>
      <arglist>(simtime_t_cref delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransmissionPower</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>ad8c5494d0f7bd564bf14dc0c90f9a361</anchor>
      <arglist>(ConstMapping *power)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a86e4ecdabd5ca03ede5e2c81c6b76002</anchor>
      <arglist>(Mapping *bitrate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAttenuation</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a0beeef0f27c33145a0fca521df1c5f5c</anchor>
      <arglist>(ConstMapping *att)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a392ecf1a624edfb90243e7227370a772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a5e8552f0d95e8faea2dee32ee7ba7212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>getBitrate</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>adfd5ce93e172004046d7714eaefb36c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMappingList &amp;</type>
      <name>getAttenuation</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a9b949d4e6bd18f6baccd66748c2bcd78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MultipliedMapping *</type>
      <name>getReceivingPower</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a513b1abac0b04549585257f7f5f8ebea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getReceptionModule</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>ac78bb49ae3090d9954722feaad3e88ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getReceptionGate</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a3de107a6c7b0283bb79b7e641616b26c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSendingModule</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a2edb4eb1bb7cb96f389999ba624ad5bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSendingGate</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a687a2fde154487ff1c6516073a5fc0c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceptionSenderInfo</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a6354b073881f4ea6190637d2e0164372</anchor>
      <arglist>(const cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markRcvPowerOutdated</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a594e926b3d8ff3330375c8850699ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderModuleID</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a3e9509d6f61f45994b1bf49d319e4b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderFromGateID</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a7355857ae0852dfe9e415d475585396b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverModuleID</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a44ca8e70f7bd86a8af28bd382bea7434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverToGateID</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a539dc4174aaa8ca81c7b40b9e39470fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendingStart</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a56c032041881146f469092037028affb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a8073ad666fac40bf900fe0d9d6a88fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>propagationDelay</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a8549f666048ce96bcfd1b4d9c9a3e95b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>power</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a3570fb45af2a0f7580ee32c57e90e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>bitrate</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a4a6e1ad1165fc73157c8820739011e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>txBitrate</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>ac60bce52288a4fc2067aa394918edf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingList</type>
      <name>attenuations</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a1fb9da7932d7c4746f2afaaa21153cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultipliedMapping *</type>
      <name>rcvPower</name>
      <anchorfile>classSignal.html</anchorfile>
      <anchor>a9e3d433a61e8188c8a6de5b540da8d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMapping</name>
    <filename>classSimpleConstMapping.html</filename>
    <base>ConstMapping</base>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>aeb10c744b8f4c6df092332b6228e209e</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classSimpleConstMapping.html</anchorfile>
      <anchor>a49da397ee4ea25a6bdcf7f08dc6e2ed5</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMappingIterator</name>
    <filename>classSimpleConstMappingIterator.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>aef703d1c7304041f2594886e902134ed</anchor>
      <arglist>(const ConstMapping *mapping, const SimpleConstMappingIterator::KeyEntrySet *keyEntries, const Argument &amp;start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>acd9ffe8031190318003512dd72a060ad</anchor>
      <arglist>(const ConstMapping *mapping, const SimpleConstMappingIterator::KeyEntrySet *keyEntries)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>ae024ecc6a05c06a6c1f80cd594c387a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a810c8af9b437ac5bd010cf5f4b154045</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>aff0c387e3cc73d9821078492ae90e82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>af63f318fde0e50bc3383ebf1686d4a7a</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a4984e94b5c551edac1270dc35db8e02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a25c1a14b6104fd53f38f1ffaa0555864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a7d5c3fb31916385945abed1d6a38f797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a54d571cc74688a5ce0b23a8d8ba5f04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>ab76e81f21df7609e4af1d65e570e08ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>acd382b24005d9a14b143b6efd5922eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>KeyEntrySet::value_type</type>
      <name>KeyEntryType</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a54ae3def7249f54515c6683ba554ccf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *const</type>
      <name>mapping</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a0e0ea2154862ca3e6b35c393e87849fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet &amp;</type>
      <name>dimensions</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a5600a3c00abb82f8fda8ceb84b13530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntryType</type>
      <name>position</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a7b29cea82195fd2084e4f63606aeb506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyEntrySet *</type>
      <name>keyEntries</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a55107a3430801eefc9c6130995f7e98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet::const_iterator</type>
      <name>nextEntry</name>
      <anchorfile>classSimpleConstMappingIterator.html</anchorfile>
      <anchor>a4e274fc2e3dc1900b7c210509fc34513</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleObstacleShadowing</name>
    <filename>classSimpleObstacleShadowing.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimpleObstacleShadowing</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>a32c9fa5e6c1b258fc3525675ebe3db8e</anchor>
      <arglist>(ObstacleControl &amp;obstacleControl, double carrierFrequency, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>ab8f4e9c3b104f4b7fe18e4f275af79ac</anchor>
      <arglist>(AirFrame *frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObstacleControl &amp;</type>
      <name>obstacleControl</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>a66eb87c36db8dd2241060ff981ddc593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>ab857710090727518997552d3c598d6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>a27541aef7ae32f7885c7a993f21c1746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>a9d11af9f7758bc5b18a4d39dd994313e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classSimpleObstacleShadowing.html</anchorfile>
      <anchor>aa402d34d3d0d4d22ec761f6ad5fdce28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossConstMapping</name>
    <filename>classSimplePathlossConstMapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>classSimplePathlossConstMapping.html</anchorfile>
      <anchor>a05ca5384df78435f54d6126651daaaa4</anchor>
      <arglist>(const DimensionSet &amp;dimensions, SimplePathlossModel *model, const double distFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classSimplePathlossConstMapping.html</anchorfile>
      <anchor>aa263547a6e528cc1acf88fc496510e40</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classSimplePathlossConstMapping.html</anchorfile>
      <anchor>a07a068298d3682405c07849bbcafac3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>distFactor</name>
      <anchorfile>classSimplePathlossConstMapping.html</anchorfile>
      <anchor>a5256f04ca6630c73e38c611472d330a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimplePathlossModel *</type>
      <name>model</name>
      <anchorfile>classSimplePathlossConstMapping.html</anchorfile>
      <anchor>acd7441a6db213de39f2286e7e91110b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasFrequency</name>
      <anchorfile>classSimplePathlossConstMapping.html</anchorfile>
      <anchor>af4da6a90c9477ea1de2eccfd9ae95e55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossModel</name>
    <filename>classSimplePathlossModel.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossModel</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>ae8950c3add4334f0f8642a660671c075</anchor>
      <arglist>(double alpha, double carrierFrequency, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>a632b408d1c0ecac4fd90da5d48d73c5e</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calcPathloss</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>ade7562b60b0a5ced0d81ca29bee99ffd</anchor>
      <arglist>(const Coord &amp;receiverPos, const Coord &amp;sendersPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlphaHalf</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>a064c70c5c35a1bcb1d6450722d70ec1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>a48902a15501db259c953348f4d50313a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>ab6305bce0317842e0931aebdfb525e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>a5ba93764d5161a8ab7b299a930f3382d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>a659b7135ed6ca2282617b863362f21f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>classSimplePathlossModel.html</anchorfile>
      <anchor>a917f0958441d102331b9adf788fd63c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>simsignalwrap_t</name>
    <filename>classsimsignalwrap__t.html</filename>
    <member kind="function">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a0cd6dc064fbacefdcbcb7bab6366af0e</anchor>
      <arglist>(const char *const pSignalName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>ae2973c10941420fa7c60f3df329bd108</anchor>
      <arglist>(const simsignalwrap_t &amp;pCpy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator simsignal_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>ac0e7f28a74aad2569ccfa51b2f8486b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getRunId</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a09bb09ab4bdd1da8783a163003200b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>ac9d9d7ef1abbd87d573fe44c0a5692ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>volatile simsignal_t</type>
      <name>ssChangeSignal</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a3ca298b148783eba89d72134a55d485f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *const</type>
      <name>sSignalName</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a4235d46c336709e687bb1aced9983318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>sRunId</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a1e4eb06d588a1023da2e550a2bcf3bc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SNRThresholdDecider</name>
    <filename>classSNRThresholdDecider.html</filename>
    <base>BaseDecider</base>
    <member kind="function">
      <type></type>
      <name>SNRThresholdDecider</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>a5de72610fa410544fd6ff678b6f72f56</anchor>
      <arglist>(DeciderToPhyInterface *phy, double snrThreshold, double sensitivity, double busyThreshold, int myIndex=-1, bool debug=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SNRThresholdDecider</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>ac07c187348a6d669285c822cc6b94a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>a1e6266fe8a4d10ce5443e37321d3bcaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkIfAboveThreshold</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>a1d796e2f0da1c41810c5f2c5b4cfcd2e</anchor>
      <arglist>(Mapping *map, simtime_t_cref start, simtime_t_cref end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>ace13845f43c5328cea40eb00c59af2b3</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>a6002f2ee8ffa35ded0162c72f93c9fba</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>canAnswerCSR</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>a0946c7a3e2ee04e2bb1c2dce4b7be7ec</anchor>
      <arglist>(const CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>aa7e33361b328274b04ff7bd2d6206e6d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIdleRSSI</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>ae900f58c344f86cea2dbf21b55a74d85</anchor>
      <arglist>(double rssi) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>abdb6b19743460a19e900c4b6d38c483b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>busyThreshold</name>
      <anchorfile>classSNRThresholdDecider.html</anchorfile>
      <anchor>a8f32acd24c8c84efee941211d1f81c98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMapping</name>
    <filename>classTimeMapping.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a3ca434daf1dece372ccc7421b5305720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a1fbcd02d2c6525dc0d89354a146e4efb</anchor>
      <arglist>(mapped_cref_type outOfRangeVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a3d9bde06fb3d637992eb3e60135d96c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a4f46930630d6c6a79b34211992840731</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a453ce64062fa7afd7398735a9cf499a6</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a99f25f5769ab59fd41080fedfa0dbaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a46c922604b76bf239263820a34a6ff29</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; simtime_t, argument_value_t &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a234c05b54a7bb7366b6f40598c925aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a3d3dc8083e25509e01ffeac67792fea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>ade5767a86bf9854bc2c277aec02a1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>ad3d8288de00e1653af77476e3940f54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>a75b569ea7018b0f3e08a65a84d7ee97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>af8af9735fbd58320b894d961f690c4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>classTimeMapping.html</anchorfile>
      <anchor>adb0dbcc9aec3a052d85ef7e015a89148</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMappingIterator</name>
    <filename>classTimeMappingIterator.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>TimeMappingIterator</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a0bdf656d6e53fda33b555b0c100af6ff</anchor>
      <arglist>(const iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a41457ef9679298443d01dd5d29d63864</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>adf215619550c90677bb8784e61813c45</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>aa12e17f8a08312b3661671c1c2b6c4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a787c682f86d90d77fddc92f4045639b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>ab9eb7cfe03f970af00ce999161dc8077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a19cc52d765cc946a004c87e92ebc659a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mapped_type</type>
      <name>getValue</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a29e9cd7dbc9096f8694739faaa3450b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>ac7a2b12c7ac068980d72b374d2ea4182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>abac41f2fb9ad8d503df9d8c27d3d6340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>ac4eef2a5a0b2c899e270048c86d6ec66</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; simtime_t, argument_value_t &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a61386f0c76f3a08c1d35b46924955212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a664b59f81dcbbb62cdca0800d13a7a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a3c5c546c73e7faaccfc94b2e13d8fec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a0f7b37f70b736b69dc5c19341685958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>afd8d7a3a42b56a8644e063da708c3e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPos</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a1a9382671669207404a7edba9469145e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a178fa9015e993aa264bc1351b218431a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>af9dbee2a6ce9ba1d26d8e2cd82c413f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a228df0793fb7486e617aeb9ba6540863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isStepMapping</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>ac8e1d2adb44399eb29c4b0fc4f84a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>atPreStep</name>
      <anchorfile>classTimeMappingIterator.html</anchorfile>
      <anchor>a79417d5433894eb05e64574c3c8a3090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TraCIDemo11p</name>
    <filename>classTraCIDemo11p.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a0f070d06bf6eafef5bf85063f963a13d</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a63c38f89463a42420b046dd8170117b6</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a1f5ef090acae19199055328ce0422ac0</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a73a6ca11b60eeb8ca9a523e382787a72</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>ab41ac005b7c30f7217ba3a26c23a645d</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>ad9a9d4f6da6e486797c930f6f6df5ab1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParkingUpdate</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a173cade98af1b12755ee6dbac4e7584e</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a63233b99c92c122e8fc7c5ce5da0c438</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>mobility</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a2262ef8b2785a6ea97acba13f21e637d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>aea490a9e9ad4efd1dd3483b257fc191d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface::Vehicle *</type>
      <name>traciVehicle</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a92c8968af0e847dce7018a622254523c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a56128f924742904230a94e336abb1ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastDroveAt</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>afaca6dd0083002b5956e2fe9ac8f033d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a3abd82e2e85669ac256e87b95b2892c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>abe522d5f2bc76da5249cb2d2c71f4ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendWhileParking</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a561f98af20e0e6b45d063974c63b6d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classTraCIDemo11p.html</anchorfile>
      <anchor>a21c71c53d1ea3119f3edb77ccd8d29e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TraCIDemoRSU11p</name>
    <filename>classTraCIDemoRSU11p.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>a94a8c38a2685c7dd941c79e96d507cbe</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>a2d9ac4a5768faaacf9c6a93f89ce66d8</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>ac9d01a67de93ec7f9e64ce7c664c370f</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>a8ec20e405841c5724bfe8a29b352d580</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>afd0f615084c6e709fe10f513e90da6ed</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>af5ccc47f99dbb52ad91ac3426b776d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>aff89329eb04939aea7d42d85b69609ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classTraCIDemoRSU11p.html</anchorfile>
      <anchor>a35e81416854eda6fb9897f744b06eb15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoRayInterferenceModel</name>
    <filename>classTwoRayInterferenceModel.html</filename>
    <base>AnalogueModel</base>
    <class kind="class">TwoRayInterferenceModel::Mapping</class>
    <member kind="function">
      <type></type>
      <name>TwoRayInterferenceModel</name>
      <anchorfile>classTwoRayInterferenceModel.html</anchorfile>
      <anchor>aa307745f89b85c3818babbe4ff613c6a</anchor>
      <arglist>(double dielectricConstant, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TwoRayInterferenceModel</name>
      <anchorfile>classTwoRayInterferenceModel.html</anchorfile>
      <anchor>ab2fd59f8ff378897fcbf2ab4a7a3d81a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classTwoRayInterferenceModel.html</anchorfile>
      <anchor>a4488ba8c6127ff2e016edaa6bbd6a4c0</anchor>
      <arglist>(AirFrame *frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_r</name>
      <anchorfile>classTwoRayInterferenceModel.html</anchorfile>
      <anchor>a759b4daf5d7ee63761487a327cdf765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classTwoRayInterferenceModel.html</anchorfile>
      <anchor>af42413a25e44da60e4e79ab402f7c12f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoRayInterferenceModel::Mapping</name>
    <filename>classTwoRayInterferenceModel_1_1Mapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>a213028d2da53563f4c3b069e7c6b1608</anchor>
      <arglist>(double gamma, double distance, double directDistance, double reflDistance, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>ac293b9b7bf938aa591ec122d5b1172a4</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>a5b7dadcd022ec915ac180fd03f02caed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>af9f7c330e6c9f73581aa0ccf258025e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>a3f15d5ae55ea0f4c38b6e466a2da27cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d_dir</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>a538f9403d4af3cbe25408e47747dfed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d_ref</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>ab1bf53c80d53a51809d7cb2bb8fa44f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>ab96733624efeb51822cb98ccbca4e2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>a004bcb5773d7f444976f4bab32d3b32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>classTwoRayInterferenceModel_1_1Mapping.html</anchorfile>
      <anchor>a517c64ce3d3f928aa3c1a353f2781e11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UnreachableAODVNode</name>
    <filename>structUnreachableAODVNode.html</filename>
    <member kind="function">
      <type></type>
      <name>UnreachableAODVNode</name>
      <anchorfile>structUnreachableAODVNode.html</anchorfile>
      <anchor>ae64d6fd0ff1c4f95f06771998bdc1467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>IPv4Address</type>
      <name>addr</name>
      <anchorfile>structUnreachableAODVNode.html</anchorfile>
      <anchor>aea955d03d651fb7d59abd57d5beeb271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>seqNum</name>
      <anchorfile>structUnreachableAODVNode.html</anchorfile>
      <anchor>afe03e2b73dfc9cc1f81a022cdf3ea661</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vanet_ControlInfoBreakLink</name>
    <filename>classVanet__ControlInfoBreakLink.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>Vanet_ControlInfoBreakLink</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a089996d964f3a6940cd35e97cd6a3f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vanet_ControlInfoBreakLink</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a72e36b09b8c4ff51faa9cb061692cdc8</anchor>
      <arglist>(const Vanet_ControlInfoBreakLink &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vanet_ControlInfoBreakLink</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a087447e209c731a1e8691eb776bed1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vanet_ControlInfoBreakLink &amp;</type>
      <name>operator=</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>ac2b24a96317eb37f203caa5ce8809341</anchor>
      <arglist>(const Vanet_ControlInfoBreakLink &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vanet_ControlInfoBreakLink *</type>
      <name>dup</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>ae4f5c3abd504aa0774ec10b93ca55194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>af866d4fb7a0bdbb8bdaffb3c4139eabe</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a6be9d3e0f6f6f4d0c9f9c9f4ed441c3e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a33476d402549754532255f8dbc48e2a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a8dd409142dec97f96136f8c04b05dcae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a1f0a8d42a96740ab9118d89421b2c710</anchor>
      <arglist>(const MACAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>ae9d658a99ef7287739f16c4024962808</anchor>
      <arglist>(const Vanet_ControlInfoBreakLink &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>dest_var</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a37e373998152c809af49f2274da54c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVanet__ControlInfoBreakLink.html</anchorfile>
      <anchor>a741cce4ddd38323c260c6ae8a36283cb</anchor>
      <arglist>(const Vanet_ControlInfoBreakLink &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Vanet_In_addr</name>
    <filename>structVanet__In__addr.html</filename>
    <member kind="function">
      <type></type>
      <name>Vanet_In_addr</name>
      <anchorfile>structVanet__In__addr.html</anchorfile>
      <anchor>a1092758a12b0efa6a34b9652dcd9b9d7</anchor>
      <arglist>(const Vanet_In_addr &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vanet_In_addr</name>
      <anchorfile>structVanet__In__addr.html</anchorfile>
      <anchor>aca0145d708b05b2515b7761c308d055e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vanet_In_addr &amp;</type>
      <name>operator=</name>
      <anchorfile>structVanet__In__addr.html</anchorfile>
      <anchor>a50c49ad8dbc843f45105c7d83e350cbb</anchor>
      <arglist>(const Vanet_In_addr &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>VanetAddress</type>
      <name>S_addr</name>
      <anchorfile>structVanet__In__addr.html</anchorfile>
      <anchor>aa9d22ad095fda351d93171cdcd058d50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vanet_LocatorNotificationInfo</name>
    <filename>classVanet__LocatorNotificationInfo.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>Vanet_LocatorNotificationInfo</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a42586669acd29437009a4df13a14df46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vanet_LocatorNotificationInfo</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>ae84fc75d3e81be818376d32b4fa7d48b</anchor>
      <arglist>(const Vanet_LocatorNotificationInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vanet_LocatorNotificationInfo</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a7ea98488b57b765df71d5158f3a03ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vanet_LocatorNotificationInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a945e31745b7271e5ff6cfb8ea70dabd2</anchor>
      <arglist>(const Vanet_LocatorNotificationInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vanet_LocatorNotificationInfo *</type>
      <name>dup</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>aa72b90010675152f5aa1bfd8c394a160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a846499c1afa20d6793c148cfeca23fa2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a59afb901aab9c7e330e5b0e3a2dc3be7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MACAddress &amp;</type>
      <name>getMacAddr</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a55d698c68205658c6d63bc7f5d1d8da2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MACAddress &amp;</type>
      <name>getMacAddr</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>abe085333dad725cfc44cee33113653bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMacAddr</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>ae410d61adf67d629e9505ae2209b9b66</anchor>
      <arglist>(const MACAddress &amp;macAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv4Address &amp;</type>
      <name>getIpAddr</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a6ff12895bc0e95d243647ef2af5cf9d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv4Address &amp;</type>
      <name>getIpAddr</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a981670a9038187b4d40437b2ddfbdf3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIpAddr</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>aac6a57741a21ec092344e786f43c5fab</anchor>
      <arglist>(const IPv4Address &amp;ipAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>a2678eb6bf1bfe1c69b3b04f69a82c5fe</anchor>
      <arglist>(const Vanet_LocatorNotificationInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>macAddr_var</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>ad805690775e56afe5a24221b54e98f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>ipAddr_var</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>acfb30d9fdeb76637b01b9a439aff26e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVanet__LocatorNotificationInfo.html</anchorfile>
      <anchor>ad8996182fec406773aeb957af25512dd</anchor>
      <arglist>(const Vanet_LocatorNotificationInfo &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Vanet_Sockaddr</name>
    <filename>structVanet__Sockaddr.html</filename>
    <member kind="variable">
      <type>sa_family_t</type>
      <name>sa_family</name>
      <anchorfile>structVanet__Sockaddr.html</anchorfile>
      <anchor>a2705925b21ceddf0f3cec4a5edca584c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>sa_data</name>
      <anchorfile>structVanet__Sockaddr.html</anchorfile>
      <anchor>af889bc5f872fc097a71309d9b265504d</anchor>
      <arglist>[14]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetAddress</name>
    <filename>classVanetAddress.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AddrType</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>afb082043e6fa7f10c431b2ae9e15d0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNDEFINED</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>afb082043e6fa7f10c431b2ae9e15d0e8a90f4fb27f5a925c1d54f2f03ced5b8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IPv4_ADDRESS</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>afb082043e6fa7f10c431b2ae9e15d0e8ae390856715815d0c1c7a5fb3983edee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IPv6_ADDRESS</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>afb082043e6fa7f10c431b2ae9e15d0e8a65dae8b5a914c8dbdaf62e6d1a0d2735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MAC_ADDRESS</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>afb082043e6fa7f10c431b2ae9e15d0e8aa0629c6ed88f279ba91b54bebcb27323</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetAddress</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>aaff27666c5cee548f1709dc5162a7159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetAddress</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a3dfd856409410f8488189fc6b109e4e6</anchor>
      <arglist>(const VanetAddress &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetAddress</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>afbd783f18907db6ca5b84aa2b2c9c72a</anchor>
      <arglist>(IPv4Address addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetAddress</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a4f92cadbf509e3ff6ce0176ae80ffe12</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetAddress</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a61575d300613757f7dae9c7e94447f8a</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetAddress</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a38bf7f19c52877512a62c83fdff67708</anchor>
      <arglist>(MACAddress addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a132b60cc15010b0c2c5d22572cc515c9</anchor>
      <arglist>(const IPv4Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a9b8c7c7982943c29479edeb8d02aaf7d</anchor>
      <arglist>(const IPv6Address &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a3ccbd7181b03085f332d1e6c2d2a419a</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a82b3ebe39b1af8f582e0ab9b14eee4f2</anchor>
      <arglist>(const MACAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>IPv4Address</type>
      <name>getIPv4</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a3559c390750b1eab21069ab2750fb698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6Address</type>
      <name>getIPv6</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a5804b115c7e76c53cecd71eee3f66144</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>getIPvX</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>ab57b41cda11804c6398a3203e40b3661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MACAddress</type>
      <name>getMAC</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a2cfa7da485ee527ab4f71e056f5abbe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AddrType</type>
      <name>getType</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a808b84f97e1d13711ce59b1237fae0ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefix</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>adcfdf18597329a6ff6ed8886703ab112</anchor>
      <arglist>(short unsigned int masklen)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a40569bc133d18ec9ca6abb36e2c188e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>short int</type>
      <name>compare</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>aefcf86cde722004536ae294b8ceacbbf</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a54d1c7eef757b8eca2910141616af969</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a4a12b03b8e99ca4cbb1b6df055c44785</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>addb867c7a92890a5542349f01ac7c108</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>aefb282c18546cecec3758475ad9b1b3d</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a69254e3daba83aad6deb191371f24867</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>acc5ee25d60c0b2cff93df1e204c6b09a</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a7fa7bc4a4fce7307d491393c5e3cde63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a83c752289bd11bff6bc6bd2a87396f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a67f472ea8f8ee8cff830a5bdb1653b63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static VanetAddress</type>
      <name>ZERO</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a2a5265b56ccbb4ec297ec8be662f40f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv4Address</type>
      <name>_getIPv4</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a9e92509b78ed513dae836b60a76bf24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPv6Address</type>
      <name>_getIPv6</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a8dc12a18819a2d55204cad11c5483f6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MACAddress</type>
      <name>_getMAC</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a57567d0a0262691e358f19bf2fa4a3d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>hi</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a44214da7c8744e15cdd261981e939c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>lo</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a6ded1c743764f80259f85af5bd7d29fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short int</type>
      <name>addrType</name>
      <anchorfile>classVanetAddress.html</anchorfile>
      <anchor>a4787ebe35e53fd8d96d1d1e23e62e2d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VANETMobilityAccess</name>
    <filename>classVANETMobilityAccess.html</filename>
    <base>VanetModuleAccess&lt; IVANETMobility &gt;</base>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IVANETMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IVANETMobility *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IVANETMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IVANETMobility *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VANETMobilityBase</name>
    <filename>classVANETMobilityBase.html</filename>
    <base>cSimpleModule</base>
    <base>IVANETMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>af67b97dc21004c860f5f94407e109b6e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classVANETMobilityBase.html</anchorfile>
      <anchor>a696e01af0314e69805ce5879690b5030</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetModuleAccess</name>
    <filename>classVanetModuleAccess.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a40462973a5d907023674e3332d6738b8</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetModuleAccess</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a7403f727b9c00bfca1ff377ac499661f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a79d9adda27c5c59dc601f7ae03808a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>get</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a830675ab95ab21227d0dc57bb4d2d500</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a5bc70daded18f246640ff4f14d3334f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>getIfExists</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a329ef3a02513d51563bce424e275fabb</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a164e785f31fbfc64e5657fbc6fabf525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>p</name>
      <anchorfile>classVanetModuleAccess.html</anchorfile>
      <anchor>a1585e8a23ffbe85600c02669cf8cbd20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetNetfilterHook</name>
    <filename>classVanetNetfilterHook.html</filename>
    <member kind="function">
      <type></type>
      <name>VanetNetfilterHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>aedfc3a84a07a89c8be6d9a159f078124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IHook::Result</type>
      <name>datagramPreRoutingHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a8ba5c8409265d99c9ef914b851ccb606</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inIE, const InterfaceEntry *&amp;outIE, IPv4Address &amp;nextHopAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IHook::Result</type>
      <name>datagramForwardHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>ad10d13e529d25e53d5fe411aad6f03f0</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inIE, const InterfaceEntry *&amp;outIE, IPv4Address &amp;nextHopAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IHook::Result</type>
      <name>datagramPostRoutingHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a4503ce76a231f6e4c54f24b639c4c51f</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inIE, const InterfaceEntry *&amp;outIE, IPv4Address &amp;nextHopAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IHook::Result</type>
      <name>datagramLocalInHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>acd7a808185337526468d579373441767</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *inIE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IHook::Result</type>
      <name>datagramLocalOutHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a2420b81fc338d84ee807dc74cb72d5ff</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *&amp;outIE, IPv4Address &amp;nextHopAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a67e4d6100519cae24709fdde1ecc220d</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishHook</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a12e11127ee58607d3d3b30be9f2cca03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRouteUpdateMessageToVanet</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a15fab267ea468257e75e0d97918f650d</anchor>
      <arglist>(IPv4Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendNoRouteMessageToVanet</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a2fdf343d8c9d509f4185838cbe00b94e</anchor>
      <arglist>(IPv4Datagram *datagram)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToVanet</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a0248529141ee80af851a2e001fa7ec34</anchor>
      <arglist>(cPacket *packet)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkPacketUnroutable</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a0f1de85bb163f6ec843ed55c5cc0f069</anchor>
      <arglist>(IPv4Datagram *datagram, const InterfaceEntry *outIE)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a8a5498dfcecfb95dc9fbb073ddacb4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4 *</type>
      <name>ipLayer</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>afaa3134abf6e05bbce14e98e14dd5e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a609bf3b0fb17470dd7ec1064eaa7a7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a0baaf3800024b43ee66f8b574d83b32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isReactive</name>
      <anchorfile>classVanetNetfilterHook.html</anchorfile>
      <anchor>a4008ab6047b3d1789b5bd7c68290e378</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetNetworkAddress</name>
    <filename>classVanetNetworkAddress.html</filename>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a70331ca0ce06af5ba30aeabe0bd32c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a3eea1e0a2b9fd61cce2d7784a2ce7a6f</anchor>
      <arglist>(const VanetNetworkAddress &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a8ca55183556024d75a463630bcf89c75</anchor>
      <arglist>(const VanetAddress &amp;o, short unsigned int masklen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a46183e9c8d8b7038840074ef5961093c</anchor>
      <arglist>(IPv4Address addr, short unsigned int masklen=32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a7f0634f59e49102973c1e60af3a9caab</anchor>
      <arglist>(const IPv6Address &amp;addr, short unsigned int masklen=128)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a54c1329ce240503cab4250e48567380b</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a56c408d97ac9fbde07bdb6aa27043cb2</anchor>
      <arglist>(const IPvXAddress &amp;addr, short unsigned int masklen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetNetworkAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a723d9b8bafb22ae252aa2724c06d21e9</anchor>
      <arglist>(MACAddress addr, short unsigned int masklen=48)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a23f249f79ac386ff1c3835a8fc52b676</anchor>
      <arglist>(IPv4Address addr, short unsigned int masklen=32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a21e942c40872e9767cbd00eaa0e57de9</anchor>
      <arglist>(const IPv6Address &amp;addr, short unsigned int masklen=128)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a7620bf27f94c3ae13079321a5852b1b0</anchor>
      <arglist>(const IPvXAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a1f50fef31264470a53dd3ac42a09186c</anchor>
      <arglist>(const IPvXAddress &amp;addr, short unsigned int masklen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a6837bf16ae18da5826bff08a70cf83b6</anchor>
      <arglist>(MACAddress addr, short unsigned int masklen=48)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefixLen</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a796792e91a922d12750e292f44306d28</anchor>
      <arglist>(short unsigned int masklen)</arglist>
    </member>
    <member kind="function">
      <type>const VanetAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>ab045d15974197157677fa2c1055c474f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>short unsigned int</type>
      <name>getPrefixLength</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>ac929cc88906d56f031fad3030decf4c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VanetAddress::AddrType</type>
      <name>getType</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>af783fe94e4c51be090c2bd0367665e47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a0355b9c2e830828505e6fd8c60aa7cbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>short int</type>
      <name>compare</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a6b94aa56c9441e5f32c9b65d7ebc786a</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a0c89b216aad162dc469e53d655be0726</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a94cc588c9acb2a37a98e30ba09965eb8</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>ae3437894afd1b467338105a17f2f3c0b</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>aad791fd173c2e61e0c2e50085bbef5af</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a1cd53c9407d6c6bc988a127aebd0cce4</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a123d527557856dbb90b9dd33d626dc2d</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>ab64283911cb71eff9c015d5ac86ff312</anchor>
      <arglist>(const VanetAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>ace0f06f441e5707b9bdc21d0952c3fb6</anchor>
      <arglist>(const VanetNetworkAddress &amp;other) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VanetAddress</type>
      <name>address</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>ae3be81896c815cf2f76318dd23891b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short unsigned int</type>
      <name>prefixLength</name>
      <anchorfile>classVanetNetworkAddress.html</anchorfile>
      <anchor>a7aa368952015eaf94640a8b7f7969f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetRoutingBase</name>
    <filename>classVanetRoutingBase.html</filename>
    <base>cSimpleModule</base>
    <base protection="protected">cListener</base>
    <base>VanetNetfilterHook</base>
    <class kind="struct">VanetRoutingBase::InterfaceIdentification</class>
    <class kind="class">VanetRoutingBase::ProtocolRoutingData</class>
    <class kind="struct">VanetRoutingBase::VanetProxyAddress</class>
    <member kind="function">
      <type>std::string</type>
      <name>convertAddressToString</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af74746aacd82e6dc9ad907ab8f0435b9</anchor>
      <arglist>(const VanetAddress &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollaborativeProtocol</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0f161062f4ff84e763064d1a48e13add</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VanetRoutingBase *</type>
      <name>getCollaborativeProtocol</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ab34b5c5abf4090eacd6898a7fa5738ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStaticNode</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a9d649f283443986c311c9972c776f721</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStaticNode</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a6b2219803952b6a2798cb2d87caa9a73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInternalStore</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aec4d759d19cad0171948cc3c788437ca</anchor>
      <arglist>(bool i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VanetAddress</type>
      <name>getNextHopInternal</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a202c5ffcd621697af91d8607d57a7f03</anchor>
      <arglist>(const VanetAddress &amp;dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getInternalStore</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0ceb288745f87ac8434d1e37ae738e81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportGetRoute</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a4548818eb8a88f0111673fbc5beaa4eb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>getRoute</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a6c0e84d7a336df19157ca48eb91ea913</anchor>
      <arglist>(const VanetAddress &amp;dest, std::vector&lt; VanetAddress &gt; &amp;hopsList)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getNextHop</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a15f3647ea492a2a329a4ae13734a9689</anchor>
      <arglist>(const VanetAddress &amp;dest, VanetAddress &amp;nextHop, int &amp;ifaceId, double &amp;cost)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRefreshRoute</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ac49bd38b619e93c8f7545ab7b9da4876</anchor>
      <arglist>(const VanetAddress &amp;dest, const VanetAddress &amp;nextHop, bool isReverse)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setRoute</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a8ffb93adacf1dba0b7855ff6ef6b49f2</anchor>
      <arglist>(const VanetAddress &amp;destination, const VanetAddress &amp;nextHop, const int &amp;ifaceIndex, const int &amp;hops, const VanetAddress &amp;mask=VanetAddress::ZERO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setRoute</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a82726d77a8ac0bf7377ce99d79346354</anchor>
      <arglist>(const VanetAddress &amp;destination, const VanetAddress &amp;nextHop, const char *ifaceName, const int &amp;hops, const VanetAddress &amp;mask=VanetAddress::ZERO)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isProactive</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a67658463f23f57840773c1714dd1a3f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOurType</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a94cffdff50ad28f4ea9f9daf944b0f9b</anchor>
      <arglist>(cPacket *pk)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getDestAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a4f4dc6d939c8599da9f3da3f086abe8d</anchor>
      <arglist>(cPacket *pk, VanetAddress &amp;dest)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addressIsForUs</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a34200d4a354a5957893911418cb6a508</anchor>
      <arglist>(const VanetAddress &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimerMultiMap *</type>
      <name>getTimerMultimMap</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a7eda5a1080aa657f9f1f8fa26e909e85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPtr</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a29ea1231a1d3a6f218cf06c61323d3fc</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getPtr</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a34df62340b755cef81795bf18ab3bad5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendICMP</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5ccf9acc840e21726bbb78e787c00dc9</anchor>
      <arglist>(cPacket *pk)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSendToICMP</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a6e638072a31fdfa9d1e600b0f8ad19a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendToICMP</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a82398f73318fbaf60d197c034e955f28</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumGroupAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5bbf09498a810005dbe3bbead839d3bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAddressInAGroups</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa8e806d3c7111b7c04d139ec4927951f</anchor>
      <arglist>(int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addInAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad53ffbc7e4d7a11c16ee09834a2f74b3</anchor>
      <arglist>(const VanetAddress &amp;addr, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>delInAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a216646703824d132285d0e163d3aa89d</anchor>
      <arglist>(const VanetAddress &amp;addr, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>findInAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a284c083b59a3f74ac6056990482722e4</anchor>
      <arglist>(const VanetAddress &amp;addr, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>findAddressAndGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a1cf33c1fe15920b0f5a9636a4f1f9255</anchor>
      <arglist>(const VanetAddress &amp;addr, int &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a699fd0406b8208f0d18e8852693803bf</anchor>
      <arglist>(int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5c90d8cc0e29372223b096c194612917</anchor>
      <arglist>(AddressGroup &amp;, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0caf84381eb36e96cdfe1cae007377f9</anchor>
      <arglist>(std::vector&lt; VanetAddress &gt; &amp;, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRouteGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a3e926198e0fd41b2a4f5903b228977ba</anchor>
      <arglist>(const AddressGroup &amp;gr, std::vector&lt; VanetAddress &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRouteGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa624bad75fbb0841f17e7597a3bcf81c</anchor>
      <arglist>(const VanetAddress &amp;, std::vector&lt; VanetAddress &gt; &amp;, VanetAddress &amp;, bool &amp;, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNextHopGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad4d4067d6ce601211b554378c4cfc33a</anchor>
      <arglist>(const AddressGroup &amp;gr, VanetAddress &amp;add, int &amp;iface, VanetAddress &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNextHopGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5be38b1f3ed93871f51f74a301c3de12</anchor>
      <arglist>(const VanetAddress &amp;, VanetAddress &amp;add, int &amp;iface, VanetAddress &amp;, bool &amp;, int group=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a4f2427a238b942cd1ecb4b33ba06caad</anchor>
      <arglist>(const VanetAddress &amp;destination, VanetAddress &amp;outAccesPointAddr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>adc9dc8bcec7a0cfb1e7fe489c2d633cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAddressSize</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa98481b80669b0793aa3c60a23f91d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressSize</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a1c9c0cb3f874dc5e6179bc5113d04d9f</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleOperationStage</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa6e54433235467f125494e98d83f2a70</anchor>
      <arglist>(LifecycleOperation *operation, int stage, IDoneCallback *doneCallback)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>handleNodeStart</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ac4492173f7ebfe661a08c33a07817482</anchor>
      <arglist>(IDoneCallback *doneCallback)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>handleNodeShutdown</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a3e71bde8768ad528b00210dee890d5cf</anchor>
      <arglist>(IDoneCallback *doneCallback)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleNodeCrash</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a234b4bb4c9dc62f14a47fcbf4408e267</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsGateway</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ac839ac8bee3ccbd3aec2fb7578f6b8e3</anchor>
      <arglist>(bool p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsGateway</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a1c9fa4d5206fcd12402d63f7dafca318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAddressInProxyList</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aeef81e21be6c8d65cdce8d1c6a633fdf</anchor>
      <arglist>(const VanetAddress &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressInProxyList</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa467dc65546b4bb27a5de0e79bd0b26a</anchor>
      <arglist>(const VanetAddress &amp;addr, const VanetAddress &amp;mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAddressInProxyList</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a1f091d7a43a2a91085eff428bfe7e99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAddressInProxyList</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ac4798cd6a26fbb99976b5a4a8059c140</anchor>
      <arglist>(int i, VanetAddress &amp;outAddr, VanetAddress &amp;outMask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getRouteFromGlobal</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af6efe715bd6f9918305fced3d4a720d4</anchor>
      <arglist>(const VanetAddress &amp;src, const VanetAddress &amp;dest, std::vector&lt; VanetAddress &gt; &amp;route)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isNodeOperational</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>abe457f78132673ad39b54f387e3cdad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IRoutingTable *</type>
      <name>getInetRoutingTable</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a9747c07c0812f7e65832203ec6299044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IInterfaceTable *</type>
      <name>getInterfaceTable</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a2272c36313e171abee44f534ca30f4da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getIsRegistered</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a62f76535171e048543842b9ccc263e5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getUseVanetLabelRouting</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a9c8c5bd3dc74b93a7388422a4127746a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getIsMacLayer</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a3359b108796feca2512c25d3dbd3d657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~VanetRoutingBase</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a4ef23e8c5e56e043dd17d49085a5eef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VanetRoutingBase</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a3dda1906b62aa251bd007c30844ff9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerRoutingModule</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a00673ec5a075d0c2c2068c19784e2a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createTimerQueue</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a45ac6ead6e9d75eea2dbf9320cd248bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleEvent</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af239ac9d378500382b4fe18bddaf24d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkTimer</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a8b0025dccbc2c6064e8a4907a27f9864</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToIpOnIface</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a4d22f4a5f831b7df27e97fdee6b72c01</anchor>
      <arglist>(cPacket *pk, int srcPort, const VanetAddress &amp;destAddr, int destPort, int ttl, double delay, InterfaceEntry *iface)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a59ab9033aaf5fd82f6f04880e991b69d</anchor>
      <arglist>(cPacket *pk, int srcPort, const VanetAddress &amp;destAddr, int destPort, int ttl, double delay, const VanetAddress &amp;ifaceAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ab3355c06f6a87c5b344824d25da62345</anchor>
      <arglist>(cPacket *pk, int srcPort, const VanetAddress &amp;destAddr, int destPort, int ttl, double delay, int ifaceIndex=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual VanetAddress</type>
      <name>omnet_exist_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ab16413b826928912683bc0b2e4bdd850</anchor>
      <arglist>(VanetAddress dst)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>omnet_exist_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ace00175a7dc9ad493e4f6c011648c7d6</anchor>
      <arglist>(struct in_addr dst)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>omnet_clean_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5dd63a6e37a9e84da8f8970f6f5deda9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>gettimeofday</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a7109e56db6059fa782b24848b5db96b6</anchor>
      <arglist>(struct timeval *, struct timezone *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual VanetAddress</type>
      <name>getAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a3d44e7beb086de66a69ee5a98cc025f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual VanetAddress</type>
      <name>getRouterId</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a666aeb23480ce7eba54f7567000834e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInMacLayer</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>adc468abcf65c6bf92b69e651df76a750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceEntry</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a39e3939f3f22ea6c018da060f4a8b92a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceEntryById</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a68363d7c4ade42c0c5c99b432abb58a4</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumInterfaces</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a368db2b57b66087f5906a97de78759c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIpLocalAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af49b832deaa5badc297bdfecb54e23e8</anchor>
      <arglist>(const IPv4Address &amp;dest) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa793e7868efa803d57b44ffde55c236d</anchor>
      <arglist>(const VanetAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMulticastAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a140676dd6bc1327ff95a89df3f88c639</anchor>
      <arglist>(const VanetAddress &amp;dest) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getApList</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa84f4a120de9af2024c515e95f654106</anchor>
      <arglist>(const MACAddress &amp;, std::vector&lt; MACAddress &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getApListIp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a94432157b497e0419234d2ac58e90baa</anchor>
      <arglist>(const IPv4Address &amp;, std::vector&lt; IPv4Address &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getListRelatedAp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>acd491b3324a11bab460978e3b8f6324b</anchor>
      <arglist>(const VanetAddress &amp;, std::vector&lt; VanetAddress &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteInternalStorege</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af2a97f4578fa2cdeb4c7f6245cd3559d</anchor>
      <arglist>(const VanetAddress &amp;, const VanetAddress &amp;, const bool &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>omnet_chg_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a09504588525ff85e1b65d93a96c9ffc0</anchor>
      <arglist>(const VanetAddress &amp;dst, const VanetAddress &amp;gtwy, const VanetAddress &amp;netm, short int hops, bool del_entry, const VanetAddress &amp;iface=VanetAddress::ZERO)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>omnet_chg_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad2037db7c4ed72fd0c56a6d38ae7877b</anchor>
      <arglist>(const VanetAddress &amp;dst, const VanetAddress &amp;gtwy, const VanetAddress &amp;netm, short int hops, bool del_entry, int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>omnet_chg_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a2b16d5f6fbe5f9a2a1353ca6ca721362</anchor>
      <arglist>(const struct in_addr &amp;dst, const struct in_addr &amp;gtwy, const struct in_addr &amp;netm, short int hops, bool del_entry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>omnet_chg_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a189c863f2564b388afe7413182bd8452</anchor>
      <arglist>(const struct in_addr &amp;dst, const struct in_addr &amp;gtwy, const struct in_addr &amp;netm, short int hops, bool del_entry, const struct in_addr &amp;iface)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>omnet_chg_rte</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aac5239d0abf634a93e28992acbfdbdc1</anchor>
      <arglist>(const struct in_addr &amp;dst, const struct in_addr &amp;gtwy, const struct in_addr &amp;netm, short int hops, bool del_entry, int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteIpEntry</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a197c33e05f45814419ab0adfa7cb6573</anchor>
      <arglist>(const VanetAddress &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setIpEntry</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>abc85b3e807b524a05f1bd9ddfefe5963</anchor>
      <arglist>(const VanetAddress &amp;dst, const VanetAddress &amp;gtwy, const VanetAddress &amp;netm, short int hops, const VanetAddress &amp;iface=VanetAddress::ZERO)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>linkLayerFeeback</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>acef19e722ff3987ba5935d74b6f36351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>linkPromiscuous</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aaffdc605b200bd2b335143ff914667c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>linkFullPromiscuous</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af1f73d6f391a799470ce91217f146305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerPosition</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a97afd962deff1e8acb918453cbd2b12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a29d52d7153204aa0f792008fac380660</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a96b77a2900889c314f027037059f1942</anchor>
      <arglist>(int category, const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLinkBreak</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a74cbdb657170f4784fb2a29d12bda864</anchor>
      <arglist>(const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLinkBreakManagement</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aa991bab761a6247a3a653dbf515bd5f7</anchor>
      <arglist>(const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processPromiscuous</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>abf7de797a80e1590bc9aefca1ace8d47</anchor>
      <arglist>(const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processFullPromiscuous</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a66f19f4a7eea49d2cfa1aee733d10a29</anchor>
      <arglist>(const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLocatorAssoc</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ae31b96f78f69344924af97aa78246c70</anchor>
      <arglist>(const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processLocatorDisAssoc</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af2a94c50675e7b23a5cf984dd83bc19a</anchor>
      <arglist>(const cObject *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getWlanInterfaceIndexByAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0612c633b2b5af798b3059bd03500079</anchor>
      <arglist>(VanetAddress=VanetAddress::ZERO)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceWlanByAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0578dac83f5397f3c8e3c6f611cefbc6</anchor>
      <arglist>(VanetAddress=VanetAddress::ZERO) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumWlanInterfaces</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>af4e9ccd5df808df852b21e7aaa03d1e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getWlanInterfaceIndex</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5a5a0a401cba500cfd714e21e6b1943d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getWlanInterfaceEntry</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ae442430d2f085c2c7701f32d2009a0b7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isThisInterfaceRegistered</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a962b83250c0f5d8b19dcf598fd52e753</anchor>
      <arglist>(InterfaceEntry *ie)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getPosition</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a807cdc79c9d2dd16100eab11d07b265e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0cf968a748a3b297a532fb263902616c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a39c106c7a59015bcd63a510980c24b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; VanetAddress, VanetAddress &gt;</type>
      <name>RouteMap</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad67cf8f63a51cff58e1d21da4d8f72ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; ProtocolRoutingData &gt;</type>
      <name>ProtocolsRoutes</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a24df116622d92a330ddea86757952e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; VanetAddress, ProtocolsRoutes &gt;</type>
      <name>GlobalRouteMap</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5297261d6dad4209ce5d8b2b00259892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>struct VanetRoutingBase::InterfaceIdentification</type>
      <name>InterfaceIdentification</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a794c5205ae2b4c3a5b1753328247f819</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; InterfaceIdentification &gt;</type>
      <name>InterfaceVector</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a1344b9586af45f6cb3caca482d3d28d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RouteMap *</type>
      <name>routesVector</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>afefcec4c6352d017f9c74894d0f61b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IRoutingTable *</type>
      <name>inet_rt</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a37f19a716c4d095aafe9184cbf9b1dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IInterfaceTable *</type>
      <name>inet_ift</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a0295b9bf02eab6a8116d67c08eaf99d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aefed474d4ae0c2c6565e9e39a74d270a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ICMP *</type>
      <name>icmpModule</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a595e5babfc887ec49bb38ee188486d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mac_layer_</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a2cf4ea1729d2345e583722f1882dd52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VanetAddress</type>
      <name>hostAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a8d65de20b9e2e654488dbecb5f2f4a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VanetAddress</type>
      <name>routerId</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a7c955910f85154b13baee021cc55a777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Coord</type>
      <name>curPosition</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aec6022ced6ea2b1ffc9507242580038a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Coord</type>
      <name>curSpeed</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5448637ba0a69c30d8eddf84d0c0ce64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>posTimer</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a45603b932063454592398a71f99a7063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>regPosition</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>aaa1143615261373aac4b521e51c34db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useVanetLabelRouting</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ab08e0e9a4c790f5ce6fa7610443e6de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a339ffe7fe6cccfb251ba75e2f1d89c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>commonPtr</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5d0de83861fa1e505c12a35c837d7043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sendToICMP</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ab09c1b2b9ab7e6a2a4919500d3c515b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VanetRoutingBase *</type>
      <name>collaborativeProtocol</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad351104d74901922c827ea0942c2252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ARP *</type>
      <name>arp</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a29224e31e773d4a78717f924ee12074e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InterfaceVector *</type>
      <name>interfaceVector</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a8087a1847353281a7a0fa939f5f367e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimerMultiMap *</type>
      <name>timerMultiMapPtr</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a5f099bc2d78a948e0835aa88649cba42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>timerMessagePtr</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a9faa0e0a77160481912b28ecc7710efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AddressGroup &gt;</type>
      <name>addressGroupVector</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a04eb0806558daa7cfeb6171b304b8012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>inAddressGroup</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad398f7325c248aa5ee4d9234d7adc942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>staticNode</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a2c952f60142697d532338316be3daa13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGateway</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a44ffd81aff869060c020f72b2c1bcc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; VanetProxyAddress &gt;</type>
      <name>proxyAddress</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a27d40c0e596e1b02f7a0300b8a1e7299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ILocator *</type>
      <name>locator</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a518db3c382f73fd96a0ffdc0df9bb788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>addressSizeBytes</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a923fe896b996d98bdda90d526a9850fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isOperational</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>abf7a53f15c55e9085fff36dadb543833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ae9e81507ba397b423f7be2874dacb3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static bool</type>
      <name>createInternalStore</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>ad773f571f451df29500a85f37cad6be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static GlobalRouteMap *</type>
      <name>globalRouteMap</name>
      <anchorfile>classVanetRoutingBase.html</anchorfile>
      <anchor>a4d0304ba3b255ea2e8ccf33c7ab11a86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VanetRoutingBase::InterfaceIdentification</name>
    <filename>structVanetRoutingBase_1_1InterfaceIdentification.html</filename>
    <member kind="function">
      <type>InterfaceIdentification &amp;</type>
      <name>operator=</name>
      <anchorfile>structVanetRoutingBase_1_1InterfaceIdentification.html</anchorfile>
      <anchor>a3fa5d5e41e1134a7e256157d2832cce7</anchor>
      <arglist>(const InterfaceIdentification &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>interfacePtr</name>
      <anchorfile>structVanetRoutingBase_1_1InterfaceIdentification.html</anchorfile>
      <anchor>aa384a9c4e2215369955f7614de2c01e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structVanetRoutingBase_1_1InterfaceIdentification.html</anchorfile>
      <anchor>a25bd0757d9768cd5014628749ce92059</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetRoutingBase::ProtocolRoutingData</name>
    <filename>classVanetRoutingBase_1_1ProtocolRoutingData.html</filename>
    <member kind="variable">
      <type>RouteMap *</type>
      <name>routesVector</name>
      <anchorfile>classVanetRoutingBase_1_1ProtocolRoutingData.html</anchorfile>
      <anchor>ad76e1a67144978524cc5dc6922b690f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isProactive</name>
      <anchorfile>classVanetRoutingBase_1_1ProtocolRoutingData.html</anchorfile>
      <anchor>abbb88dd2f5ba4e329e2a83269b236190</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VanetRoutingBase::VanetProxyAddress</name>
    <filename>structVanetRoutingBase_1_1VanetProxyAddress.html</filename>
    <member kind="variable">
      <type>VanetAddress</type>
      <name>mask</name>
      <anchorfile>structVanetRoutingBase_1_1VanetProxyAddress.html</anchorfile>
      <anchor>a38c1b9964a250adcdb201481c6e66388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VanetAddress</type>
      <name>address</name>
      <anchorfile>structVanetRoutingBase_1_1VanetProxyAddress.html</anchorfile>
      <anchor>a7ddca8889ff761d6e009e30803abcdee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VanetTimer</name>
    <filename>classVanetTimer.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>VanetTimer</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>a7607b57f48db5d66405072dabf849f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VanetTimer</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>ad8b17fa3880a19b0ca3a5801b81e593d</anchor>
      <arglist>(VanetRoutingBase *agent)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>expire</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>ae4be7357ee3e7a0ea8ce63034c105ac7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeQueueTimer</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>ab8fff0a914e25838c807ebbe14745578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeTimer</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>a62e2b2446bbb86fc1077ad60fad66390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resched</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>a9476793ed58d2c26d0f81c475e7c2ec8</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resched</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>a7b87be8f2cb20f47bf06603b315d2763</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isScheduled</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>aece2a6e92d2b016c07e35e4f7ea5e1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VanetTimer</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>a688a386c4837ea8f95d599eb6a4bfff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VanetRoutingBase *</type>
      <name>agent_</name>
      <anchorfile>classVanetTimer.html</anchorfile>
      <anchor>a995484d479629337cb094fd23b5cf255</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>vanetTraCIColor</name>
    <filename>classvanetTraCIColor.html</filename>
    <member kind="function">
      <type></type>
      <name>vanetTraCIColor</name>
      <anchorfile>classvanetTraCIColor.html</anchorfile>
      <anchor>a9b15b0dbb41ba9bdcd11220d74afafd9</anchor>
      <arglist>(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vanetTraCIColor</type>
      <name>fromTkColor</name>
      <anchorfile>classvanetTraCIColor.html</anchorfile>
      <anchor>a1d391b1fd303c26735264b72b028d7f5</anchor>
      <arglist>(std::string tkColorName)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>red</name>
      <anchorfile>classvanetTraCIColor.html</anchorfile>
      <anchor>a312ab5465ed9f9125fa3afb67e450fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>green</name>
      <anchorfile>classvanetTraCIColor.html</anchorfile>
      <anchor>a296847e259ea61110320daee2d88cde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>blue</name>
      <anchorfile>classvanetTraCIColor.html</anchorfile>
      <anchor>aff6a205c38afff3df10182d6bd89cb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>alpha</name>
      <anchorfile>classvanetTraCIColor.html</anchorfile>
      <anchor>affcb57775b21788236a90be6f9242f8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaitForAODVVANETRREP</name>
    <filename>classWaitForAODVVANETRREP.html</filename>
    <base>cMessage</base>
    <member kind="function">
      <type></type>
      <name>WaitForAODVVANETRREP</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>ad0b29605b9010beafc77c030ee24d3f1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaitForAODVVANETRREP</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a6de157fc975b59eb45d0228e7b27e859</anchor>
      <arglist>(const WaitForAODVVANETRREP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WaitForAODVVANETRREP</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a4461ae8a977b5e1b7c1ac46855c0d74b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WaitForAODVVANETRREP &amp;</type>
      <name>operator=</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a7d6fdd35ddba963658e6bd0983ab4d9c</anchor>
      <arglist>(const WaitForAODVVANETRREP &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WaitForAODVVANETRREP *</type>
      <name>dup</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>ab5b36747611e7358d0f5ac2d47996a7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a2a71af55471a856847eac61011ccde0a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>aee450649ee939cc01df130f6e2ff4e6a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPv4Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a797ffee43e1b841f08a4d83328e430dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPv4Address &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a6e8c86cd7f6e86f069ae0f0c3d4651f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>aadaa0d50a5899deba980e8e0c97d60b7</anchor>
      <arglist>(const IPv4Address &amp;destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLastTTL</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a6957677b2ed142de5c82c0f099edacc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastTTL</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>acdbce9e8e8945acd4848e9d22bb28360</anchor>
      <arglist>(unsigned int lastTTL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFromInvalidEntry</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>afda7f8d75ebecbf41da23b0e35684298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFromInvalidEntry</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a91d91bd0efb0f3d472fdf610ea016fdc</anchor>
      <arglist>(bool fromInvalidEntry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a50926681706f52548d9b8b81819e2517</anchor>
      <arglist>(const WaitForAODVVANETRREP &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4Address</type>
      <name>destAddr_var</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a4d874bb558b0beeea2152f79d662b1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>lastTTL_var</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a9928f8399113799fbfb2fa39506ecb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fromInvalidEntry_var</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a763f4bc98a9d7e4126402b5a87d37119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classWaitForAODVVANETRREP.html</anchorfile>
      <anchor>a7a7989fda11d90b00f3153124cd1863c</anchor>
      <arglist>(const WaitForAODVVANETRREP &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaveAppToMac1609_4Interface</name>
    <filename>classWaveAppToMac1609__4Interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeServiceChannel</name>
      <anchorfile>classWaveAppToMac1609__4Interface.html</anchorfile>
      <anchor>abda213fbe366fbb7ff579e5fe2e7ef40</anchor>
      <arglist>(int channelNumber)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaveShortMessage</name>
    <filename>classWaveShortMessage.html</filename>
    <base>cPacket</base>
    <member kind="function">
      <type></type>
      <name>WaveShortMessage</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a8d66edc68ebe3ec56c8df75d5b367310</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaveShortMessage</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>acc0d8ea5209914167a63d102b2cda92d</anchor>
      <arglist>(const WaveShortMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WaveShortMessage</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a31f1ec10a3fa8583810299869b63be25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WaveShortMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aecc8cda9139f85065f5eebde4301ccc9</anchor>
      <arglist>(const WaveShortMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>dup</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a2a994de6e6306a0d3b6792e35ae40a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a7d544ef4bbf144936365be1365165b14</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a5fe4c2e8cbf904d104931c12b8bfc170</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getWsmVersion</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a6851e8a2af35b6e55d5bec81057ae51f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWsmVersion</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a980ce99a99ced19d20878103bb5a671e</anchor>
      <arglist>(int wsmVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSecurityType</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ab2e705e3c3b31bb8adc1d994852feb2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSecurityType</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a32f8c9d2a6700ebfda0d83701c4834f7</anchor>
      <arglist>(int securityType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a52905629f571c9c91557e744b199722f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a33ef604b6a5878e11a3bc4c2477e242e</anchor>
      <arglist>(int channelNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataRate</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a4dcbc909d1971cdcdd66b530031b2caf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataRate</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ac68cf638b21c4e7e90666cad683aecf3</anchor>
      <arglist>(int dataRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ac3117615566fa0a605f81bbaf53d5921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a21ccdbb5f448dbc3853885bc16bc3b3c</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPsid</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ab5790460483faa5713077d73007b1033</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPsid</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>adaf66b336060aff74a296c29f41509d6</anchor>
      <arglist>(int psid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getPsc</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aca2e9cfedb05afc037038641ab7e0583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPsc</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>af639cc8eefd79ebff975aa6c13cc34f8</anchor>
      <arglist>(const char *psc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getWsmLength</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a72950d93ddfe661721a53389e293c5c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWsmLength</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ae4d6bd7437dd170241b3d95c754a39a2</anchor>
      <arglist>(int wsmLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getWsmData</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a88e397ba4444c1e4bb00f94d344014f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWsmData</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a138e7425f6286d388541280dceab0352</anchor>
      <arglist>(const char *wsmData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSenderAddress</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a038bc0823a7c9d64fba0a1b2a1780adb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ac5318ca78711740c66b88bc156f7c52b</anchor>
      <arglist>(int senderAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRecipientAddress</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>adc22d16ffc384ede9084c7694426ee80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecipientAddress</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a818105a3cb5d5bc51a1257826be98b13</anchor>
      <arglist>(int recipientAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSerial</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a9ffe0a30a78e7192e643e0ac5427db1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSerial</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a89a1fd291250ae9c6e16b104d3a76e8e</anchor>
      <arglist>(int serial)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getSenderPos</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a47e866d383c3454e186dbe9c869fbc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getSenderPos</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aef5363629ec88acfca41b3c56ecb2698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderPos</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a66e2d0a9a7bb00d63cf79837fe0de6a3</anchor>
      <arglist>(const Coord &amp;senderPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimestamp</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a26d848cf954f3c04bc78063e8c16d956</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aed9bcc826c641cf992fe9bd82b2d5ca6</anchor>
      <arglist>(simtime_t timestamp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aa0b6d55f5de67f4c0239e51439ddd3a3</anchor>
      <arglist>(const WaveShortMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>wsmVersion_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a046c5f1ea5c6a3682a428ca45530024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>securityType_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a2784decc747424d85dee5b479c342304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a77621cbf05994838673ea0622149adb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataRate_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aee970d599d0efd480841c37af09ee01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>priority_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a09e08fcdd074881b33101f765d968e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>psid_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>af4c73b65a886df201a613ea457e068c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>psc_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aed6c40c3bf9e9537b288307b2cd6a3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>wsmLength_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aa006bd6b37a2d4cfa316d91cead6247b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>wsmData_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a451aac501c89cfe9cae36d82739e0311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderAddress_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a2c998933262477494af7e97b7c35e03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>recipientAddress_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>af5bec277b742d8ae61ebbb0a6ae3136f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serial_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>ad4aa751d16536190049b740580067895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>senderPos_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>aadbb99ab6b73089e01967ec6d57ad9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timestamp_var</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a33b24de6e0d97218a2f69cc4ad575e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classWaveShortMessage.html</anchorfile>
      <anchor>a886da023d7a335201fdbce036c9f7cb3</anchor>
      <arglist>(const WaveShortMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Channels</name>
    <filename>namespaceChannels.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ChannelNumber</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CRIT_SOL</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcab12b043ef121a55f7798b8d88f3435ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH1</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca4cd9253ed42cb3f1acfcc858a800bec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH2</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca33e2709732ed8a9d5d26e0671d465dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CCH</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca5b15c7f06aa1608e57faa584bfed0974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH3</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcacde39da5e71b24a5f2930033049547ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH4</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca3f6fadf251397cd3ffe1b485d7f91cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HPPS</name>
      <anchorfile>namespaceChannels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca9719348cf725d818dfdd2f2bdbe849d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mixim</name>
    <filename>namespacemixim.html</filename>
    <namespace>mixim::math</namespace>
  </compound>
  <compound kind="namespace">
    <name>mixim::math</name>
    <filename>namespacemixim_1_1math.html</filename>
    <class kind="struct">mixim::math::mW2dBm</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, false &gt;</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, true &gt;</class>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm</name>
    <filename>structmixim_1_1math_1_1mW2dBm.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm&lt; T, false &gt;</name>
    <filename>structmixim_1_1math_1_1mW2dBm_3_01T_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmixim_1_1math_1_1mW2dBm_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a1493328ab1ee54fd4ff6e8cd61326b96</anchor>
      <arglist>(const T &amp;mW)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm&lt; T, true &gt;</name>
    <filename>structmixim_1_1math_1_1mW2dBm_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmixim_1_1math_1_1mW2dBm_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a8ad42782121100d0c3b9a0a5a79a96ba</anchor>
      <arglist>(const T &amp;mW)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>NEDSupport</name>
    <filename>namespaceNEDSupport.html</filename>
  </compound>
  <compound kind="namespace">
    <name>sumo-launchd</name>
    <filename>namespacesumo-launchd.html</filename>
    <class kind="class">sumo-launchd::UnusedPortLock</class>
    <member kind="function">
      <type>def</type>
      <name>find_unused_port</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>ae199d5eca874e2c4f6d513c66dff9d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>forward_connection</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a4b524ec343d97f862098dcabe3cee5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parse_launch_configuration</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a5bb0381076a6bf722594d40b0029c911</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_sumo</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a91ba6915eb6c01fb3b4025d5c4551929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_sumoconfig_option</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>addc4ce10e4de5003d6af5428e4fe37cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>copy_and_modify_files</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a2e6e9db4f6c950cb721420724161bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle_launch_configuration</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a2be039960bf6da2a250ff6fdb41e3868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle_get_version</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>ad5ba1217a0c27654b0b7e06ae498b1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_launch_config</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a27f9e5e0276f801c387b1e0c55a8fdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle_connection</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>adce09b7709906bef8a95a1706bcb206d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>wait_for_connections</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a6c344aaa3a1a4035429d894209dd7ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_kill_daemon</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>af87c20e965cb9c3f00e50449237886a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>daemonize</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>ad7c19708d9b1f2e267e37a46195a0dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>main</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a92c2c1d9d79c74b81542a276aff5b2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_API_VERSION</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>aa7049e7602df270346bf91f32b5fa828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_LAUNCHD_VERSION</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a429bfbb81849120c75ec17e6dcf12dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_CMD_GET_VERSION</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a44b79cff15e2d42297325edba8cb622a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_CMD_FILE_SEND</name>
      <anchorfile>namespacesumo-launchd.html</anchorfile>
      <anchor>a2bd20e2cd07a693c3ee9d8e1528ed0c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sumo-launchd::UnusedPortLock</name>
    <filename>classsumo-launchd_1_1UnusedPortLock.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>a3b4d7fba477e6b80e5690ae45e1a676f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>af78d7b4c3a72dc221faee6385c24c48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>abc2c7ef69d91746da0e19bbb40eac24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>acquire</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>a8054aeb2eb7985a0ddf164c9d0296db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>release</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>acd2273d3a3bf6406f6dd572b34346a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>acquired</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>a12b908a04819d48978a26a6680e6050a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>tuple</type>
      <name>lock</name>
      <anchorfile>classsumo-launchd_1_1UnusedPortLock.html</anchorfile>
      <anchor>a125e76f3280e10148416933dbd374e12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Veins</name>
    <filename>namespaceVeins.html</filename>
    <class kind="class">Veins::ChannelAccess</class>
    <class kind="class">Veins::AirFrame</class>
    <class kind="class">Veins::BatteryAccess</class>
    <class kind="class">Veins::Radio</class>
    <class kind="class">Veins::TraCITestApp</class>
    <class kind="class">Veins::TraCIBuffer</class>
    <class kind="class">Veins::TraCIColor</class>
    <class kind="class">Veins::TraCICommandInterface</class>
    <class kind="struct">Veins::traci2omnet_functor</class>
    <class kind="class">Veins::TraCIConnection</class>
    <class kind="struct">Veins::TraCICoord</class>
    <class kind="class">Veins::TraCIMobility</class>
    <class kind="class">Veins::TraCIMobilityAccess</class>
    <class kind="class">Veins::TraCIScenarioManager</class>
    <class kind="class">Veins::TraCIScenarioManagerAccess</class>
    <class kind="class">Veins::TraCIScenarioManagerLaunchd</class>
    <class kind="class">Veins::TraCIScenarioManagerLaunchdAccess</class>
    <class kind="class">Veins::TraCIScreenRecorder</class>
    <class kind="class">Veins::Obstacle</class>
    <class kind="class">Veins::ObstacleControl</class>
    <class kind="class">Veins::ObstacleControlAccess</class>
    <class kind="class">Veins::AnnotationDummy</class>
    <class kind="class">Veins::AnnotationManager</class>
    <class kind="class">Veins::AnnotationManagerAccess</class>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a3b3f2a57b7ea45d25c3621ae72dcacb7</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a2bbc3cd13c02338fcad7ebdf40d8e3df</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a9701754031a4d3de7cc9eeaae1bf9e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SOCKET</type>
      <name>socket</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>a6eeefaf3bbdaff6c10cfcd01200016d3</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespaceVeins.html</anchorfile>
      <anchor>ab52db5bfe6d9095440c0b0ac309bb99d</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::ChannelAccess</name>
    <filename>classVeins_1_1ChannelAccess.html</filename>
    <base>Veins::BatteryAccess</base>
    <base protection="protected">AccessModuleWrap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1ChannelAccess.html</anchorfile>
      <anchor>af4c4d6652f6e3d4846cb3d2e826f4bed</anchor>
      <arglist>(int stage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AirFrame</name>
    <filename>classVeins_1_1AirFrame.html</filename>
    <base>cPacket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>dup</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>aee5f9a707b1cf1669b506ae8f360b40a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>aa58183eb744a1c500fb394f1866f9d24</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>a28b9e0d4a9c79151518467a40f3b4815</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVeins_1_1AirFrame.html</anchorfile>
      <anchor>adea4dabe0c35a5e04c848d4d431b1f16</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::BatteryAccess</name>
    <filename>classVeins_1_1BatteryAccess.html</filename>
    <base>BaseModule</base>
  </compound>
  <compound kind="class">
    <name>Veins::Radio</name>
    <filename>classVeins_1_1Radio.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>RadioState</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RX</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267a85301d7d7e53978ceb1d1bcd986ceb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TX</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267a801f851998c6c935794b02b51c4a564f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLEEP</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267af7a031c37e397e9cb27fa719a0602f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SWITCHING</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267aa3a2ccc5df99f1f1784a24ff231fcfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NUM_RADIO_STATES</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267a3545d50f62a2fbfdc733dc0c8bd73f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Radio</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a9fb63e8ebc78c18b4eb5a8040d684174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>switchTo</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>aab434b342c42f1dbfa1df3640afbb4b0</anchor>
      <arglist>(int newState, simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwitchTime</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>aed80922c736427067f27669c87aaf4f8</anchor>
      <arglist>(int from, int to, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentState</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>aa6255c987dcff98f53fb9eed5e056d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSwitch</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>aceb966be7e36e87068ae3424de8a5928</anchor>
      <arglist>(simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadioStateAnalogueModel *</type>
      <name>getAnalogueModel</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a38a6c78b55f1442108b44a0bd27abb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanAnalogueModelUntil</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a25501a63aaa78e00dda4e5b868874407</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a803442f32c2eced5bda170cd3a9b5772</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentChannel</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a8304dc1fea7754a1cd9c26713e39f234</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentChannel</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a6e7fa250ec1b1793c51931a7cb7ae914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Radio *</type>
      <name>createNewRadio</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>ace59f406149ca9de32fba8f64a10c239</anchor>
      <arglist>(bool recordStats=false, int initialState=RX, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Radio</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>ae01993661828f9efbb5053a78227789e</anchor>
      <arglist>(int numRadioStates, bool recordStats, int initialState=RX, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeRSAMEntry</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a0cdbbabf0ca4bab58eed854b22bb60f2</anchor>
      <arglist>(simtime_t_cref time, int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Argument::mapped_type_cref</type>
      <name>mapStateToAtt</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a78f899bc34a9ff0a67d887d166c4651d</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioStates</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>aba0037435265ef0fc59ba4d23ae550c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioChannels</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>ac41ffe7b9281ca385d33da1b29540c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>aa9faccaa07ecb115e054d56a6f6e27f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextState</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a026c484da4fddae621754b604b017c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>numRadioStates</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afd3042e4411274936dc29107ba55a82d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t **</type>
      <name>swTimes</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>ac54427080e05dad5b76117fc05f6180a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Argument::mapped_type</type>
      <name>minAtt</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a48211299a136eeacfad9a48137e656ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Argument::mapped_type</type>
      <name>maxAtt</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a166724a9c8ebdba2891de103ff4ce38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioStateAnalogueModel</type>
      <name>rsam</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a73c0c7ea78d32d4782e4025fa5cb0b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentChannel</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>a1ac015184bd8d52e3ea781c16092da6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbChannels</name>
      <anchorfile>classVeins_1_1Radio.html</anchorfile>
      <anchor>afa761671ebe5c75db5d957f5283eb7a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCITestApp</name>
    <filename>classVeins_1_1TraCITestApp.html</filename>
    <base>BaseApplLayer</base>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a6f86b7e2ce858078b03dfabcb323c23d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a581c6c99b8dcbbdadadc4e69a3febde7</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>afda5ac892c23c62e19a4430486c1d978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>af0612195294e49e5724a29e369d8c4f4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a389cd31e0b7975cb098d554ad6d10425</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a6c6b28964a05c10b4c0c8d956bf48292</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a634a6ed505d6ff32b4b035c14e6a4e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>ac4f1b034b7c8cd884998a0824384fb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a52e1bceb934c1c40f52e162f5ce30526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>mobility</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a2a3ea9ef9670159b3f0b5f0f4b506f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a3058dd1d938b26807b2632f4e64096ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface::Vehicle *</type>
      <name>traciVehicle</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a5f622bc396aeb198c68a25a6f1c86a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a4fffd80847d1cb56ef7bb02972b04499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>a1cc82aa89d62402dd60277677fc6a831</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classVeins_1_1TraCITestApp.html</anchorfile>
      <anchor>abbc66a3fd17454f0d1969418f4050ef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIBuffer</name>
    <filename>classVeins_1_1TraCIBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIBuffer</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>afa9eff9c2aaaa0cfc3e36b5a74f12b34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCIBuffer</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>ab130a3b48f90499123bc71e1cda68d8b</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>af77b1459cfce5455936a14352428a6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a5716cca2373bc83b19f9182bc2b916b4</anchor>
      <arglist>(T inv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a7a18c5f9feeb6e912830a5b218f6767a</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>ad44ad367a05d0a805bef431d9aec64fc</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a60197679448ddfc14c396977c2670932</anchor>
      <arglist>(const T &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a0065f3b4bf17cac8e10dc94b551eb9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>aeb7e03740d7a8764353901c71e0d6472</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a2e04ebc5fcc8dc86eb2a2f5b9f41e1b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>ae0833eeb81079e14eed3f13d0ae5d2b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hexStr</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a31246320789a4ca84735a1065517d3b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>ac59eb5ee7265be3ebbeed96063d3c1b3</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a05a88a2e7d1a3cabbd7a226cba57ead8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a253db8c674035879cda1c4221089e8da</anchor>
      <arglist>(TraCICoord inv)</arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>read</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>ab4b90aa3cc711e747de159ee22608efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>buf</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a00529498a04c7cd194ddc7b58f72b2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>buf_index</name>
      <anchorfile>classVeins_1_1TraCIBuffer.html</anchorfile>
      <anchor>a54e7ced5a3738c60dbe129e31938b0dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIColor</name>
    <filename>classVeins_1_1TraCIColor.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIColor</name>
      <anchorfile>classVeins_1_1TraCIColor.html</anchorfile>
      <anchor>aed4c0a7c62bb97cd300b23f3f932e6e7</anchor>
      <arglist>(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TraCIColor</type>
      <name>fromTkColor</name>
      <anchorfile>classVeins_1_1TraCIColor.html</anchorfile>
      <anchor>a298f34374f0c11021d65018040152c98</anchor>
      <arglist>(std::string tkColorName)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>red</name>
      <anchorfile>classVeins_1_1TraCIColor.html</anchorfile>
      <anchor>ad37e5e02d99901d9570541f409148f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>green</name>
      <anchorfile>classVeins_1_1TraCIColor.html</anchorfile>
      <anchor>ad6549105aa768ce2873b58c064aab2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>blue</name>
      <anchorfile>classVeins_1_1TraCIColor.html</anchorfile>
      <anchor>a679d0266ef7f48273a4f3088cfef92d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>alpha</name>
      <anchorfile>classVeins_1_1TraCIColor.html</anchorfile>
      <anchor>a6f2468068ff160a79c3c4e5a5da76755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface</name>
    <filename>classVeins_1_1TraCICommandInterface.html</filename>
    <class kind="class">Veins::TraCICommandInterface::GuiView</class>
    <class kind="class">Veins::TraCICommandInterface::Junction</class>
    <class kind="class">Veins::TraCICommandInterface::Lane</class>
    <class kind="class">Veins::TraCICommandInterface::Poi</class>
    <class kind="class">Veins::TraCICommandInterface::Polygon</class>
    <class kind="class">Veins::TraCICommandInterface::Road</class>
    <class kind="class">Veins::TraCICommandInterface::Route</class>
    <class kind="class">Veins::TraCICommandInterface::Trafficlight</class>
    <class kind="class">Veins::TraCICommandInterface::Vehicle</class>
    <member kind="enumeration">
      <type></type>
      <name>DepartDefs</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_NOW</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a05907030057ed2a135be6fc1a7ecbad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_LANE_BEST_FREE</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a0c9d22c391c09a99215d9be0584a8202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_POS_BASE</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a4310ac09e76e6acda3650d56ada96e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a0bf04ef3110b142713ea44517a14372a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICommandInterface</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>ab3aca7b9763e17fcc636181bb1951ddf</anchor>
      <arglist>(TraCIConnection &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; uint32_t, std::string &gt;</type>
      <name>getVersion</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a5ec16879b2f125f96cca09406ba948d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>getLonLat</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a8a861b53b03af30f0cc6734d7e6e21c4</anchor>
      <arglist>(const Coord &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistance</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a66015da939eb1425566e2e255fbfbbd9</anchor>
      <arglist>(const Coord &amp;position1, const Coord &amp;position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addVehicle</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a6ac5b17a01d5e6034ed0f806587b4829</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-DEPART_NOW, double emitPosition=-DEPART_POS_BASE, double emitSpeed=-DEPART_SPEED_MAX, int8_t emitLane=-DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function">
      <type>Vehicle</type>
      <name>vehicle</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a75c50a766747a878825415945e474665</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>Road</type>
      <name>road</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a1c55b86eefb1724b25676eee27b39cfb</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getLaneIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a4276dd21a299f0d08f6f43252aad4601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Lane</type>
      <name>lane</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>ad4a4ecc1f05d6ff33b2637d6458542bf</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>Trafficlight</type>
      <name>trafficlight</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>af6fb3314fe045b1694ca21145ab34f0b</anchor>
      <arglist>(std::string trafficLightId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPolygonIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a77573e8424c15196246040763be4a926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolygon</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a339c4de3e2582ea10937c6a86d5f78cd</anchor>
      <arglist>(std::string polyId, std::string polyType, const TraCIColor &amp;color, bool filled, int32_t layer, const std::list&lt; Coord &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>Polygon</type>
      <name>polygon</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>ae16f3b06b09adeeb8f714ef321b6df75</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoi</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a26a99b1e1c0b043fe33f7ebba1b6e20a</anchor>
      <arglist>(std::string poiId, std::string poiType, const TraCIColor &amp;color, int32_t layer, const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Poi</type>
      <name>poi</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a6722786178a64686107cad4e98a6effd</anchor>
      <arglist>(std::string poiId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getJunctionIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a0a96e941c026a81d8de8de348002fd55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Junction</type>
      <name>junction</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a832b19c03db3d99a7750ff97e79c6c6e</anchor>
      <arglist>(std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRouteIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a68b81d22921e5d51e810fa7f56b59195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Route</type>
      <name>route</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>ab69127074b747d1123d90d72729e4e6c</anchor>
      <arglist>(std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getVehicleTypeIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a66890d755c53a0fd4649b6bd852e102f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GuiView</type>
      <name>guiView</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a8462d374bac980a0e0d4cc4bfc4307b4</anchor>
      <arglist>(std::string viewId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>genericGetString</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>adfa71f32d366ee0b702a4a59f822a0a4</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Coord</type>
      <name>genericGetCoord</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>af1c5f3ec89f626323d807f4cfebc0d68</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>genericGetDouble</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a9bd02d0be1222e43bd321ccf8ca8263d</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int32_t</type>
      <name>genericGetInt</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a06bdb5ff8829cb2cd25ea5176c7d69d9</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::list&lt; std::string &gt;</type>
      <name>genericGetStringList</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>ab95ab875524c5556aac9d53f20ba0532</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::list&lt; Coord &gt;</type>
      <name>genericGetCoordList</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a52d4346d124493b1110506307496904d</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCIConnection &amp;</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface.html</anchorfile>
      <anchor>a7cf0200ecef0b74717444e3547f534de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::GuiView</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1GuiView.html</filename>
    <member kind="function">
      <type></type>
      <name>GuiView</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>a34aa9c1cddf6e079cf03f6e8e35c9a2e</anchor>
      <arglist>(TraCICommandInterface *traci, std::string viewId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheme</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>a7fa1214ce51ad788dd70c25017b7a7db</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZoom</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>ab870966023d902fdf81c1ed846bc1e3d</anchor>
      <arglist>(double zoom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundary</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>a3f451a498baa90401962ba24c069c6fe</anchor>
      <arglist>(Coord p1, Coord p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeScreenshot</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>a9b60a0a9ba910d8499c50330acf96c4a</anchor>
      <arglist>(std::string filename=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>a7cebd975c631f04126b319b527746f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>a83adfdc0e85a82a297064d2347ba13de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>viewId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1GuiView.html</anchorfile>
      <anchor>adc58044d84500d5d81eae28ffcd6ed0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Junction</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Junction.html</filename>
    <member kind="function">
      <type></type>
      <name>Junction</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Junction.html</anchorfile>
      <anchor>a9fea77b4e86dfc914455fa23a7f69345</anchor>
      <arglist>(TraCICommandInterface *traci, std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>getPosition</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Junction.html</anchorfile>
      <anchor>a5780d4814042f378de51f9dbc6726f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Junction.html</anchorfile>
      <anchor>ae0cb60c869527422a9360b0c517671d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Junction.html</anchorfile>
      <anchor>adeae759abeef2f8d2641e2d5df48ddbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>junctionId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Junction.html</anchorfile>
      <anchor>a1b083d9e499d8750c7e9acc635d7afc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Lane</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Lane.html</filename>
    <member kind="function">
      <type></type>
      <name>Lane</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>ad775d3ef314d94072be32da4abe3e1bf</anchor>
      <arglist>(TraCICommandInterface *traci, std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>getShape</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>a6a425e31eb52fdf07e929f8f793a4d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRoadId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>a8f0694837f50843bfd81bf9c4171f4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>abd968c4b7da5f0e7524e1b04a3c773e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxSpeed</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>a124b5c5f7518f9d9571696f4ee1245ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeanSpeed</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>ac8a23a7885285d21885fef9c1b4eb9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>a040d04865084384de3887a0f16d99fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>a8e8d4947bed7d47ef1b49d20b4ef7892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>laneId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Lane.html</anchorfile>
      <anchor>a96d5dde1818416b3c11791e0c91c7882</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Poi</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Poi.html</filename>
    <member kind="function">
      <type></type>
      <name>Poi</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Poi.html</anchorfile>
      <anchor>ad6422dcf0540bea2e79a33458968a05e</anchor>
      <arglist>(TraCICommandInterface *traci, std::string poiId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Poi.html</anchorfile>
      <anchor>a873371bba8a2e031dbb1a01fab8ed80c</anchor>
      <arglist>(int32_t layer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Poi.html</anchorfile>
      <anchor>a773442ab811f5b631e59ac28f7632245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Poi.html</anchorfile>
      <anchor>a506e3140cf0941da6822688eaa81f55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>poiId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Poi.html</anchorfile>
      <anchor>aebb7c342be0a069f1c9ec5d4525070e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Polygon</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Polygon.html</filename>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>a05d6b6100a99d574573552c0fa1e76f5</anchor>
      <arglist>(TraCICommandInterface *traci, std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>aca14770ea64bf1c6c94864a6071d14f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>getShape</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>a392f4386258353903e0e0947e1b113f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>afd70ffd0901f3cf790d06b6ec89a80cd</anchor>
      <arglist>(const std::list&lt; Coord &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>a0b13bed291db15f36400213a41ca0cbf</anchor>
      <arglist>(int32_t layer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>ada9767f67204797b65b65d14f7fbdee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>a378907cf7803c5277823ff4ed417a7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>polyId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Polygon.html</anchorfile>
      <anchor>a2d2150ffdd7090a6ad9b9f74b0a876a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Road</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Road.html</filename>
    <member kind="function">
      <type></type>
      <name>Road</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Road.html</anchorfile>
      <anchor>ae863d3470c1e33f013e655ff5511b3f4</anchor>
      <arglist>(TraCICommandInterface *traci, std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentTravelTime</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Road.html</anchorfile>
      <anchor>a7c37d82eee1ce31dbb37f85ee8575cbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeanSpeed</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Road.html</anchorfile>
      <anchor>a5cd1a462a7d453dc735dff506a39a134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Road.html</anchorfile>
      <anchor>af894ea364326a5b9bc79cfae21622d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Road.html</anchorfile>
      <anchor>a437e15f1883cc17581b6bc839cf08d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>roadId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Road.html</anchorfile>
      <anchor>af93aea7f4ba99171de87f8a79c7460da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Route</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Route.html</filename>
    <member kind="function">
      <type></type>
      <name>Route</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Route.html</anchorfile>
      <anchor>a63452bb4bec4dce219b648b30094aae5</anchor>
      <arglist>(TraCICommandInterface *traci, std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRoadIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Route.html</anchorfile>
      <anchor>af74c44c01915344b4178e0406069b07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Route.html</anchorfile>
      <anchor>aeffe655278f852f0ecdd63f2bbcbebf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Route.html</anchorfile>
      <anchor>a77e6b620bf93417c172d228a837af0cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>routeId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Route.html</anchorfile>
      <anchor>adc05159a0c25be8e86d4524c1fd6e3b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Trafficlight</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</filename>
    <member kind="function">
      <type></type>
      <name>Trafficlight</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</anchorfile>
      <anchor>a5dcdf60becef20e7b1f0a22158edfd5f</anchor>
      <arglist>(TraCICommandInterface *traci, std::string trafficLightId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgram</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</anchorfile>
      <anchor>a74e62690aff6ee025779bd7d2df8e0d0</anchor>
      <arglist>(std::string program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhaseIndex</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</anchorfile>
      <anchor>a21c4aeeae88131ddb3b21e5f3c954ddf</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</anchorfile>
      <anchor>a74deefda00caad09e51837511be644ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</anchorfile>
      <anchor>a78c3ddb8fc1704fc36c16b12d9388fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>trafficLightId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Trafficlight.html</anchorfile>
      <anchor>a73335317d2b2374e2cf2a5c2b64813a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface::Vehicle</name>
    <filename>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</filename>
    <member kind="function">
      <type></type>
      <name>Vehicle</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a5649948312c6fdc18f071253698ac71e</anchor>
      <arglist>(TraCICommandInterface *traci, std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMode</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a5c4e1d99b37952019c05db236e6f4bef</anchor>
      <arglist>(int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a3c2a71fd23b864c788a04bc8cb5de34e</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>aa637a627c0348273e77c4dd47c19f7cc</anchor>
      <arglist>(const TraCIColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slowDown</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>ad7693a7bfe471d9e7baedcbb11392fc8</anchor>
      <arglist>(double speed, int time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newRoute</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a7d58de1d6d00c7a34ad26535eb1be094</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParking</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a1dd688562f93ac359f9f526cd6156e88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRoadId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a915e04ec7c941e0f70c47b398ba6b4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCurrentRoadOnRoute</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a2e15918cb7833fc608de2b180886225b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLaneId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>ac6a5788f6347f6d63109b5e8f3206b1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLanePosition</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>ae07c0630af804c1519e7eebdc0aeabc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPlannedRoadIds</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a89989a1a04fd161c127354f1cb87a4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRouteId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>abac0f4ef3fc8bde37c6700c285e637c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeRoute</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a5270196ce1c5ac2c28ebf7ebc5f99efe</anchor>
      <arglist>(std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopAt</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a4f2fcab42a582c30b8fdb569cd7277a7</anchor>
      <arglist>(std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLaneIndex</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a94da483254494fefde944a61b9017d2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a2b0c74725ecd15a59adaff6858de5234</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeVehicleRoute</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>aff88da97800b841c5dd57d361ee90a40</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;roads)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a4d362c6937239cd70d4155825f08f80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a5536ea97c3a6c9493fe566e8f010e5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nodeId</name>
      <anchorfile>classVeins_1_1TraCICommandInterface_1_1Vehicle.html</anchorfile>
      <anchor>a5d72585a40b46cef6a4de1af4c39b891</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Veins::traci2omnet_functor</name>
    <filename>structVeins_1_1traci2omnet__functor.html</filename>
    <member kind="function">
      <type></type>
      <name>traci2omnet_functor</name>
      <anchorfile>structVeins_1_1traci2omnet__functor.html</anchorfile>
      <anchor>a656ecb42638a6b6320c56265973ccdbc</anchor>
      <arglist>(const TraCIConnection &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator()</name>
      <anchorfile>structVeins_1_1traci2omnet__functor.html</anchorfile>
      <anchor>a60d7ed4c51b9c696bfa632f13a62f88a</anchor>
      <arglist>(const TraCICoord &amp;coord) const </arglist>
    </member>
    <member kind="variable">
      <type>const TraCIConnection &amp;</type>
      <name>owner</name>
      <anchorfile>structVeins_1_1traci2omnet__functor.html</anchorfile>
      <anchor>a4ff489e0aa175638d33eca02e398a375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIConnection</name>
    <filename>classVeins_1_1TraCIConnection.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setNetbounds</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a2111dc45324e4601b6ced51ffbd013c7</anchor>
      <arglist>(TraCICoord netbounds1, TraCICoord netbounds2, int margin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIConnection</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a58abd901783fb79c052a7a93387da0a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer</type>
      <name>query</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>ac0f5129ad1e50365588ec39112432c7d</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer</type>
      <name>queryOptional</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a9c6888b53a5f172a43361f3fee995a85</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf, bool &amp;success, std::string *errorMsg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>aaf6acde79a0ba73113c46ea92bd567d2</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>receiveMessage</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a634ce6c27d5e98f7d96f65706f3460df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>traci2omnetAngle</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a65200216c901fb4ada0ae3199bffe430</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omnet2traciAngle</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a0f97cf5e1292c218ed0e803bcaef2211</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>traci2omnet</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a50ff4ac1941038e2e6b3bc01e8859f49</anchor>
      <arglist>(TraCICoord coord) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>traci2omnet</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>adf88c5c08b4acb5ab98c0f138cf3b507</anchor>
      <arglist>(const std::list&lt; TraCICoord &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>omnet2traci</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>ab356d0c41b62b01b3507e11a8e5f9bf1</anchor>
      <arglist>(Coord coord) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>omnet2traci</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a84db0647d7f8dc595748df8ab1cdfcfc</anchor>
      <arglist>(const std::list&lt; Coord &gt; &amp;) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TraCIConnection *</type>
      <name>connect</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a0b03b7d7e0f3955936ee7a2c17039bd5</anchor>
      <arglist>(const char *host, int port)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TraCIConnection</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a2c7d80df94985316a7b6599091006175</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>socketPtr</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a31fdf693fe2c82c6e00b79afaeb2bc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCICoord</type>
      <name>netbounds1</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>ad58164fc1139fb6a4736d2df7358f577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCICoord</type>
      <name>netbounds2</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a887c9afa6bf4f27854cdf45237df33ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>margin</name>
      <anchorfile>classVeins_1_1TraCIConnection.html</anchorfile>
      <anchor>a2b14b0bd41dd8d9fc2a0c88adc9a1660</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Veins::TraCICoord</name>
    <filename>structVeins_1_1TraCICoord.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCICoord</name>
      <anchorfile>structVeins_1_1TraCICoord.html</anchorfile>
      <anchor>aacbd9709ddfdc38df32362dccc7420c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICoord</name>
      <anchorfile>structVeins_1_1TraCICoord.html</anchorfile>
      <anchor>a85685169dd692ec2e4ed2c433f0f23a4</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structVeins_1_1TraCICoord.html</anchorfile>
      <anchor>aa875ad4fcf518b402978533cf4d3812b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structVeins_1_1TraCICoord.html</anchorfile>
      <anchor>a4a2139b44f9a8f49b908dfdabeafe285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIMobility</name>
    <filename>classVeins_1_1TraCIMobility.html</filename>
    <base>BaseMobility</base>
    <class kind="class">Veins::TraCIMobility::Statistics</class>
    <member kind="function">
      <type></type>
      <name>TraCIMobility</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a55255b2a792d2355036b32606695fc16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIMobility</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a9cca9e86474a7327dd1418fed62e04f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a508c83b198cc326da67bd8ed1decfb75</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a07c35ffc4230bc632e0233c723d719d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a0f6b3ea2a2e2dc2a308c8db11bc09172</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a0f5910264711db6f973c47789e615c79</anchor>
      <arglist>(std::string external_id, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextPosition</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a2b8432d33ff6bcadf7a5c4d30d5636b3</anchor>
      <arglist>(const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1, TraCIScenarioManager::VehicleSignal signals=TraCIScenarioManager::VEH_SIGNAL_UNDEF)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changePosition</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a3137899bb330551c9823c40b4ed8b8fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParkingState</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>add18338b0358fd50ff570922ab39c0e6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aa01f8917bba28cc6b9760ec771b973e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>af3d20ebfc59ea6512fdc24bf545676cb</anchor>
      <arglist>(std::string external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a5d901e593ed0fcb4ee5214564f81ed95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAntennaPositionOffset</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aacdae64976e6e89082040bea5933f6f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>af3dcd8e7c2046fa939aaee6e3a087e03</anchor>
      <arglist>(const simtime_t &amp;t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParkingState</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>ac730da06609e16bbf5ce9e8588c0c388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRoadId</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>afd3a0636a9a5bbe834f71a59108eeda4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a0c0e1114d451023eeb819c443f81bb89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCIScenarioManager::VehicleSignal</type>
      <name>getSignals</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a2d3091a2fc3025eccb744f98bbd73eaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAngleRad</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a6b9658651943c7ed6dc4825ccad654c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a9112501e8dffb3ef22fc5c571a016ed1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a180ae1e009f8c81f66a167e21b7b5b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface::Vehicle *</type>
      <name>getVehicleCommandInterface</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a690ad24a231dff3f3d929e3738db9b69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a0fdea350639a2c9e1a71d91c4d4cb8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateCO2emission</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aaab12d7d5b612bc5eed8ce9567184774</anchor>
      <arglist>(double v, double a) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>calculateAntennaPosition</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>ad717a66b60ffceb73d95bf7c1c4eb87e</anchor>
      <arglist>(const Coord &amp;vehiclePos) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a65b04a95b0040f33d0c2800141bbecf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>accidentCount</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a38b51524117427dacb80821db1a56500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosXVec</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a1a9fe7ad61be9a60293b00d0463292a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosYVec</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aef60f5d90a20ff76373c8522f69be91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentSpeedVec</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a977eb0a14f0676e4d9e72c94e7d7e0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentAccelerationVec</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aaa8e945ee67a283dbb42211f89386c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentCO2EmissionVec</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>ac1f32ea7b1134c42998e2dac7ad8cb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Statistics</type>
      <name>statistics</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>acefb4665d12d3a75d69874e35249430d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aadaf980849adcbdb710fcfa13dce88bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a21d84d4b4a06d92a3b028ebc180391c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>antennaPositionOffset</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a392148b42719087888a93337ff6db9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a32fefbe860c085895e9616d696a7558d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>roadPosition</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>abe64e236db4381e34c0357b0140fdf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>road_id</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>ab88b5d1498ff55efb8e3ffac41ea8add</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a4b77003a6a823808c1daa781532a67c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a6c12363a9e734c10e3f8a3d43c4f923b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager::VehicleSignal</type>
      <name>signals</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>aba391505e39e444819f88a4f90a509c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startAccidentMsg</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>ab3736378b8b2000c37ca49a4a5f11cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopAccidentMsg</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a450b898fcfa33db6459ea4cbcaa5cbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a54f13e4047151443c4ec5c69fcf2a30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>commandInterface</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a3e3d1ae7dee129c58bca5e8374f666f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface::Vehicle *</type>
      <name>vehicleCommandInterface</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a960340f169aebd89815ff1d3abc8f27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>last_speed</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a9be0cb7856726d18428f7ffbc9755d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>ab3ef5616a0e34e0f9e16780327853950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classVeins_1_1TraCIMobility.html</anchorfile>
      <anchor>a1d8738a560d88611b05bee8f91b93b7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIMobility::Statistics</name>
    <filename>classVeins_1_1TraCIMobility_1_1Statistics.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a85d464690436867cd9b877aaad2d3aeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a091df9b48ee304cfe9cfbba7af0f7e96</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalars</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a063d5799a5ff7686056398d91a85f872</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>firstRoadNumber</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a8f645d2cc3466bc839fbbddaaddbb22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a0b88fb71f3cd4e4ccbfbc7b79cc75278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>totalTime</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>add067f8844e6ec039a8bd3f606c582e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>ac5b49b1c5689826d270e69037a913a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a24520419556ab1264b03793215169f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a0aa0c82095f8ec615c8a716b89b3424c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDistance</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>a139b8ae9da27d588390125f4b742861e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalCO2Emission</name>
      <anchorfile>classVeins_1_1TraCIMobility_1_1Statistics.html</anchorfile>
      <anchor>ae43f21422382132400b6e2d06fc1e2fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIMobilityAccess</name>
    <filename>classVeins_1_1TraCIMobilityAccess.html</filename>
    <member kind="function">
      <type>TraCIMobility *</type>
      <name>get</name>
      <anchorfile>classVeins_1_1TraCIMobilityAccess.html</anchorfile>
      <anchor>aa2788845910c6afc0b6068d9bf71bdd3</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManager</name>
    <filename>classVeins_1_1TraCIScenarioManager.html</filename>
    <base>cSimpleModule</base>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_UNDEF</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aabc3b2630007242bd2e85c54915a5aca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_NONE</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aaf6049a070392297e92acedac6d3018d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_RIGHT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa22625945bf7f8341a7a563672b546302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_LEFT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa692ff08eb077493883b18a870bb948e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_EMERGENCY</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa6d0243408cfc2c3cd9d3a8307b858865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BRAKELIGHT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aaa0ed439b45fd825bb1349d4bbe04c129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FRONTLIGHT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aabb8fe5d897ff299726c5c56b65afa561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FOGLIGHT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa3d9085d5dc170956afdcad3528a57489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_HIGHBEAM</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa2d2884d4d794a6f6482978cc07a6c810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BACKDRIVE</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aab44798483cc8a77424997bbf3e2fe605</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_WIPER</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa16b6d8328522c827334537d93a2f7bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_LEFT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa81a8f3dc475f680bec58335d62340805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_RIGHT</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aaa6235feea29e1778334fbef324e37dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_BLUE</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aac9a2f1fe9411897cb3d3586608ad7b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_RED</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa952bdd9bad89b4f739f5c2d900f50d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_YELLOW</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa66706db19e32b3425a014d05b322191d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCIScenarioManager</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a54a7ac1f30470a59a6bf661499621ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIScenarioManager</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a074db4486fe1f85539c46c9efb47d3dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>aeae3d3c4c49532b7de2caa34cc6861f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>aad635968bbaf0a2b9ed0cade319a8830</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a95586be7e5fa2b6f0bb15a5768559dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a7ca227c28f036e04e42ef08d1639dbf1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a86a0b91aab8823c087c33b99f3a06b1f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ab25b8a9284329844c1fb4f48124ddfa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>af9d96f6e40de409df2f1d04b617433d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoShutdownTriggered</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a1071045e264232b4ccf0ce5542b595ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, cModule * &gt; &amp;</type>
      <name>getManagedHosts</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a41d208f63678d3ca5701466775ed922f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>getCurrentTimeMs</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a7196c70a935847c9fc52724e928d5956</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeOneTimestep</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a84ebe9fb50441189bd39f949f2593115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a5389f3fc889b1fe3fd126c33a7d9ae36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addModule</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a08e1ff8c735af701665a197839515aa6</anchor>
      <arglist>(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getManagedModule</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a600d697200c9ed997ed6551cbc8e81d3</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteManagedModule</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>aaeb2994f7103a8710de44e1475345855</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isModuleUnequipped</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a52691baec11c32dfe08f2cc721751075</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInRegionOfInterest</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ae51091825641970ee901cec6394f0c18</anchor>
      <arglist>(const TraCICoord &amp;position, std::string road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertNewVehicle</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ac54fb91923466d530f0f0d683124077a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertVehicles</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a2950402455646afe8ed6c36254cc9fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToVehicleVariables</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a999d945fca20d45532a24b492430d742</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromVehicleVariables</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a53c90abb9587bfef622c410ea9ca31ae</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSimSubscription</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a1dba6b09e84d2d3d91c552bc9172119f</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processVehicleSubscription</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a4b6aa1aa798b245ff323c5759a3b848e</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSubcriptionResult</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a2f149bc15c3119ab19850b6960689eeb</anchor>
      <arglist>(TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a2fcc8edee3707edb30d1fb497d5fa617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>connectAt</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a7f6e9f5a76090d181dfc25adcc75d1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstStepAt</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a51d1f1892cf60111262ab822c61e0bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>adc1ecaab960a23eaed61da0f25fbb107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleType</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a59d27f22218270e6af5d22809c79c6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleName</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>aef27822edeb236bcd892ad88a15cde90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleDisplayString</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a7bbf0dd3845ae451d6003f0768732bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a3dfd5a089d235df9f6cb57737a16f46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ae5bb0fd35f45fe67fd226e0279bc042b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>vehicleNameCounter</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a3201a3a4cdd00acb9c2cd0fecf9e9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>myAddVehicleTimer</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a756be80f6586f1622de6ea90fd06c01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vehicleTypeIds</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ae7c22ec07f52d59f8e45c0c12f1cca64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::queue&lt; std::string &gt; &gt;</type>
      <name>vehicleInsertQueue</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a79b8d8cf39d4a42bd7569ed5fd9a2018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>queuedVehicles</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a6b6cea898d3b2ae69edc2c66a3c24184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>routeIds</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a369cb820f4c3314eac96da8f867ef933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vehicleRngIndex</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ac6e13f93526078c81f5cee451d4995c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numVehicles</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ab9806e21062f489b23c4b86433246a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cRNG *</type>
      <name>mobRng</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>aab2d2fa99a102a93487573797c5182c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdown</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ad81b1b3f1bdc22dbef3530461c080849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>penetrationRate</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a5967b0824d1b7566cfbcf27a78ce360e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>roiRoads</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a9a29c530c8570f246591c8b9059d9ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::pair&lt; TraCICoord, TraCICoord &gt; &gt;</type>
      <name>roiRects</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a9f165e9d33765f513e940ddf7f5f7495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a1133aeadadd4513413fdcfd8478015f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>commandIfc</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>ab582d692b149758e8d78836723e2b3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextNodeVectorIndex</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a76bc9191ec2a5e51659f774ea485c80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>hosts</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a9b843bd56ca321e1642a26988c344556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>unEquippedHosts</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>aa3817b2b12aa8d874e89996673ad267e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subscribedVehicles</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a2f731af13e5becd60dbf9fc476704ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>activeVehicleCount</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a5491031b97ad839ad721b3677c2f36e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>parkingVehicleCount</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>af96a26fbb86d8a655b504bcd8508217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>drivingVehicleCount</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a2b2fb8ca878b36aae5d93755f2a5117a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdownTriggered</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>adfbec67374cb78dbdf38b8bb328c54ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectAndStartTrigger</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>af116554ea3dcefafb7ad8c2d9c0b1a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>executeOneTimestepTrigger</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>af7d47a3cc68cd21f3fd1835995f955fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>a4b1efd9656294ac427082c2b88458608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>classVeins_1_1TraCIScenarioManager.html</anchorfile>
      <anchor>afc45f29600216b9d3abeec2cc96e0afa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManagerAccess</name>
    <filename>classVeins_1_1TraCIScenarioManagerAccess.html</filename>
    <member kind="function">
      <type>TraCIScenarioManager *</type>
      <name>get</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerAccess.html</anchorfile>
      <anchor>af6404515b1b992848f352b03d325b10d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManagerLaunchd</name>
    <filename>classVeins_1_1TraCIScenarioManagerLaunchd.html</filename>
    <base>Veins::TraCIScenarioManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TraCIScenarioManagerLaunchd</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a11c07c153f39ca66e738d3c53f9924a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a80960dd89b68e6c6efbd2a06b16a91cc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>ad29dc12c41e262b7d59b44183dda06bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>a4c5b4cac20e03a2e333fd3e49a6a7e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>launchConfig</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>ad1bf8415d12b738554b76dcb35b72101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchd.html</anchorfile>
      <anchor>ab917fd44dcdbf873c314ff4a7271b070</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManagerLaunchdAccess</name>
    <filename>classVeins_1_1TraCIScenarioManagerLaunchdAccess.html</filename>
    <member kind="function">
      <type>TraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classVeins_1_1TraCIScenarioManagerLaunchdAccess.html</anchorfile>
      <anchor>a0d630ea2a92db7e07d4bfe0d5a55ca10</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScreenRecorder</name>
    <filename>classVeins_1_1TraCIScreenRecorder.html</filename>
    <base>cSimpleModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1TraCIScreenRecorder.html</anchorfile>
      <anchor>a875c8f5612cecde0a6eff6fd660b5dfc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classVeins_1_1TraCIScreenRecorder.html</anchorfile>
      <anchor>a9a8e4cef1233c24c8a2809a981712025</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1TraCIScreenRecorder.html</anchorfile>
      <anchor>afa4a63996a2d6d54e9b37bcfd2388920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>takeScreenshot</name>
      <anchorfile>classVeins_1_1TraCIScreenRecorder.html</anchorfile>
      <anchor>a89808d5d23dd22f56b2404421b8b76b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::Obstacle</name>
    <filename>classVeins_1_1Obstacle.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Coord &gt;</type>
      <name>Coords</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a586acca0929eb10cc73ea7be825d3637</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Obstacle</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a5419e7a639a042db9a4bd990f2911993</anchor>
      <arglist>(std::string id, double attenuationPerWall, double attenuationPerMeter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a805aed4d3b239e0163f06aa70bfb0b73</anchor>
      <arglist>(Coords shape)</arglist>
    </member>
    <member kind="function">
      <type>const Coords &amp;</type>
      <name>getShape</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a1e5a701e21f19186862a7e93fbf3727f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coord</type>
      <name>getBboxP1</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a85c7631c055aa999d73c1f57a2f01d46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coord</type>
      <name>getBboxP2</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>aca5158acb83145623179b40756afbc76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculateAttenuation</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a637ef6f4ebd448f7f2f3f68a6fb7466a</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const </arglist>
    </member>
    <member kind="variable">
      <type>AnnotationManager::Annotation *</type>
      <name>visualRepresentation</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a8db69ca6572f8f581506296acc5d1f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>ac09d50568b4975b446cfc905d1094661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>attenuationPerWall</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a5ac2b0bb7e40b1a32481bb5b2b1d196c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>attenuationPerMeter</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a63e08c8bd92f0c41738164b7f55592b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coords</type>
      <name>coords</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a088a171fc183b5fcde7a4d36a5f700b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>bboxP1</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>ae7926cbc6c3ed67090398a87b27ba0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>bboxP2</name>
      <anchorfile>classVeins_1_1Obstacle.html</anchorfile>
      <anchor>a1ef3b86c63ee37c99e9bf6319de2ced9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::ObstacleControl</name>
    <filename>classVeins_1_1ObstacleControl.html</filename>
    <base>cSimpleModule</base>
    <class kind="struct">Veins::ObstacleControl::CacheKey</class>
    <member kind="function">
      <type></type>
      <name>~ObstacleControl</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a9a0f4a4b066ead07a7dc35064bb43b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a199ba1a4bd7eb58b6365fcaa5c0b1a90</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>aeb33ecdba9a10cdcb33bd5eb8c0ca8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a9c07fdcd59de3e83ff27779c262a58b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a42efb429b16cdbc17cac51f5aabc682b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>ae44772f7d064e31ab18301a0df6f2bd5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromXml</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a1e5fceb8e8d9616622cc12551231c9d3</anchor>
      <arglist>(cXMLElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a206a6e9155d1b201841d0718e65ed30f</anchor>
      <arglist>(Obstacle obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a3c5fb281ac00c947afe86d5e4bf99759</anchor>
      <arglist>(const Obstacle *obstacle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculateAttenuation</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>ae3bc0ffe81dd2ca3145636656f392204</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const </arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>GRIDCELL_SIZE</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a52b4b8a1266881ac99132284901a01f8aaaeaef90dbfcc889ad54819353cc909f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Obstacle * &gt;</type>
      <name>ObstacleGridCell</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>abf6a8e49836cc2e84083efdfb0ce443a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; ObstacleGridCell &gt;</type>
      <name>ObstacleGridRow</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>ae6b90bea0712db25767a1466cf2190b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; ObstacleGridRow &gt;</type>
      <name>Obstacles</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a009f96eba63cb6ad81abf49f34810ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; CacheKey, double &gt;</type>
      <name>CacheEntries</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>addca106e90b550928f647d1357ef4e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>acc889e39d0cdc996e752ef6b00df13ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>obstaclesXml</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a153bba91af5185e8215e8e80c1c6aea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Obstacles</type>
      <name>obstacles</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a7239ec57e6d0791e5d85f60e5c4617c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>aeb42826c4ddc4e97d6c58f232e8615f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager::Group *</type>
      <name>annotationGroup</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a09cdae70c3aae4bee6d129cc8a8d3ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CacheEntries</type>
      <name>cacheEntries</name>
      <anchorfile>classVeins_1_1ObstacleControl.html</anchorfile>
      <anchor>a3ac5aade85e956c70ef0c071cc7b914b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Veins::ObstacleControl::CacheKey</name>
    <filename>structVeins_1_1ObstacleControl_1_1CacheKey.html</filename>
    <member kind="function">
      <type></type>
      <name>CacheKey</name>
      <anchorfile>structVeins_1_1ObstacleControl_1_1CacheKey.html</anchorfile>
      <anchor>a040d7b2534bdc24c129f7bd61acc636e</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structVeins_1_1ObstacleControl_1_1CacheKey.html</anchorfile>
      <anchor>a6c13eab0ef252053747305ea891e3ae8</anchor>
      <arglist>(const CacheKey &amp;o) const </arglist>
    </member>
    <member kind="variable">
      <type>const Coord</type>
      <name>senderPos</name>
      <anchorfile>structVeins_1_1ObstacleControl_1_1CacheKey.html</anchorfile>
      <anchor>a2597f4f25a4c95adca4e480a4bc9bd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Coord</type>
      <name>receiverPos</name>
      <anchorfile>structVeins_1_1ObstacleControl_1_1CacheKey.html</anchorfile>
      <anchor>a66f2e4f792d5f4afb40ba9773123e53a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::ObstacleControlAccess</name>
    <filename>classVeins_1_1ObstacleControlAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>ObstacleControlAccess</name>
      <anchorfile>classVeins_1_1ObstacleControlAccess.html</anchorfile>
      <anchor>a4a1c00dc526e36376d9ad0cb16c319ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObstacleControl *</type>
      <name>getIfExists</name>
      <anchorfile>classVeins_1_1ObstacleControlAccess.html</anchorfile>
      <anchor>aa91c56b9eab7ff107096256d861b7ca4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationDummy</name>
    <filename>classVeins_1_1AnnotationDummy.html</filename>
    <base>cSimpleModule</base>
    <member kind="function">
      <type></type>
      <name>~AnnotationDummy</name>
      <anchorfile>classVeins_1_1AnnotationDummy.html</anchorfile>
      <anchor>a8a512752f44140186a0c3e768d21f698</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager</name>
    <filename>classVeins_1_1AnnotationManager.html</filename>
    <base>cSimpleModule</base>
    <class kind="class">Veins::AnnotationManager::Annotation</class>
    <class kind="class">Veins::AnnotationManager::Group</class>
    <class kind="class">Veins::AnnotationManager::Line</class>
    <class kind="class">Veins::AnnotationManager::Point</class>
    <class kind="class">Veins::AnnotationManager::Polygon</class>
    <member kind="function">
      <type></type>
      <name>~AnnotationManager</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a4c128a4092e49809d991d4c46a2fee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a4e45767a1dabba9ee81112336be01786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a6b000dd9d5d40d81b5b3b9d4581cfa19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a030910f3c70bf5205be6f7865bbf3073</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a15b1bc8dc418c545c8ff4e2b1f14833b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleParameterChange</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a8bf0a36cd6e242341fa5a5b39fefd898</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromXml</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a946e1967906528815fbe61cb8cfb2986</anchor>
      <arglist>(cXMLElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>Group *</type>
      <name>createGroup</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>ac579f5fef019464b16a2e93a36868274</anchor>
      <arglist>(std::string title=&quot;untitled&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Point *</type>
      <name>drawPoint</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>ae661e9164bc6810b5296e330a6923cc5</anchor>
      <arglist>(Coord p, std::string color, std::string text, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>Line *</type>
      <name>drawLine</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a4e92e8dd00db918dda24085571ef234e</anchor>
      <arglist>(Coord p1, Coord p2, std::string color, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>Polygon *</type>
      <name>drawPolygon</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a250a47fb5e1390f8b4de2128a4aed175</anchor>
      <arglist>(std::list&lt; Coord &gt; coords, std::string color, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>Polygon *</type>
      <name>drawPolygon</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a09a32830153c4132dc54290197b94dba</anchor>
      <arglist>(std::vector&lt; Coord &gt; coords, std::string color, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBubble</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a0b53a21c767d536a5a7ed72335cb9331</anchor>
      <arglist>(Coord p1, std::string text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a990948888917eff8840f899714d4e754</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAll</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>ae4e81c01b715f94d40b5e6cfdb81279a</anchor>
      <arglist>(Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleErase</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>ac782dda85f42f36488d8a2eb91de6b11</anchor>
      <arglist>(simtime_t deltaT, Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>createDummyModule</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a5913c22f5ec33e8a4d6531bc0b016899</anchor>
      <arglist>(std::string displayString)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>createDummyModuleLine</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a9f62775132e28042c0e239c79131fa61</anchor>
      <arglist>(Coord p1, Coord p2, std::string color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a87ffa1c7edbccb8372a4551b73c73def</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>ae7cd5fba58d72f4351963b9a6c95e669</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAll</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a5aeb55b31919c887fce7332cd8d98152</anchor>
      <arglist>(Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideAll</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a00d8af6a3eb73ccacec8bb3083bf0fd8</anchor>
      <arglist>(Group *group=0)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Annotation * &gt;</type>
      <name>Annotations</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a1cbcbd690c9d1a3563543462ac8c4399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Group * &gt;</type>
      <name>Groups</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a2717a95d56eac90ac6f555bc4c462599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a45613c9c343e0bcc81880a3945a8914a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>annotationsXml</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a3eabd7f3c3646048dcb2a3f995aaa31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cMessage * &gt;</type>
      <name>scheduledEraseEvts</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a11e9c9ea7279bf7f7594699894d62259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Annotations</type>
      <name>annotations</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a0abeb462e7e2bb05356d49435567b27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Groups</type>
      <name>groups</name>
      <anchorfile>classVeins_1_1AnnotationManager.html</anchorfile>
      <anchor>a54f1b2c0453b30de97e41ce85bfc3f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Annotation</name>
    <filename>classVeins_1_1AnnotationManager_1_1Annotation.html</filename>
    <member kind="function">
      <type></type>
      <name>Annotation</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>a6ebfb21012d46f500c139b10b17cc6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Annotation</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>a3aba415662f60e0ef3b917c1683aec41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Group *</type>
      <name>group</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>a479f5696b5b0a2afda2b18038c17486e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cModule * &gt;</type>
      <name>dummyObjects</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>a0556d014251f5fa7fa9f154c53584e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciPoiIds</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>a512752570656c6d644c65bb15c622e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciLineIds</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>ac364f9c1aeb95786a3b80ca2132db090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciPolygonsIds</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>a03e42cc7376f26b7337346c9b9b9da46</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Annotation.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Group</name>
    <filename>classVeins_1_1AnnotationManager_1_1Group.html</filename>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Group.html</anchorfile>
      <anchor>a1cb047eabfba52e74aa2fb484b155c52</anchor>
      <arglist>(std::string title)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Group</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Group.html</anchorfile>
      <anchor>a0425359af860abe5eedf8cbce884f229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>title</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Group.html</anchorfile>
      <anchor>a3c038e4ad344576d1120d35cff76373e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Group.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Line</name>
    <filename>classVeins_1_1AnnotationManager_1_1Line.html</filename>
    <base>Veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Line.html</anchorfile>
      <anchor>a2e87e0d96c6643262475caef5b16db7b</anchor>
      <arglist>(Coord p1, Coord p2, std::string color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Line</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Line.html</anchorfile>
      <anchor>a9eeb3a88e96e6a6ec2b75fd7e0ff4e27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p1</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Line.html</anchorfile>
      <anchor>ae677f7b0251cca20047d694deaedc7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p2</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Line.html</anchorfile>
      <anchor>a1cf459744ee8c362e57a968cdb1aa1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Line.html</anchorfile>
      <anchor>a724cf173b2bc072c99773b2c9dfdef9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Line.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Point</name>
    <filename>classVeins_1_1AnnotationManager_1_1Point.html</filename>
    <base>Veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Point.html</anchorfile>
      <anchor>ac2031dd1c71776509a37dbea5fb7b0d0</anchor>
      <arglist>(Coord pos, std::string color, std::string text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Point</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Point.html</anchorfile>
      <anchor>ae2f297b382e2e64c3689f8b009ddd420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Point.html</anchorfile>
      <anchor>a03acdeeb3a6e195fb13548be2da419c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Point.html</anchorfile>
      <anchor>a29eff86d1859e0de89e1bba3d9e48fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>text</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Point.html</anchorfile>
      <anchor>abbabca09a291dc3b26641bd8d62216ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Point.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Polygon</name>
    <filename>classVeins_1_1AnnotationManager_1_1Polygon.html</filename>
    <base>Veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Polygon.html</anchorfile>
      <anchor>a51bd05eb33c81c7a6a03a8965ee126f1</anchor>
      <arglist>(std::list&lt; Coord &gt; coords, std::string color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Polygon</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Polygon.html</anchorfile>
      <anchor>a1dcfe7a88b256284643b9077fec50934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; Coord &gt;</type>
      <name>coords</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Polygon.html</anchorfile>
      <anchor>a8dd7c8dc28082148a4e6a6d34395fdae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Polygon.html</anchorfile>
      <anchor>ad3797331970cc20e828cf6974ff51b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classVeins_1_1AnnotationManager_1_1Polygon.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManagerAccess</name>
    <filename>classVeins_1_1AnnotationManagerAccess.html</filename>
    <member kind="function">
      <type>AnnotationManager *</type>
      <name>getIfExists</name>
      <anchorfile>classVeins_1_1AnnotationManagerAccess.html</anchorfile>
      <anchor>a2c602699c6a6878cfaccfc2553ff839f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>analogueModel</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/analogueModel/</path>
    <filename>dir_e7bc2e7c92047e041aeadd961c478a6c.html</filename>
    <file>BreakpointPathlossModel.cc</file>
    <file>BreakpointPathlossModel.h</file>
    <file>JakesFading.cc</file>
    <file>JakesFading.h</file>
    <file>LogNormalShadowing.cc</file>
    <file>LogNormalShadowing.h</file>
    <file>PERModel.cc</file>
    <file>PERModel.h</file>
    <file>SimpleObstacleShadowing.cc</file>
    <file>SimpleObstacleShadowing.h</file>
    <file>SimplePathlossModel.cc</file>
    <file>SimplePathlossModel.h</file>
    <file>TwoRayInterferenceModel.cc</file>
    <file>TwoRayInterferenceModel.h</file>
  </compound>
  <compound kind="dir">
    <name>annotations</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/world/annotations/</path>
    <filename>dir_9ec2ce8bbfdd5a044247b82b9093751c.html</filename>
    <file>AnnotationDummy.cc</file>
    <file>AnnotationDummy.h</file>
    <file>AnnotationManager.cc</file>
    <file>AnnotationManager.h</file>
  </compound>
  <compound kind="dir">
    <name>aodvvanet</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/aodvvanet/</path>
    <filename>dir_286ab769c2c5c45588daf85dae33f309.html</filename>
    <file>AODVVANETControlPackets_m.h</file>
    <file>AODVVANETRouteData.cc</file>
    <file>AODVVANETRouteData.h</file>
    <file>AODVVANETRouting.cc</file>
    <file>AODVVANETRouting.h</file>
  </compound>
  <compound kind="dir">
    <name>application</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/</path>
    <filename>dir_8c62ac428a85dd6600311d6afcb1a45e.html</filename>
    <dir>ieee80211p</dir>
    <dir>traci</dir>
  </compound>
  <compound kind="dir">
    <name>applications</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/</path>
    <filename>dir_6326d4108122c053a93b61afc4af096f.html</filename>
    <dir>traci</dir>
  </compound>
  <compound kind="dir">
    <name>base</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/base/</path>
    <filename>dir_1d91d87d58f91a1490f7d2e3fe99b734.html</filename>
    <file>compatibility_vanet.h</file>
    <file>ControlVanetRouting_m.h</file>
    <file>Vanet_ControlInfoBreakLink_m.h</file>
    <file>Vanet_LocatorNotificationInfo_m.h</file>
    <file>Vanet_MeshControlInfo_m.h</file>
    <file>VanetAddress.cc</file>
    <file>VanetAddress.h</file>
    <file>VanetModuleAccess.cc</file>
    <file>VanetModuleAccess.h</file>
    <file>VanetNetfilterHook.cc</file>
    <file>VanetNetfilterHook.h</file>
    <file>VanetRoutingBase.cc</file>
    <file>VanetRoutingBase.h</file>
  </compound>
  <compound kind="dir">
    <name>base</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/</path>
    <filename>dir_7ed75e2b1ee1c6cbf8e17dfb79841f91.html</filename>
    <dir>connectionManager</dir>
    <dir>messages</dir>
    <dir>modules</dir>
    <dir>phyLayer</dir>
    <dir>utils</dir>
  </compound>
  <compound kind="dir">
    <name>common</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/common/</path>
    <filename>dir_5f9b09ab11d03a0d048b88ce0a06dbcf.html</filename>
    <file>LineSegmentsVANETMobilityBase.cc</file>
    <file>LineSegmentsVANETMobilityBase.h</file>
    <file>MovingVANETMobilityBase.cc</file>
    <file>MovingVANETMobilityBase.h</file>
    <file>VANETMobilityAccess.cc</file>
    <file>VANETMobilityAccess.h</file>
    <file>VANETMobilityBase.cc</file>
    <file>VANETMobilityBase.h</file>
  </compound>
  <compound kind="dir">
    <name>connectionManager</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/connectionManager/</path>
    <filename>dir_272cbfe602ee7aa1671c8e828958bbc3.html</filename>
    <file>BaseConnectionManager.cc</file>
    <file>BaseConnectionManager.h</file>
    <file>ChannelAccess.cc</file>
    <file>ChannelAccess.h</file>
    <file>ConnectionManager.cc</file>
    <file>ConnectionManager.h</file>
    <file>NicEntry.h</file>
    <file>NicEntryDebug.cc</file>
    <file>NicEntryDebug.h</file>
    <file>NicEntryDirect.cc</file>
    <file>NicEntryDirect.h</file>
  </compound>
  <compound kind="dir">
    <name>contract</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/contract/</path>
    <filename>dir_9a5449fe3dd78bb5bb9c9694a8a1946a.html</filename>
    <file>IVANETMobility.cc</file>
    <file>IVANETMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>ieee80211p</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mac/ieee80211p/</path>
    <filename>dir_c7c76db6efa7b911e0f9f448decd8ab0.html</filename>
    <file>Mac1609_4.cc</file>
    <file>Mac1609_4.h</file>
    <file>Mac80211pToPhy11pInterface.h</file>
    <file>WaveAppToMac1609_4Interface.h</file>
  </compound>
  <compound kind="dir">
    <name>ieee80211p</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/ieee80211p/</path>
    <filename>dir_200622b5799608f78cee6f2d1aa85127.html</filename>
    <file>BaseWaveApplLayer.cc</file>
    <file>BaseWaveApplLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>mac</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mac/</path>
    <filename>dir_9f3ff37551a7d9962b9f24e1c1b46cd2.html</filename>
    <dir>ieee80211p</dir>
  </compound>
  <compound kind="dir">
    <name>messages</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/messages/</path>
    <filename>dir_618d65345f3d57b451936fdaa95a22e7.html</filename>
    <file>AirFrame_m.h</file>
    <file>BorderMsg_m.h</file>
    <file>ChannelSenseRequest_m.h</file>
    <file>MacPkt_m.h</file>
  </compound>
  <compound kind="dir">
    <name>messages</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/messages/</path>
    <filename>dir_f60189ba5abb07b4cbdfd0d88a3cb89e.html</filename>
    <file>AirFrame11p_m.h</file>
    <file>Mac80211Pkt_m.h</file>
    <file>PhyControlMessage_m.h</file>
    <file>WaveShortMessage_m.h</file>
  </compound>
  <compound kind="dir">
    <name>mobility</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/</path>
    <filename>dir_9ea357ff8490171ff14d207de001a4ad.html</filename>
    <dir>traci</dir>
  </compound>
  <compound kind="dir">
    <name>mobility</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/</path>
    <filename>dir_a5918d52f0a82a1fcce719681ba1341c.html</filename>
    <dir>common</dir>
    <dir>contract</dir>
    <dir>single</dir>
  </compound>
  <compound kind="dir">
    <name>modules</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/</path>
    <filename>dir_9a350b5a4b1db77a4c811625b6e998c8.html</filename>
    <dir>analogueModel</dir>
    <dir>application</dir>
    <dir>mac</dir>
    <dir>messages</dir>
    <dir>mobility</dir>
    <dir>obstacle</dir>
    <dir>phy</dir>
    <dir>utility</dir>
    <dir>world</dir>
  </compound>
  <compound kind="dir">
    <name>modules</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/modules/</path>
    <filename>dir_af3aaa2d8a58291f9cf4885b437731a3.html</filename>
    <file>AddressingInterface.h</file>
    <file>BaseApplLayer.cc</file>
    <file>BaseApplLayer.h</file>
    <file>BaseBattery.cc</file>
    <file>BaseBattery.h</file>
    <file>BaseLayer.cc</file>
    <file>BaseLayer.h</file>
    <file>BaseMacLayer.cc</file>
    <file>BaseMacLayer.h</file>
    <file>BaseMobility.cc</file>
    <file>BaseMobility.h</file>
    <file>BaseModule.cc</file>
    <file>BaseModule.h</file>
    <file>BaseWorldUtility.cc</file>
    <file>BaseWorldUtility.h</file>
    <file>BatteryAccess.cc</file>
    <file>BatteryAccess.h</file>
  </compound>
  <compound kind="dir">
    <name>obstacle</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/obstacle/</path>
    <filename>dir_394ebadbe5172c765b46a7a4351c9fd4.html</filename>
    <file>Obstacle.cc</file>
    <file>Obstacle.h</file>
    <file>ObstacleControl.cc</file>
    <file>ObstacleControl.h</file>
  </compound>
  <compound kind="dir">
    <name>phy</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/phy/</path>
    <filename>dir_2619e191fa96a2c671a2d717fbea9cb0.html</filename>
    <file>Decider80211p.cc</file>
    <file>Decider80211p.h</file>
    <file>Decider80211pToPhy80211pInterface.h</file>
    <file>DeciderResult80211.h</file>
    <file>NistErrorRate.cc</file>
    <file>NistErrorRate.h</file>
    <file>PhyLayer80211p.cc</file>
    <file>PhyLayer80211p.h</file>
    <file>SNRThresholdDecider.cc</file>
    <file>SNRThresholdDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>phyLayer</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/phyLayer/</path>
    <filename>dir_af1514ba3c68d24357bf98a7604ab18c.html</filename>
    <file>AnalogueModel.h</file>
    <file>BaseDecider.cc</file>
    <file>BaseDecider.h</file>
    <file>BasePhyLayer.cc</file>
    <file>BasePhyLayer.h</file>
    <file>ChannelInfo.cc</file>
    <file>ChannelInfo.h</file>
    <file>ChannelState.cc</file>
    <file>ChannelState.h</file>
    <file>Decider.cc</file>
    <file>Decider.h</file>
    <file>DeciderToPhyInterface.h</file>
    <file>Interpolation.h</file>
    <file>MacToPhyControlInfo.h</file>
    <file>MacToPhyInterface.h</file>
    <file>Mapping.h</file>
    <file>MappingBase.cc</file>
    <file>MappingBase.h</file>
    <file>MappingUtils.cc</file>
    <file>MappingUtils.h</file>
    <file>PhyToMacControlInfo.h</file>
    <file>PhyUtils.cc</file>
    <file>PhyUtils.h</file>
    <file>Signal.cc</file>
    <file>Signal_.h</file>
  </compound>
  <compound kind="dir">
    <name>routing</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/routing/</path>
    <filename>dir_30cdb0ba73ec6aa07266999f59822b7b.html</filename>
    <dir>aodvvanet</dir>
  </compound>
  <compound kind="dir">
    <name>single</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/mobility/single/</path>
    <filename>dir_9716c1a1bc35dc0ba5cefe14da7ccd73.html</filename>
    <file>aodvTraCIMobility.cc</file>
    <file>aodvTraCIMobility.h</file>
    <file>bitcarTraCIMobility.cc</file>
    <file>bitcarTraCIMobility.h</file>
    <file>LinearVANETMobility.cc</file>
    <file>LinearVANETMobility.h</file>
    <file>rbvtrTraCIMobility.cc</file>
    <file>rbvtrTraCIMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/</path>
    <filename>dir_68267d1309a1af8e8297ef4c3efbcdba.html</filename>
    <dir>routing</dir>
    <dir>vanetrouting</dir>
    <dir>veins</dir>
  </compound>
  <compound kind="dir">
    <name>traci</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/application/traci/</path>
    <filename>dir_45a204f25991e7a4499a73d9dc8aae29.html</filename>
    <file>TraCIDemo11p.cc</file>
    <file>TraCIDemo11p.h</file>
    <file>TraCIDemoRSU11p.cc</file>
    <file>TraCIDemoRSU11p.h</file>
    <file>TraCITestApp.cc</file>
    <file>TraCITestApp.h</file>
  </compound>
  <compound kind="dir">
    <name>traci</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/mobility/traci/</path>
    <filename>dir_472b8c1f4f8019eef8304aaa3b11b414.html</filename>
    <file>TraCIBuffer.cc</file>
    <file>TraCIBuffer.h</file>
    <file>TraCIColor.cc</file>
    <file>TraCIColor.h</file>
    <file>TraCICommandInterface.cc</file>
    <file>TraCICommandInterface.h</file>
    <file>TraCIConnection.cc</file>
    <file>TraCIConnection.h</file>
    <file>TraCIConstants.h</file>
    <file>TraCICoord.h</file>
    <file>TraCIMobility.cc</file>
    <file>TraCIMobility.h</file>
    <file>TraCIScenarioManager.cc</file>
    <file>TraCIScenarioManager.h</file>
    <file>TraCIScenarioManagerInet.cc</file>
    <file>TraCIScenarioManagerInet.h</file>
    <file>TraCIScenarioManagerLaunchd.cc</file>
    <file>TraCIScenarioManagerLaunchd.h</file>
    <file>TraCIScreenRecorder.cc</file>
    <file>TraCIScreenRecorder.h</file>
  </compound>
  <compound kind="dir">
    <name>traci</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/traci/</path>
    <filename>dir_908d3ac2fdd04d45d78397f9a275f0c5.html</filename>
    <file>aodvTraCIConstants.h</file>
    <file>aodvTraCIScenarioManager.cc</file>
    <file>aodvTraCIScenarioManager.h</file>
    <file>aodvTraCIScenarioManagerLaunchd.cc</file>
    <file>aodvTraCIScenarioManagerLaunchd.h</file>
    <file>bitcarTraCIConstants.h</file>
    <file>bitcarTraCIScenarioManager.cc</file>
    <file>bitcarTraCIScenarioManager.h</file>
    <file>bitcarTraCIScenarioManagerLaunchd.cc</file>
    <file>bitcarTraCIScenarioManagerLaunchd.h</file>
    <file>rbvtrTraCIConstants.h</file>
    <file>rbvtrTraCIScenarioManager.cc</file>
    <file>rbvtrTraCIScenarioManager.h</file>
    <file>rbvtrTraCIScenarioManagerLaunchd.cc</file>
    <file>rbvtrTraCIScenarioManagerLaunchd.h</file>
    <file>vanetTraCIColor.cc</file>
    <file>vanetTraCIColor.h</file>
  </compound>
  <compound kind="dir">
    <name>traci</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/applications/traci/</path>
    <filename>dir_81720ef6070612728fc73adf132332d0.html</filename>
    <file>aodvTraCI.cc</file>
    <file>aodvTraCI.h</file>
    <file>aodvTraCITestApp.cc</file>
    <file>aodvTraCITestApp.h</file>
    <file>bitcarTraCIDemo.cc</file>
    <file>bitcarTraCIDemo.h</file>
    <file>bitcarTraCITestApp.cc</file>
    <file>bitcarTraCITestApp.h</file>
    <file>rbvtrTraCIDemo.cc</file>
    <file>rbvtrTraCIDemo.h</file>
    <file>rbvtrTraCITestApp.cc</file>
    <file>rbvtrTraCITestApp.h</file>
  </compound>
  <compound kind="dir">
    <name>util</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/util/</path>
    <filename>dir_de1e030d03d1130e3b5bfd1cfab53707.html</filename>
    <file>GlobalWirelessLinkInspector_Vanet.cc</file>
    <file>GlobalWirelessLinkInspector_Vanet.h</file>
  </compound>
  <compound kind="dir">
    <name>utility</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/utility/</path>
    <filename>dir_f8fe37ffe6c293ec4b27aa009c9df898.html</filename>
    <file>Consts80211p.h</file>
    <file>ConstsPhy.h</file>
  </compound>
  <compound kind="dir">
    <name>utils</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/base/utils/</path>
    <filename>dir_ce47d2ba4da213e61fb69f121aae032d.html</filename>
    <file>asserts.cc</file>
    <file>asserts.h</file>
    <file>Coord.cc</file>
    <file>Coord.h</file>
    <file>FindModule.h</file>
    <file>FWMath.h</file>
    <file>HostState.h</file>
    <file>MacToNetwControlInfo.h</file>
    <file>MiXiMDefs.h</file>
    <file>miximkerneldefs.h</file>
    <file>Move.h</file>
    <file>NetwToMacControlInfo.cc</file>
    <file>NetwToMacControlInfo.h</file>
    <file>PassedMessage.h</file>
    <file>SimpleAddress.cc</file>
    <file>SimpleAddress.h</file>
    <file>winsupport.cc</file>
    <file>winsupport.h</file>
  </compound>
  <compound kind="dir">
    <name>vanetrouting</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/</path>
    <filename>dir_c445b4a98834c3f76b51d373fb0b8553.html</filename>
    <dir>applications</dir>
    <dir>base</dir>
    <dir>mobility</dir>
    <dir>util</dir>
    <dir>world</dir>
  </compound>
  <compound kind="dir">
    <name>veins</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/</path>
    <filename>dir_17ef6c0fecec40d654af52c879dcf6bd.html</filename>
    <dir>base</dir>
    <dir>modules</dir>
  </compound>
  <compound kind="dir">
    <name>world</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/vanetrouting/world/</path>
    <filename>dir_1ea88dbc5d312a4499be8dd27ddf7b88.html</filename>
    <dir>traci</dir>
  </compound>
  <compound kind="dir">
    <name>world</name>
    <path>/home/administrator/ITS/omnetpp-4.4.1/samples/onlyVanet/src/veins/modules/world/</path>
    <filename>dir_16e57d392d75a3ef297176d2ec903517.html</filename>
    <dir>annotations</dir>
  </compound>
</tagfile>
